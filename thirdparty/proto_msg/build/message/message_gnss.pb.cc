// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_gnss.proto

#include "message_gnss.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rbk {
namespace protocol {
PROTOBUF_CONSTEXPR Message_GnssInstallInfo::Message_GnssInstallInfo(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , yaw_(0){}
struct Message_GnssInstallInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_GnssInstallInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_GnssInstallInfoDefaultTypeInternal() {}
  union {
    Message_GnssInstallInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_GnssInstallInfoDefaultTypeInternal _Message_GnssInstallInfo_default_instance_;
PROTOBUF_CONSTEXPR Message_GnssRefInfo::Message_GnssRefInfo(
    ::_pbi::ConstantInitialized)
  : longitude_(0)
  , latitude_(0)
  , altitude_(0){}
struct Message_GnssRefInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_GnssRefInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_GnssRefInfoDefaultTypeInternal() {}
  union {
    Message_GnssRefInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_GnssRefInfoDefaultTypeInternal _Message_GnssRefInfo_default_instance_;
PROTOBUF_CONSTEXPR Message_GNSS::Message_GNSS(
    ::_pbi::ConstantInitialized)
  : header_(nullptr)
  , install_info_(nullptr)
  , ref_info_(nullptr)
  , x_(0)
  , y_(0)
  , z_(0)
  , ubx_2d_acc_h_(0)
  , ubx_2d_acc_v_(0)
  , ubx_3d_acc_(0)
  , longitude_(0)
  , latitude_(0)
  , altitude_(0)
  , enu_x_(0)
  , enu_y_(0)
  , heading_(0)
  , status_(0){}
struct Message_GNSSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_GNSSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_GNSSDefaultTypeInternal() {}
  union {
    Message_GNSS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_GNSSDefaultTypeInternal _Message_GNSS_default_instance_;
PROTOBUF_CONSTEXPR Message_AllGNSS::Message_AllGNSS(
    ::_pbi::ConstantInitialized)
  : gnss_(){}
struct Message_AllGNSSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AllGNSSDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AllGNSSDefaultTypeInternal() {}
  union {
    Message_AllGNSS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AllGNSSDefaultTypeInternal _Message_AllGNSS_default_instance_;
}  // namespace protocol
}  // namespace rbk
static ::_pb::Metadata file_level_metadata_message_5fgnss_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_5fgnss_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_5fgnss_2eproto = nullptr;

const uint32_t TableStruct_message_5fgnss_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssInstallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssInstallInfo, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssInstallInfo, y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssInstallInfo, z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssInstallInfo, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssRefInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssRefInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssRefInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GnssRefInfo, altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, header_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, status_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, ubx_2d_acc_h_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, ubx_2d_acc_v_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, ubx_3d_acc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, longitude_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, latitude_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, altitude_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, install_info_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, ref_info_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, enu_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, enu_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_GNSS, heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AllGNSS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AllGNSS, gnss_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rbk::protocol::Message_GnssInstallInfo)},
  { 10, -1, -1, sizeof(::rbk::protocol::Message_GnssRefInfo)},
  { 19, -1, -1, sizeof(::rbk::protocol::Message_GNSS)},
  { 41, -1, -1, sizeof(::rbk::protocol::Message_AllGNSS)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rbk::protocol::_Message_GnssInstallInfo_default_instance_._instance,
  &::rbk::protocol::_Message_GnssRefInfo_default_instance_._instance,
  &::rbk::protocol::_Message_GNSS_default_instance_._instance,
  &::rbk::protocol::_Message_AllGNSS_default_instance_._instance,
};

const char descriptor_table_protodef_message_5fgnss_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022message_gnss.proto\022\014rbk.protocol\032\024mess"
  "age_header.proto\"G\n\027Message_GnssInstallI"
  "nfo\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\013\n\003"
  "yaw\030\004 \001(\001\"L\n\023Message_GnssRefInfo\022\021\n\tlong"
  "itude\030\001 \001(\001\022\020\n\010latitude\030\002 \001(\001\022\020\n\010altitud"
  "e\030\003 \001(\001\"\205\003\n\014Message_GNSS\022,\n\006header\030\001 \001(\013"
  "2\034.rbk.protocol.Message_Header\022\016\n\006status"
  "\030\002 \001(\005\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\t\n\001z\030\005 \001(\001\022"
  "\024\n\014ubx_2d_acc_h\030\007 \001(\001\022\024\n\014ubx_2d_acc_v\030\010 "
  "\001(\001\022\022\n\nubx_3d_acc\030\t \001(\001\022\021\n\tlongitude\030\n \001"
  "(\001\022\020\n\010latitude\030\013 \001(\001\022\020\n\010altitude\030\014 \001(\001\022;"
  "\n\014install_info\030\r \001(\0132%.rbk.protocol.Mess"
  "age_GnssInstallInfo\0223\n\010ref_info\030\016 \001(\0132!."
  "rbk.protocol.Message_GnssRefInfo\022\r\n\005enu_"
  "x\030\017 \001(\001\022\r\n\005enu_y\030\020 \001(\001\022\017\n\007heading\030\021 \001(\001\""
  ";\n\017Message_AllGNSS\022(\n\004gnss\030\001 \003(\0132\032.rbk.p"
  "rotocol.Message_GNSSb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_message_5fgnss_2eproto_deps[1] = {
  &::descriptor_table_message_5fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_message_5fgnss_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_5fgnss_2eproto = {
    false, false, 668, descriptor_table_protodef_message_5fgnss_2eproto,
    "message_gnss.proto",
    &descriptor_table_message_5fgnss_2eproto_once, descriptor_table_message_5fgnss_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_message_5fgnss_2eproto::offsets,
    file_level_metadata_message_5fgnss_2eproto, file_level_enum_descriptors_message_5fgnss_2eproto,
    file_level_service_descriptors_message_5fgnss_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_5fgnss_2eproto_getter() {
  return &descriptor_table_message_5fgnss_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_5fgnss_2eproto(&descriptor_table_message_5fgnss_2eproto);
namespace rbk {
namespace protocol {

// ===================================================================

class Message_GnssInstallInfo::_Internal {
 public:
};

Message_GnssInstallInfo::Message_GnssInstallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_GnssInstallInfo)
}
Message_GnssInstallInfo::Message_GnssInstallInfo(const Message_GnssInstallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_GnssInstallInfo)
}

inline void Message_GnssInstallInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
}

Message_GnssInstallInfo::~Message_GnssInstallInfo() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_GnssInstallInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_GnssInstallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_GnssInstallInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_GnssInstallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_GnssInstallInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&x_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_GnssInstallInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_GnssInstallInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_GnssInstallInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double yaw = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_GnssInstallInfo)
  return target;
}

size_t Message_GnssInstallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_GnssInstallInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_GnssInstallInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_GnssInstallInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_GnssInstallInfo::GetClassData() const { return &_class_data_; }

void Message_GnssInstallInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_GnssInstallInfo *>(to)->MergeFrom(
      static_cast<const Message_GnssInstallInfo &>(from));
}


void Message_GnssInstallInfo::MergeFrom(const Message_GnssInstallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_GnssInstallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_GnssInstallInfo::CopyFrom(const Message_GnssInstallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_GnssInstallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_GnssInstallInfo::IsInitialized() const {
  return true;
}

void Message_GnssInstallInfo::InternalSwap(Message_GnssInstallInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_GnssInstallInfo, yaw_)
      + sizeof(Message_GnssInstallInfo::yaw_)
      - PROTOBUF_FIELD_OFFSET(Message_GnssInstallInfo, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_GnssInstallInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fgnss_2eproto_getter, &descriptor_table_message_5fgnss_2eproto_once,
      file_level_metadata_message_5fgnss_2eproto[0]);
}

// ===================================================================

class Message_GnssRefInfo::_Internal {
 public:
};

Message_GnssRefInfo::Message_GnssRefInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_GnssRefInfo)
}
Message_GnssRefInfo::Message_GnssRefInfo(const Message_GnssRefInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_GnssRefInfo)
}

inline void Message_GnssRefInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
}

Message_GnssRefInfo::~Message_GnssRefInfo() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_GnssRefInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_GnssRefInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_GnssRefInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_GnssRefInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_GnssRefInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_GnssRefInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_GnssRefInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_GnssRefInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_longitude(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_GnssRefInfo)
  return target;
}

size_t Message_GnssRefInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_GnssRefInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longitude = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_GnssRefInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_GnssRefInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_GnssRefInfo::GetClassData() const { return &_class_data_; }

void Message_GnssRefInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_GnssRefInfo *>(to)->MergeFrom(
      static_cast<const Message_GnssRefInfo &>(from));
}


void Message_GnssRefInfo::MergeFrom(const Message_GnssRefInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_GnssRefInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_GnssRefInfo::CopyFrom(const Message_GnssRefInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_GnssRefInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_GnssRefInfo::IsInitialized() const {
  return true;
}

void Message_GnssRefInfo::InternalSwap(Message_GnssRefInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_GnssRefInfo, altitude_)
      + sizeof(Message_GnssRefInfo::altitude_)
      - PROTOBUF_FIELD_OFFSET(Message_GnssRefInfo, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_GnssRefInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fgnss_2eproto_getter, &descriptor_table_message_5fgnss_2eproto_once,
      file_level_metadata_message_5fgnss_2eproto[1]);
}

// ===================================================================

class Message_GNSS::_Internal {
 public:
  static const ::rbk::protocol::Message_Header& header(const Message_GNSS* msg);
  static const ::rbk::protocol::Message_GnssInstallInfo& install_info(const Message_GNSS* msg);
  static const ::rbk::protocol::Message_GnssRefInfo& ref_info(const Message_GNSS* msg);
};

const ::rbk::protocol::Message_Header&
Message_GNSS::_Internal::header(const Message_GNSS* msg) {
  return *msg->header_;
}
const ::rbk::protocol::Message_GnssInstallInfo&
Message_GNSS::_Internal::install_info(const Message_GNSS* msg) {
  return *msg->install_info_;
}
const ::rbk::protocol::Message_GnssRefInfo&
Message_GNSS::_Internal::ref_info(const Message_GNSS* msg) {
  return *msg->ref_info_;
}
void Message_GNSS::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Message_GNSS::Message_GNSS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_GNSS)
}
Message_GNSS::Message_GNSS(const Message_GNSS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rbk::protocol::Message_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_install_info()) {
    install_info_ = new ::rbk::protocol::Message_GnssInstallInfo(*from.install_info_);
  } else {
    install_info_ = nullptr;
  }
  if (from._internal_has_ref_info()) {
    ref_info_ = new ::rbk::protocol::Message_GnssRefInfo(*from.ref_info_);
  } else {
    ref_info_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&x_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_GNSS)
}

inline void Message_GNSS::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

Message_GNSS::~Message_GNSS() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_GNSS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_GNSS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete install_info_;
  if (this != internal_default_instance()) delete ref_info_;
}

void Message_GNSS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_GNSS::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_GNSS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && install_info_ != nullptr) {
    delete install_info_;
  }
  install_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ref_info_ != nullptr) {
    delete ref_info_;
  }
  ref_info_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&x_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_GNSS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbk.protocol.Message_Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ubx_2d_acc_h = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          ubx_2d_acc_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ubx_2d_acc_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ubx_2d_acc_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ubx_3d_acc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          ubx_3d_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_GnssInstallInfo install_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_install_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_GnssRefInfo ref_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ref_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double enu_x = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          enu_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double enu_y = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          enu_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_GNSS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_GNSS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbk.protocol.Message_Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  // double x = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  // double z = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_z(), target);
  }

  // double ubx_2d_acc_h = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_2d_acc_h = this->_internal_ubx_2d_acc_h();
  uint64_t raw_ubx_2d_acc_h;
  memcpy(&raw_ubx_2d_acc_h, &tmp_ubx_2d_acc_h, sizeof(tmp_ubx_2d_acc_h));
  if (raw_ubx_2d_acc_h != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_ubx_2d_acc_h(), target);
  }

  // double ubx_2d_acc_v = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_2d_acc_v = this->_internal_ubx_2d_acc_v();
  uint64_t raw_ubx_2d_acc_v;
  memcpy(&raw_ubx_2d_acc_v, &tmp_ubx_2d_acc_v, sizeof(tmp_ubx_2d_acc_v));
  if (raw_ubx_2d_acc_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ubx_2d_acc_v(), target);
  }

  // double ubx_3d_acc = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_3d_acc = this->_internal_ubx_3d_acc();
  uint64_t raw_ubx_3d_acc;
  memcpy(&raw_ubx_3d_acc, &tmp_ubx_3d_acc, sizeof(tmp_ubx_3d_acc));
  if (raw_ubx_3d_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_ubx_3d_acc(), target);
  }

  // double longitude = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_longitude(), target);
  }

  // double latitude = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_latitude(), target);
  }

  // double altitude = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_altitude(), target);
  }

  // .rbk.protocol.Message_GnssInstallInfo install_info = 13;
  if (this->_internal_has_install_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::install_info(this),
        _Internal::install_info(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_GnssRefInfo ref_info = 14;
  if (this->_internal_has_ref_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ref_info(this),
        _Internal::ref_info(this).GetCachedSize(), target, stream);
  }

  // double enu_x = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_enu_x = this->_internal_enu_x();
  uint64_t raw_enu_x;
  memcpy(&raw_enu_x, &tmp_enu_x, sizeof(tmp_enu_x));
  if (raw_enu_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_enu_x(), target);
  }

  // double enu_y = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_enu_y = this->_internal_enu_y();
  uint64_t raw_enu_y;
  memcpy(&raw_enu_y, &tmp_enu_y, sizeof(tmp_enu_y));
  if (raw_enu_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_enu_y(), target);
  }

  // double heading = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_GNSS)
  return target;
}

size_t Message_GNSS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_GNSS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbk.protocol.Message_Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .rbk.protocol.Message_GnssInstallInfo install_info = 13;
  if (this->_internal_has_install_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *install_info_);
  }

  // .rbk.protocol.Message_GnssRefInfo ref_info = 14;
  if (this->_internal_has_ref_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_info_);
  }

  // double x = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double ubx_2d_acc_h = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_2d_acc_h = this->_internal_ubx_2d_acc_h();
  uint64_t raw_ubx_2d_acc_h;
  memcpy(&raw_ubx_2d_acc_h, &tmp_ubx_2d_acc_h, sizeof(tmp_ubx_2d_acc_h));
  if (raw_ubx_2d_acc_h != 0) {
    total_size += 1 + 8;
  }

  // double ubx_2d_acc_v = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_2d_acc_v = this->_internal_ubx_2d_acc_v();
  uint64_t raw_ubx_2d_acc_v;
  memcpy(&raw_ubx_2d_acc_v, &tmp_ubx_2d_acc_v, sizeof(tmp_ubx_2d_acc_v));
  if (raw_ubx_2d_acc_v != 0) {
    total_size += 1 + 8;
  }

  // double ubx_3d_acc = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_3d_acc = this->_internal_ubx_3d_acc();
  uint64_t raw_ubx_3d_acc;
  memcpy(&raw_ubx_3d_acc, &tmp_ubx_3d_acc, sizeof(tmp_ubx_3d_acc));
  if (raw_ubx_3d_acc != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double altitude = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = this->_internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    total_size += 1 + 8;
  }

  // double enu_x = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_enu_x = this->_internal_enu_x();
  uint64_t raw_enu_x;
  memcpy(&raw_enu_x, &tmp_enu_x, sizeof(tmp_enu_x));
  if (raw_enu_x != 0) {
    total_size += 1 + 8;
  }

  // double enu_y = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_enu_y = this->_internal_enu_y();
  uint64_t raw_enu_y;
  memcpy(&raw_enu_y, &tmp_enu_y, sizeof(tmp_enu_y));
  if (raw_enu_y != 0) {
    total_size += 2 + 8;
  }

  // double heading = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    total_size += 2 + 8;
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_GNSS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_GNSS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_GNSS::GetClassData() const { return &_class_data_; }

void Message_GNSS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_GNSS *>(to)->MergeFrom(
      static_cast<const Message_GNSS &>(from));
}


void Message_GNSS::MergeFrom(const Message_GNSS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_GNSS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rbk::protocol::Message_Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_install_info()) {
    _internal_mutable_install_info()->::rbk::protocol::Message_GnssInstallInfo::MergeFrom(from._internal_install_info());
  }
  if (from._internal_has_ref_info()) {
    _internal_mutable_ref_info()->::rbk::protocol::Message_GnssRefInfo::MergeFrom(from._internal_ref_info());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_2d_acc_h = from._internal_ubx_2d_acc_h();
  uint64_t raw_ubx_2d_acc_h;
  memcpy(&raw_ubx_2d_acc_h, &tmp_ubx_2d_acc_h, sizeof(tmp_ubx_2d_acc_h));
  if (raw_ubx_2d_acc_h != 0) {
    _internal_set_ubx_2d_acc_h(from._internal_ubx_2d_acc_h());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_2d_acc_v = from._internal_ubx_2d_acc_v();
  uint64_t raw_ubx_2d_acc_v;
  memcpy(&raw_ubx_2d_acc_v, &tmp_ubx_2d_acc_v, sizeof(tmp_ubx_2d_acc_v));
  if (raw_ubx_2d_acc_v != 0) {
    _internal_set_ubx_2d_acc_v(from._internal_ubx_2d_acc_v());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ubx_3d_acc = from._internal_ubx_3d_acc();
  uint64_t raw_ubx_3d_acc;
  memcpy(&raw_ubx_3d_acc, &tmp_ubx_3d_acc, sizeof(tmp_ubx_3d_acc));
  if (raw_ubx_3d_acc != 0) {
    _internal_set_ubx_3d_acc(from._internal_ubx_3d_acc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude = from._internal_altitude();
  uint64_t raw_altitude;
  memcpy(&raw_altitude, &tmp_altitude, sizeof(tmp_altitude));
  if (raw_altitude != 0) {
    _internal_set_altitude(from._internal_altitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_enu_x = from._internal_enu_x();
  uint64_t raw_enu_x;
  memcpy(&raw_enu_x, &tmp_enu_x, sizeof(tmp_enu_x));
  if (raw_enu_x != 0) {
    _internal_set_enu_x(from._internal_enu_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_enu_y = from._internal_enu_y();
  uint64_t raw_enu_y;
  memcpy(&raw_enu_y, &tmp_enu_y, sizeof(tmp_enu_y));
  if (raw_enu_y != 0) {
    _internal_set_enu_y(from._internal_enu_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = from._internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    _internal_set_heading(from._internal_heading());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_GNSS::CopyFrom(const Message_GNSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_GNSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_GNSS::IsInitialized() const {
  return true;
}

void Message_GNSS::InternalSwap(Message_GNSS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_GNSS, status_)
      + sizeof(Message_GNSS::status_)
      - PROTOBUF_FIELD_OFFSET(Message_GNSS, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_GNSS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fgnss_2eproto_getter, &descriptor_table_message_5fgnss_2eproto_once,
      file_level_metadata_message_5fgnss_2eproto[2]);
}

// ===================================================================

class Message_AllGNSS::_Internal {
 public:
};

Message_AllGNSS::Message_AllGNSS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  gnss_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_AllGNSS)
}
Message_AllGNSS::Message_AllGNSS(const Message_AllGNSS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      gnss_(from.gnss_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_AllGNSS)
}

inline void Message_AllGNSS::SharedCtor() {
}

Message_AllGNSS::~Message_AllGNSS() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_AllGNSS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AllGNSS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_AllGNSS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_AllGNSS::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_AllGNSS)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gnss_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AllGNSS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rbk.protocol.Message_GNSS gnss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gnss(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AllGNSS::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_AllGNSS)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_GNSS gnss = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gnss_size()); i < n; i++) {
    const auto& repfield = this->_internal_gnss(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_AllGNSS)
  return target;
}

size_t Message_AllGNSS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_AllGNSS)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_GNSS gnss = 1;
  total_size += 1UL * this->_internal_gnss_size();
  for (const auto& msg : this->gnss_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AllGNSS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_AllGNSS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AllGNSS::GetClassData() const { return &_class_data_; }

void Message_AllGNSS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_AllGNSS *>(to)->MergeFrom(
      static_cast<const Message_AllGNSS &>(from));
}


void Message_AllGNSS::MergeFrom(const Message_AllGNSS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_AllGNSS)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  gnss_.MergeFrom(from.gnss_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AllGNSS::CopyFrom(const Message_AllGNSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_AllGNSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AllGNSS::IsInitialized() const {
  return true;
}

void Message_AllGNSS::InternalSwap(Message_AllGNSS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  gnss_.InternalSwap(&other->gnss_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AllGNSS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fgnss_2eproto_getter, &descriptor_table_message_5fgnss_2eproto_once,
      file_level_metadata_message_5fgnss_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_GnssInstallInfo*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_GnssInstallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_GnssInstallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_GnssRefInfo*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_GnssRefInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_GnssRefInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_GNSS*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_GNSS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_GNSS >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_AllGNSS*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_AllGNSS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_AllGNSS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
