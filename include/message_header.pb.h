// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fheader_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fheader_2eproto;
namespace rbk {
namespace protocol {
class Message_Header;
struct Message_HeaderDefaultTypeInternal;
extern Message_HeaderDefaultTypeInternal _Message_Header_default_instance_;
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> ::rbk::protocol::Message_Header* Arena::CreateMaybeMessage<::rbk::protocol::Message_Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rbk {
namespace protocol {

// ===================================================================

class Message_Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_Header) */ {
 public:
  inline Message_Header() : Message_Header(nullptr) {}
  ~Message_Header() override;
  explicit PROTOBUF_CONSTEXPR Message_Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Header(const Message_Header& from);
  Message_Header(Message_Header&& from) noexcept
    : Message_Header() {
    *this = ::std::move(from);
  }

  inline Message_Header& operator=(const Message_Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Header& operator=(Message_Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Header* internal_default_instance() {
    return reinterpret_cast<const Message_Header*>(
               &_Message_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_Header& a, Message_Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_Header";
  }
  protected:
  explicit Message_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 4,
    kPubNsecFieldNumber = 1,
    kDataNsecFieldNumber = 2,
    kSeqFieldNumber = 3,
  };
  // string frame_id = 4;
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // uint64 pub_nsec = 1;
  void clear_pub_nsec();
  uint64_t pub_nsec() const;
  void set_pub_nsec(uint64_t value);
  private:
  uint64_t _internal_pub_nsec() const;
  void _internal_set_pub_nsec(uint64_t value);
  public:

  // uint64 data_nsec = 2;
  void clear_data_nsec();
  uint64_t data_nsec() const;
  void set_data_nsec(uint64_t value);
  private:
  uint64_t _internal_data_nsec() const;
  void _internal_set_data_nsec(uint64_t value);
  public:

  // uint64 seq = 3;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  uint64_t pub_nsec_;
  uint64_t data_nsec_;
  uint64_t seq_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_Header

// uint64 pub_nsec = 1;
inline void Message_Header::clear_pub_nsec() {
  pub_nsec_ = uint64_t{0u};
}
inline uint64_t Message_Header::_internal_pub_nsec() const {
  return pub_nsec_;
}
inline uint64_t Message_Header::pub_nsec() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Header.pub_nsec)
  return _internal_pub_nsec();
}
inline void Message_Header::_internal_set_pub_nsec(uint64_t value) {
  
  pub_nsec_ = value;
}
inline void Message_Header::set_pub_nsec(uint64_t value) {
  _internal_set_pub_nsec(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Header.pub_nsec)
}

// uint64 data_nsec = 2;
inline void Message_Header::clear_data_nsec() {
  data_nsec_ = uint64_t{0u};
}
inline uint64_t Message_Header::_internal_data_nsec() const {
  return data_nsec_;
}
inline uint64_t Message_Header::data_nsec() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Header.data_nsec)
  return _internal_data_nsec();
}
inline void Message_Header::_internal_set_data_nsec(uint64_t value) {
  
  data_nsec_ = value;
}
inline void Message_Header::set_data_nsec(uint64_t value) {
  _internal_set_data_nsec(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Header.data_nsec)
}

// uint64 seq = 3;
inline void Message_Header::clear_seq() {
  seq_ = uint64_t{0u};
}
inline uint64_t Message_Header::_internal_seq() const {
  return seq_;
}
inline uint64_t Message_Header::seq() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Header.seq)
  return _internal_seq();
}
inline void Message_Header::_internal_set_seq(uint64_t value) {
  
  seq_ = value;
}
inline void Message_Header::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Header.seq)
}

// string frame_id = 4;
inline void Message_Header::clear_frame_id() {
  frame_id_.ClearToEmpty();
}
inline const std::string& Message_Header::frame_id() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Header.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Header::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Header.frame_id)
}
inline std::string* Message_Header::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Header.frame_id)
  return _s;
}
inline const std::string& Message_Header::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void Message_Header::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Header::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Header.frame_id)
  return frame_id_.Release();
}
inline void Message_Header::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_id_.IsDefault()) {
    frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Header.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rbk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fheader_2eproto
