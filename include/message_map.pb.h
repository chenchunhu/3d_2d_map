// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "message_header.pb.h"
#include "message_imu.pb.h"
#include "message_gnss.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fmap_2eproto;
namespace rbk {
namespace protocol {
class Message_AdvancedArea;
struct Message_AdvancedAreaDefaultTypeInternal;
extern Message_AdvancedAreaDefaultTypeInternal _Message_AdvancedArea_default_instance_;
class Message_AdvancedCurve;
struct Message_AdvancedCurveDefaultTypeInternal;
extern Message_AdvancedCurveDefaultTypeInternal _Message_AdvancedCurve_default_instance_;
class Message_AdvancedLine;
struct Message_AdvancedLineDefaultTypeInternal;
extern Message_AdvancedLineDefaultTypeInternal _Message_AdvancedLine_default_instance_;
class Message_AdvancedPoint;
struct Message_AdvancedPointDefaultTypeInternal;
extern Message_AdvancedPointDefaultTypeInternal _Message_AdvancedPoint_default_instance_;
class Message_BinLocation;
struct Message_BinLocationDefaultTypeInternal;
extern Message_BinLocationDefaultTypeInternal _Message_BinLocation_default_instance_;
class Message_BinLocations;
struct Message_BinLocationsDefaultTypeInternal;
extern Message_BinLocationsDefaultTypeInternal _Message_BinLocations_default_instance_;
class Message_Device;
struct Message_DeviceDefaultTypeInternal;
extern Message_DeviceDefaultTypeInternal _Message_Device_default_instance_;
class Message_ExternalDevice;
struct Message_ExternalDeviceDefaultTypeInternal;
extern Message_ExternalDeviceDefaultTypeInternal _Message_ExternalDevice_default_instance_;
class Message_LaserDevice;
struct Message_LaserDeviceDefaultTypeInternal;
extern Message_LaserDeviceDefaultTypeInternal _Message_LaserDevice_default_instance_;
class Message_LiveRefPos;
struct Message_LiveRefPosDefaultTypeInternal;
extern Message_LiveRefPosDefaultTypeInternal _Message_LiveRefPos_default_instance_;
class Message_Map;
struct Message_MapDefaultTypeInternal;
extern Message_MapDefaultTypeInternal _Message_Map_default_instance_;
class Message_Map3D;
struct Message_Map3DDefaultTypeInternal;
extern Message_Map3DDefaultTypeInternal _Message_Map3D_default_instance_;
class Message_MapAttribute;
struct Message_MapAttributeDefaultTypeInternal;
extern Message_MapAttributeDefaultTypeInternal _Message_MapAttribute_default_instance_;
class Message_MapHeader;
struct Message_MapHeaderDefaultTypeInternal;
extern Message_MapHeaderDefaultTypeInternal _Message_MapHeader_default_instance_;
class Message_MapLine;
struct Message_MapLineDefaultTypeInternal;
extern Message_MapLineDefaultTypeInternal _Message_MapLine_default_instance_;
class Message_MapLog;
struct Message_MapLogDefaultTypeInternal;
extern Message_MapLogDefaultTypeInternal _Message_MapLog_default_instance_;
class Message_MapLogData;
struct Message_MapLogDataDefaultTypeInternal;
extern Message_MapLogDataDefaultTypeInternal _Message_MapLogData_default_instance_;
class Message_MapLogData3D;
struct Message_MapLogData3DDefaultTypeInternal;
extern Message_MapLogData3DDefaultTypeInternal _Message_MapLogData3D_default_instance_;
class Message_MapOdo;
struct Message_MapOdoDefaultTypeInternal;
extern Message_MapOdoDefaultTypeInternal _Message_MapOdo_default_instance_;
class Message_MapPos;
struct Message_MapPosDefaultTypeInternal;
extern Message_MapPosDefaultTypeInternal _Message_MapPos_default_instance_;
class Message_MapProperty;
struct Message_MapPropertyDefaultTypeInternal;
extern Message_MapPropertyDefaultTypeInternal _Message_MapProperty_default_instance_;
class Message_MapRSSIPos;
struct Message_MapRSSIPosDefaultTypeInternal;
extern Message_MapRSSIPosDefaultTypeInternal _Message_MapRSSIPos_default_instance_;
class Message_PatrolRoute;
struct Message_PatrolRouteDefaultTypeInternal;
extern Message_PatrolRouteDefaultTypeInternal _Message_PatrolRoute_default_instance_;
class Message_PatrolRouteStation;
struct Message_PatrolRouteStationDefaultTypeInternal;
extern Message_PatrolRouteStationDefaultTypeInternal _Message_PatrolRouteStation_default_instance_;
class Message_Primitive;
struct Message_PrimitiveDefaultTypeInternal;
extern Message_PrimitiveDefaultTypeInternal _Message_Primitive_default_instance_;
class Message_ReflectorPos;
struct Message_ReflectorPosDefaultTypeInternal;
extern Message_ReflectorPosDefaultTypeInternal _Message_ReflectorPos_default_instance_;
class Message_VirtualLineList;
struct Message_VirtualLineListDefaultTypeInternal;
extern Message_VirtualLineListDefaultTypeInternal _Message_VirtualLineList_default_instance_;
class Message_tagPos;
struct Message_tagPosDefaultTypeInternal;
extern Message_tagPosDefaultTypeInternal _Message_tagPos_default_instance_;
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> ::rbk::protocol::Message_AdvancedArea* Arena::CreateMaybeMessage<::rbk::protocol::Message_AdvancedArea>(Arena*);
template<> ::rbk::protocol::Message_AdvancedCurve* Arena::CreateMaybeMessage<::rbk::protocol::Message_AdvancedCurve>(Arena*);
template<> ::rbk::protocol::Message_AdvancedLine* Arena::CreateMaybeMessage<::rbk::protocol::Message_AdvancedLine>(Arena*);
template<> ::rbk::protocol::Message_AdvancedPoint* Arena::CreateMaybeMessage<::rbk::protocol::Message_AdvancedPoint>(Arena*);
template<> ::rbk::protocol::Message_BinLocation* Arena::CreateMaybeMessage<::rbk::protocol::Message_BinLocation>(Arena*);
template<> ::rbk::protocol::Message_BinLocations* Arena::CreateMaybeMessage<::rbk::protocol::Message_BinLocations>(Arena*);
template<> ::rbk::protocol::Message_Device* Arena::CreateMaybeMessage<::rbk::protocol::Message_Device>(Arena*);
template<> ::rbk::protocol::Message_ExternalDevice* Arena::CreateMaybeMessage<::rbk::protocol::Message_ExternalDevice>(Arena*);
template<> ::rbk::protocol::Message_LaserDevice* Arena::CreateMaybeMessage<::rbk::protocol::Message_LaserDevice>(Arena*);
template<> ::rbk::protocol::Message_LiveRefPos* Arena::CreateMaybeMessage<::rbk::protocol::Message_LiveRefPos>(Arena*);
template<> ::rbk::protocol::Message_Map* Arena::CreateMaybeMessage<::rbk::protocol::Message_Map>(Arena*);
template<> ::rbk::protocol::Message_Map3D* Arena::CreateMaybeMessage<::rbk::protocol::Message_Map3D>(Arena*);
template<> ::rbk::protocol::Message_MapAttribute* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(Arena*);
template<> ::rbk::protocol::Message_MapHeader* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapHeader>(Arena*);
template<> ::rbk::protocol::Message_MapLine* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapLine>(Arena*);
template<> ::rbk::protocol::Message_MapLog* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapLog>(Arena*);
template<> ::rbk::protocol::Message_MapLogData* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapLogData>(Arena*);
template<> ::rbk::protocol::Message_MapLogData3D* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapLogData3D>(Arena*);
template<> ::rbk::protocol::Message_MapOdo* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapOdo>(Arena*);
template<> ::rbk::protocol::Message_MapPos* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapPos>(Arena*);
template<> ::rbk::protocol::Message_MapProperty* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapProperty>(Arena*);
template<> ::rbk::protocol::Message_MapRSSIPos* Arena::CreateMaybeMessage<::rbk::protocol::Message_MapRSSIPos>(Arena*);
template<> ::rbk::protocol::Message_PatrolRoute* Arena::CreateMaybeMessage<::rbk::protocol::Message_PatrolRoute>(Arena*);
template<> ::rbk::protocol::Message_PatrolRouteStation* Arena::CreateMaybeMessage<::rbk::protocol::Message_PatrolRouteStation>(Arena*);
template<> ::rbk::protocol::Message_Primitive* Arena::CreateMaybeMessage<::rbk::protocol::Message_Primitive>(Arena*);
template<> ::rbk::protocol::Message_ReflectorPos* Arena::CreateMaybeMessage<::rbk::protocol::Message_ReflectorPos>(Arena*);
template<> ::rbk::protocol::Message_VirtualLineList* Arena::CreateMaybeMessage<::rbk::protocol::Message_VirtualLineList>(Arena*);
template<> ::rbk::protocol::Message_tagPos* Arena::CreateMaybeMessage<::rbk::protocol::Message_tagPos>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rbk {
namespace protocol {

// ===================================================================

class Message_MapLogData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapLogData) */ {
 public:
  inline Message_MapLogData() : Message_MapLogData(nullptr) {}
  ~Message_MapLogData() override;
  explicit PROTOBUF_CONSTEXPR Message_MapLogData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapLogData(const Message_MapLogData& from);
  Message_MapLogData(Message_MapLogData&& from) noexcept
    : Message_MapLogData() {
    *this = ::std::move(from);
  }

  inline Message_MapLogData& operator=(const Message_MapLogData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapLogData& operator=(Message_MapLogData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapLogData& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapLogData* internal_default_instance() {
    return reinterpret_cast<const Message_MapLogData*>(
               &_Message_MapLogData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_MapLogData& a, Message_MapLogData& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapLogData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapLogData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapLogData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapLogData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapLogData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapLogData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapLogData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapLogData";
  }
  protected:
  explicit Message_MapLogData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaserBeamDistFieldNumber = 4,
    kLaserBeamAngleFieldNumber = 5,
    kRssiFieldNumber = 6,
    kHeaderFieldNumber = 7,
    kRobotOdoXFieldNumber = 1,
    kRobotOdoYFieldNumber = 2,
    kRobotOdoWFieldNumber = 3,
  };
  // repeated double laser_beam_dist = 4;
  int laser_beam_dist_size() const;
  private:
  int _internal_laser_beam_dist_size() const;
  public:
  void clear_laser_beam_dist();
  private:
  double _internal_laser_beam_dist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_laser_beam_dist() const;
  void _internal_add_laser_beam_dist(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_laser_beam_dist();
  public:
  double laser_beam_dist(int index) const;
  void set_laser_beam_dist(int index, double value);
  void add_laser_beam_dist(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      laser_beam_dist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_laser_beam_dist();

  // repeated double laser_beam_angle = 5;
  int laser_beam_angle_size() const;
  private:
  int _internal_laser_beam_angle_size() const;
  public:
  void clear_laser_beam_angle();
  private:
  double _internal_laser_beam_angle(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_laser_beam_angle() const;
  void _internal_add_laser_beam_angle(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_laser_beam_angle();
  public:
  double laser_beam_angle(int index) const;
  void set_laser_beam_angle(int index, double value);
  void add_laser_beam_angle(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      laser_beam_angle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_laser_beam_angle();

  // repeated double rssi = 6;
  int rssi_size() const;
  private:
  int _internal_rssi_size() const;
  public:
  void clear_rssi();
  private:
  double _internal_rssi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_rssi() const;
  void _internal_add_rssi(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_rssi();
  public:
  double rssi(int index) const;
  void set_rssi(int index, double value);
  void add_rssi(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      rssi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_rssi();

  // .rbk.protocol.Message_Header header = 7;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::rbk::protocol::Message_Header& header() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_Header* release_header();
  ::rbk::protocol::Message_Header* mutable_header();
  void set_allocated_header(::rbk::protocol::Message_Header* header);
  private:
  const ::rbk::protocol::Message_Header& _internal_header() const;
  ::rbk::protocol::Message_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::rbk::protocol::Message_Header* header);
  ::rbk::protocol::Message_Header* unsafe_arena_release_header();

  // double robot_odo_x = 1;
  void clear_robot_odo_x();
  double robot_odo_x() const;
  void set_robot_odo_x(double value);
  private:
  double _internal_robot_odo_x() const;
  void _internal_set_robot_odo_x(double value);
  public:

  // double robot_odo_y = 2;
  void clear_robot_odo_y();
  double robot_odo_y() const;
  void set_robot_odo_y(double value);
  private:
  double _internal_robot_odo_y() const;
  void _internal_set_robot_odo_y(double value);
  public:

  // double robot_odo_w = 3;
  void clear_robot_odo_w();
  double robot_odo_w() const;
  void set_robot_odo_w(double value);
  private:
  double _internal_robot_odo_w() const;
  void _internal_set_robot_odo_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapLogData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > laser_beam_dist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > laser_beam_angle_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > rssi_;
  ::rbk::protocol::Message_Header* header_;
  double robot_odo_x_;
  double robot_odo_y_;
  double robot_odo_w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapOdo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapOdo) */ {
 public:
  inline Message_MapOdo() : Message_MapOdo(nullptr) {}
  ~Message_MapOdo() override;
  explicit PROTOBUF_CONSTEXPR Message_MapOdo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapOdo(const Message_MapOdo& from);
  Message_MapOdo(Message_MapOdo&& from) noexcept
    : Message_MapOdo() {
    *this = ::std::move(from);
  }

  inline Message_MapOdo& operator=(const Message_MapOdo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapOdo& operator=(Message_MapOdo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapOdo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapOdo* internal_default_instance() {
    return reinterpret_cast<const Message_MapOdo*>(
               &_Message_MapOdo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_MapOdo& a, Message_MapOdo& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapOdo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapOdo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapOdo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapOdo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapOdo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapOdo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapOdo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapOdo";
  }
  protected:
  explicit Message_MapOdo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kOdoXFieldNumber = 2,
    kOdoYFieldNumber = 3,
    kOdoWFieldNumber = 4,
    kOdoVxFieldNumber = 5,
    kOdoVyFieldNumber = 6,
    kOdoVwFieldNumber = 7,
  };
  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // float odo_x = 2;
  void clear_odo_x();
  float odo_x() const;
  void set_odo_x(float value);
  private:
  float _internal_odo_x() const;
  void _internal_set_odo_x(float value);
  public:

  // float odo_y = 3;
  void clear_odo_y();
  float odo_y() const;
  void set_odo_y(float value);
  private:
  float _internal_odo_y() const;
  void _internal_set_odo_y(float value);
  public:

  // float odo_w = 4;
  void clear_odo_w();
  float odo_w() const;
  void set_odo_w(float value);
  private:
  float _internal_odo_w() const;
  void _internal_set_odo_w(float value);
  public:

  // float odo_vx = 5;
  void clear_odo_vx();
  float odo_vx() const;
  void set_odo_vx(float value);
  private:
  float _internal_odo_vx() const;
  void _internal_set_odo_vx(float value);
  public:

  // float odo_vy = 6;
  void clear_odo_vy();
  float odo_vy() const;
  void set_odo_vy(float value);
  private:
  float _internal_odo_vy() const;
  void _internal_set_odo_vy(float value);
  public:

  // float odo_vw = 7;
  void clear_odo_vw();
  float odo_vw() const;
  void set_odo_vw(float value);
  private:
  float _internal_odo_vw() const;
  void _internal_set_odo_vw(float value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapOdo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double timestamp_;
  float odo_x_;
  float odo_y_;
  float odo_w_;
  float odo_vx_;
  float odo_vy_;
  float odo_vw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapLogData3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapLogData3D) */ {
 public:
  inline Message_MapLogData3D() : Message_MapLogData3D(nullptr) {}
  ~Message_MapLogData3D() override;
  explicit PROTOBUF_CONSTEXPR Message_MapLogData3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapLogData3D(const Message_MapLogData3D& from);
  Message_MapLogData3D(Message_MapLogData3D&& from) noexcept
    : Message_MapLogData3D() {
    *this = ::std::move(from);
  }

  inline Message_MapLogData3D& operator=(const Message_MapLogData3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapLogData3D& operator=(Message_MapLogData3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapLogData3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapLogData3D* internal_default_instance() {
    return reinterpret_cast<const Message_MapLogData3D*>(
               &_Message_MapLogData3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_MapLogData3D& a, Message_MapLogData3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapLogData3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapLogData3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapLogData3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapLogData3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapLogData3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapLogData3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapLogData3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapLogData3D";
  }
  protected:
  explicit Message_MapLogData3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kIntensityFieldNumber = 5,
    kTimeoffsetFieldNumber = 6,
    kRingFieldNumber = 7,
    kDataFieldNumber = 8,
    kFirstAzimuthFieldNumber = 9,
    kSecondAzimuthFieldNumber = 10,
    kTimestampFieldNumber = 1,
  };
  // repeated float x = 2;
  int x_size() const;
  private:
  int _internal_x_size() const;
  public:
  void clear_x();
  private:
  float _internal_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x() const;
  void _internal_add_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x();
  public:
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x();

  // repeated float y = 3;
  int y_size() const;
  private:
  int _internal_y_size() const;
  public:
  void clear_y();
  private:
  float _internal_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y() const;
  void _internal_add_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y();
  public:
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y();

  // repeated float z = 4;
  int z_size() const;
  private:
  int _internal_z_size() const;
  public:
  void clear_z();
  private:
  float _internal_z(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_z() const;
  void _internal_add_z(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_z();
  public:
  float z(int index) const;
  void set_z(int index, float value);
  void add_z(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      z() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_z();

  // repeated uint32 intensity = 5;
  int intensity_size() const;
  private:
  int _internal_intensity_size() const;
  public:
  void clear_intensity();
  private:
  uint32_t _internal_intensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_intensity() const;
  void _internal_add_intensity(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_intensity();
  public:
  uint32_t intensity(int index) const;
  void set_intensity(int index, uint32_t value);
  void add_intensity(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      intensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_intensity();

  // repeated uint32 timeoffset = 6;
  int timeoffset_size() const;
  private:
  int _internal_timeoffset_size() const;
  public:
  void clear_timeoffset();
  private:
  uint32_t _internal_timeoffset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_timeoffset() const;
  void _internal_add_timeoffset(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_timeoffset();
  public:
  uint32_t timeoffset(int index) const;
  void set_timeoffset(int index, uint32_t value);
  void add_timeoffset(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      timeoffset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_timeoffset();

  // repeated uint32 ring = 7;
  int ring_size() const;
  private:
  int _internal_ring_size() const;
  public:
  void clear_ring();
  private:
  uint32_t _internal_ring(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ring() const;
  void _internal_add_ring(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ring();
  public:
  uint32_t ring(int index) const;
  void set_ring(int index, uint32_t value);
  void add_ring(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ring() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ring();

  // repeated bytes data = 8;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // repeated float firstAzimuth = 9;
  int firstazimuth_size() const;
  private:
  int _internal_firstazimuth_size() const;
  public:
  void clear_firstazimuth();
  private:
  float _internal_firstazimuth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_firstazimuth() const;
  void _internal_add_firstazimuth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_firstazimuth();
  public:
  float firstazimuth(int index) const;
  void set_firstazimuth(int index, float value);
  void add_firstazimuth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      firstazimuth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_firstazimuth();

  // repeated float secondAzimuth = 10;
  int secondazimuth_size() const;
  private:
  int _internal_secondazimuth_size() const;
  public:
  void clear_secondazimuth();
  private:
  float _internal_secondazimuth(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_secondazimuth() const;
  void _internal_add_secondazimuth(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_secondazimuth();
  public:
  float secondazimuth(int index) const;
  void set_secondazimuth(int index, float value);
  void add_secondazimuth(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      secondazimuth() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_secondazimuth();

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapLogData3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > z_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > intensity_;
  mutable std::atomic<int> _intensity_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > timeoffset_;
  mutable std::atomic<int> _timeoffset_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ring_;
  mutable std::atomic<int> _ring_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > firstazimuth_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > secondazimuth_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapLog) */ {
 public:
  inline Message_MapLog() : Message_MapLog(nullptr) {}
  ~Message_MapLog() override;
  explicit PROTOBUF_CONSTEXPR Message_MapLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapLog(const Message_MapLog& from);
  Message_MapLog(Message_MapLog&& from) noexcept
    : Message_MapLog() {
    *this = ::std::move(from);
  }

  inline Message_MapLog& operator=(const Message_MapLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapLog& operator=(Message_MapLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapLog* internal_default_instance() {
    return reinterpret_cast<const Message_MapLog*>(
               &_Message_MapLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_MapLog& a, Message_MapLog& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapLog& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapLog";
  }
  protected:
  explicit Message_MapLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogDataFieldNumber = 6,
    kOdometerFieldNumber = 9,
    kLogData3DFieldNumber = 10,
    kImuDataFieldNumber = 14,
    kGnssDataFieldNumber = 15,
    kAzimuthcorrectionFieldNumber = 18,
    kVerticalcorrectionFieldNumber = 19,
    kAllGnssDataFieldNumber = 20,
    kLaserNameFieldNumber = 7,
    kLaserPosXFieldNumber = 1,
    kLaserPosYFieldNumber = 2,
    kLaserPosZFieldNumber = 3,
    kLaserStepFieldNumber = 4,
    kLaserRangeMaxFieldNumber = 5,
    kLaserInstallHeightFieldNumber = 8,
    kLaserInstallYawFieldNumber = 11,
    kLaserInstallPitchFieldNumber = 12,
    kLaserInstallRollFieldNumber = 13,
    kLasertypeFieldNumber = 16,
    kFactorFieldNumber = 17,
  };
  // repeated .rbk.protocol.Message_MapLogData log_data = 6;
  int log_data_size() const;
  private:
  int _internal_log_data_size() const;
  public:
  void clear_log_data();
  ::rbk::protocol::Message_MapLogData* mutable_log_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData >*
      mutable_log_data();
  private:
  const ::rbk::protocol::Message_MapLogData& _internal_log_data(int index) const;
  ::rbk::protocol::Message_MapLogData* _internal_add_log_data();
  public:
  const ::rbk::protocol::Message_MapLogData& log_data(int index) const;
  ::rbk::protocol::Message_MapLogData* add_log_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData >&
      log_data() const;

  // repeated .rbk.protocol.Message_MapOdo odometer = 9;
  int odometer_size() const;
  private:
  int _internal_odometer_size() const;
  public:
  void clear_odometer();
  ::rbk::protocol::Message_MapOdo* mutable_odometer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapOdo >*
      mutable_odometer();
  private:
  const ::rbk::protocol::Message_MapOdo& _internal_odometer(int index) const;
  ::rbk::protocol::Message_MapOdo* _internal_add_odometer();
  public:
  const ::rbk::protocol::Message_MapOdo& odometer(int index) const;
  ::rbk::protocol::Message_MapOdo* add_odometer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapOdo >&
      odometer() const;

  // repeated .rbk.protocol.Message_MapLogData3D log_data3d = 10;
  int log_data3d_size() const;
  private:
  int _internal_log_data3d_size() const;
  public:
  void clear_log_data3d();
  ::rbk::protocol::Message_MapLogData3D* mutable_log_data3d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData3D >*
      mutable_log_data3d();
  private:
  const ::rbk::protocol::Message_MapLogData3D& _internal_log_data3d(int index) const;
  ::rbk::protocol::Message_MapLogData3D* _internal_add_log_data3d();
  public:
  const ::rbk::protocol::Message_MapLogData3D& log_data3d(int index) const;
  ::rbk::protocol::Message_MapLogData3D* add_log_data3d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData3D >&
      log_data3d() const;

  // repeated .rbk.protocol.Message_IMU imu_data = 14;
  int imu_data_size() const;
  private:
  int _internal_imu_data_size() const;
  public:
  void clear_imu_data();
  ::rbk::protocol::Message_IMU* mutable_imu_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_IMU >*
      mutable_imu_data();
  private:
  const ::rbk::protocol::Message_IMU& _internal_imu_data(int index) const;
  ::rbk::protocol::Message_IMU* _internal_add_imu_data();
  public:
  const ::rbk::protocol::Message_IMU& imu_data(int index) const;
  ::rbk::protocol::Message_IMU* add_imu_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_IMU >&
      imu_data() const;

  // repeated .rbk.protocol.Message_GNSS gnss_data = 15;
  int gnss_data_size() const;
  private:
  int _internal_gnss_data_size() const;
  public:
  void clear_gnss_data();
  ::rbk::protocol::Message_GNSS* mutable_gnss_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >*
      mutable_gnss_data();
  private:
  const ::rbk::protocol::Message_GNSS& _internal_gnss_data(int index) const;
  ::rbk::protocol::Message_GNSS* _internal_add_gnss_data();
  public:
  const ::rbk::protocol::Message_GNSS& gnss_data(int index) const;
  ::rbk::protocol::Message_GNSS* add_gnss_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >&
      gnss_data() const;

  // repeated float azimuthcorrection = 18;
  int azimuthcorrection_size() const;
  private:
  int _internal_azimuthcorrection_size() const;
  public:
  void clear_azimuthcorrection();
  private:
  float _internal_azimuthcorrection(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_azimuthcorrection() const;
  void _internal_add_azimuthcorrection(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_azimuthcorrection();
  public:
  float azimuthcorrection(int index) const;
  void set_azimuthcorrection(int index, float value);
  void add_azimuthcorrection(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      azimuthcorrection() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_azimuthcorrection();

  // repeated float verticalcorrection = 19;
  int verticalcorrection_size() const;
  private:
  int _internal_verticalcorrection_size() const;
  public:
  void clear_verticalcorrection();
  private:
  float _internal_verticalcorrection(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_verticalcorrection() const;
  void _internal_add_verticalcorrection(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_verticalcorrection();
  public:
  float verticalcorrection(int index) const;
  void set_verticalcorrection(int index, float value);
  void add_verticalcorrection(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      verticalcorrection() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_verticalcorrection();

  // repeated .rbk.protocol.Message_AllGNSS all_gnss_data = 20;
  int all_gnss_data_size() const;
  private:
  int _internal_all_gnss_data_size() const;
  public:
  void clear_all_gnss_data();
  ::rbk::protocol::Message_AllGNSS* mutable_all_gnss_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AllGNSS >*
      mutable_all_gnss_data();
  private:
  const ::rbk::protocol::Message_AllGNSS& _internal_all_gnss_data(int index) const;
  ::rbk::protocol::Message_AllGNSS* _internal_add_all_gnss_data();
  public:
  const ::rbk::protocol::Message_AllGNSS& all_gnss_data(int index) const;
  ::rbk::protocol::Message_AllGNSS* add_all_gnss_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AllGNSS >&
      all_gnss_data() const;

  // string laser_name = 7;
  void clear_laser_name();
  const std::string& laser_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_laser_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_laser_name();
  PROTOBUF_NODISCARD std::string* release_laser_name();
  void set_allocated_laser_name(std::string* laser_name);
  private:
  const std::string& _internal_laser_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_laser_name(const std::string& value);
  std::string* _internal_mutable_laser_name();
  public:

  // double laser_pos_x = 1;
  void clear_laser_pos_x();
  double laser_pos_x() const;
  void set_laser_pos_x(double value);
  private:
  double _internal_laser_pos_x() const;
  void _internal_set_laser_pos_x(double value);
  public:

  // double laser_pos_y = 2;
  void clear_laser_pos_y();
  double laser_pos_y() const;
  void set_laser_pos_y(double value);
  private:
  double _internal_laser_pos_y() const;
  void _internal_set_laser_pos_y(double value);
  public:

  // double laser_pos_z = 3;
  void clear_laser_pos_z();
  double laser_pos_z() const;
  void set_laser_pos_z(double value);
  private:
  double _internal_laser_pos_z() const;
  void _internal_set_laser_pos_z(double value);
  public:

  // double laser_step = 4;
  void clear_laser_step();
  double laser_step() const;
  void set_laser_step(double value);
  private:
  double _internal_laser_step() const;
  void _internal_set_laser_step(double value);
  public:

  // double laser_range_max = 5;
  void clear_laser_range_max();
  double laser_range_max() const;
  void set_laser_range_max(double value);
  private:
  double _internal_laser_range_max() const;
  void _internal_set_laser_range_max(double value);
  public:

  // double laser_install_height = 8;
  void clear_laser_install_height();
  double laser_install_height() const;
  void set_laser_install_height(double value);
  private:
  double _internal_laser_install_height() const;
  void _internal_set_laser_install_height(double value);
  public:

  // double laser_install_yaw = 11;
  void clear_laser_install_yaw();
  double laser_install_yaw() const;
  void set_laser_install_yaw(double value);
  private:
  double _internal_laser_install_yaw() const;
  void _internal_set_laser_install_yaw(double value);
  public:

  // double laser_install_pitch = 12;
  void clear_laser_install_pitch();
  double laser_install_pitch() const;
  void set_laser_install_pitch(double value);
  private:
  double _internal_laser_install_pitch() const;
  void _internal_set_laser_install_pitch(double value);
  public:

  // double laser_install_roll = 13;
  void clear_laser_install_roll();
  double laser_install_roll() const;
  void set_laser_install_roll(double value);
  private:
  double _internal_laser_install_roll() const;
  void _internal_set_laser_install_roll(double value);
  public:

  // uint32 lasertype = 16;
  void clear_lasertype();
  uint32_t lasertype() const;
  void set_lasertype(uint32_t value);
  private:
  uint32_t _internal_lasertype() const;
  void _internal_set_lasertype(uint32_t value);
  public:

  // float factor = 17;
  void clear_factor();
  float factor() const;
  void set_factor(float value);
  private:
  float _internal_factor() const;
  void _internal_set_factor(float value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData > log_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapOdo > odometer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData3D > log_data3d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_IMU > imu_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS > gnss_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > azimuthcorrection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > verticalcorrection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AllGNSS > all_gnss_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr laser_name_;
  double laser_pos_x_;
  double laser_pos_y_;
  double laser_pos_z_;
  double laser_step_;
  double laser_range_max_;
  double laser_install_height_;
  double laser_install_yaw_;
  double laser_install_pitch_;
  double laser_install_roll_;
  uint32_t lasertype_;
  float factor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapProperty) */ {
 public:
  inline Message_MapProperty() : Message_MapProperty(nullptr) {}
  ~Message_MapProperty() override;
  explicit PROTOBUF_CONSTEXPR Message_MapProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapProperty(const Message_MapProperty& from);
  Message_MapProperty(Message_MapProperty&& from) noexcept
    : Message_MapProperty() {
    *this = ::std::move(from);
  }

  inline Message_MapProperty& operator=(const Message_MapProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapProperty& operator=(Message_MapProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapProperty& default_instance() {
    return *internal_default_instance();
  }
  enum OneofValueCase {
    kStringValue = 4,
    kBoolValue = 5,
    kInt32Value = 6,
    kUint32Value = 7,
    kInt64Value = 8,
    kUint64Value = 9,
    kFloatValue = 10,
    kDoubleValue = 11,
    kBytesValue = 12,
    ONEOF_VALUE_NOT_SET = 0,
  };

  static inline const Message_MapProperty* internal_default_instance() {
    return reinterpret_cast<const Message_MapProperty*>(
               &_Message_MapProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message_MapProperty& a, Message_MapProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapProperty& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapProperty";
  }
  protected:
  explicit Message_MapProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
    kTagFieldNumber = 13,
    kStringValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kInt32ValueFieldNumber = 6,
    kUint32ValueFieldNumber = 7,
    kInt64ValueFieldNumber = 8,
    kUint64ValueFieldNumber = 9,
    kFloatValueFieldNumber = 10,
    kDoubleValueFieldNumber = 11,
    kBytesValueFieldNumber = 12,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string tag = 13;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 5;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int32 int32_value = 6;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  int32_t int32_value() const;
  void set_int32_value(int32_t value);
  private:
  int32_t _internal_int32_value() const;
  void _internal_set_int32_value(int32_t value);
  public:

  // uint32 uint32_value = 7;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  uint32_t uint32_value() const;
  void set_uint32_value(uint32_t value);
  private:
  uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(uint32_t value);
  public:

  // int64 int64_value = 8;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // uint64 uint64_value = 9;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // float float_value = 10;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // double double_value = 11;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // bytes bytes_value = 12;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_oneof_value();
  OneofValueCase oneof_value_case() const;
  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapProperty)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_int32_value();
  void set_has_uint32_value();
  void set_has_int64_value();
  void set_has_uint64_value();
  void set_has_float_value();
  void set_has_double_value();
  void set_has_bytes_value();

  inline bool has_oneof_value() const;
  inline void clear_has_oneof_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  union OneofValueUnion {
    constexpr OneofValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    int32_t int32_value_;
    uint32_t uint32_value_;
    int64_t int64_value_;
    uint64_t uint64_value_;
    float float_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  } oneof_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapPos) */ {
 public:
  inline Message_MapPos() : Message_MapPos(nullptr) {}
  ~Message_MapPos() override;
  explicit PROTOBUF_CONSTEXPR Message_MapPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapPos(const Message_MapPos& from);
  Message_MapPos(Message_MapPos&& from) noexcept
    : Message_MapPos() {
    *this = ::std::move(from);
  }

  inline Message_MapPos& operator=(const Message_MapPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapPos& operator=(Message_MapPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapPos* internal_default_instance() {
    return reinterpret_cast<const Message_MapPos*>(
               &_Message_MapPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message_MapPos& a, Message_MapPos& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapPos";
  }
  protected:
  explicit Message_MapPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapRSSIPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapRSSIPos) */ {
 public:
  inline Message_MapRSSIPos() : Message_MapRSSIPos(nullptr) {}
  ~Message_MapRSSIPos() override;
  explicit PROTOBUF_CONSTEXPR Message_MapRSSIPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapRSSIPos(const Message_MapRSSIPos& from);
  Message_MapRSSIPos(Message_MapRSSIPos&& from) noexcept
    : Message_MapRSSIPos() {
    *this = ::std::move(from);
  }

  inline Message_MapRSSIPos& operator=(const Message_MapRSSIPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapRSSIPos& operator=(Message_MapRSSIPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapRSSIPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapRSSIPos* internal_default_instance() {
    return reinterpret_cast<const Message_MapRSSIPos*>(
               &_Message_MapRSSIPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message_MapRSSIPos& a, Message_MapRSSIPos& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapRSSIPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapRSSIPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapRSSIPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapRSSIPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapRSSIPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapRSSIPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapRSSIPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapRSSIPos";
  }
  protected:
  explicit Message_MapRSSIPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapRSSIPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_ReflectorPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_ReflectorPos) */ {
 public:
  inline Message_ReflectorPos() : Message_ReflectorPos(nullptr) {}
  ~Message_ReflectorPos() override;
  explicit PROTOBUF_CONSTEXPR Message_ReflectorPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_ReflectorPos(const Message_ReflectorPos& from);
  Message_ReflectorPos(Message_ReflectorPos&& from) noexcept
    : Message_ReflectorPos() {
    *this = ::std::move(from);
  }

  inline Message_ReflectorPos& operator=(const Message_ReflectorPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_ReflectorPos& operator=(Message_ReflectorPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_ReflectorPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_ReflectorPos* internal_default_instance() {
    return reinterpret_cast<const Message_ReflectorPos*>(
               &_Message_ReflectorPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Message_ReflectorPos& a, Message_ReflectorPos& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_ReflectorPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_ReflectorPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_ReflectorPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_ReflectorPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_ReflectorPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_ReflectorPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_ReflectorPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_ReflectorPos";
  }
  protected:
  explicit Message_ReflectorPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // double width = 2;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_ReflectorPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  double width_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_LiveRefPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_LiveRefPos) */ {
 public:
  inline Message_LiveRefPos() : Message_LiveRefPos(nullptr) {}
  ~Message_LiveRefPos() override;
  explicit PROTOBUF_CONSTEXPR Message_LiveRefPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_LiveRefPos(const Message_LiveRefPos& from);
  Message_LiveRefPos(Message_LiveRefPos&& from) noexcept
    : Message_LiveRefPos() {
    *this = ::std::move(from);
  }

  inline Message_LiveRefPos& operator=(const Message_LiveRefPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_LiveRefPos& operator=(Message_LiveRefPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_LiveRefPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_LiveRefPos* internal_default_instance() {
    return reinterpret_cast<const Message_LiveRefPos*>(
               &_Message_LiveRefPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Message_LiveRefPos& a, Message_LiveRefPos& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_LiveRefPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_LiveRefPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_LiveRefPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_LiveRefPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_LiveRefPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_LiveRefPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_LiveRefPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_LiveRefPos";
  }
  protected:
  explicit Message_LiveRefPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefPosFieldNumber = 1,
  };
  // repeated .rbk.protocol.Message_ReflectorPos ref_pos = 1;
  int ref_pos_size() const;
  private:
  int _internal_ref_pos_size() const;
  public:
  void clear_ref_pos();
  ::rbk::protocol::Message_ReflectorPos* mutable_ref_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >*
      mutable_ref_pos();
  private:
  const ::rbk::protocol::Message_ReflectorPos& _internal_ref_pos(int index) const;
  ::rbk::protocol::Message_ReflectorPos* _internal_add_ref_pos();
  public:
  const ::rbk::protocol::Message_ReflectorPos& ref_pos(int index) const;
  ::rbk::protocol::Message_ReflectorPos* add_ref_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >&
      ref_pos() const;

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LiveRefPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos > ref_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_tagPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_tagPos) */ {
 public:
  inline Message_tagPos() : Message_tagPos(nullptr) {}
  ~Message_tagPos() override;
  explicit PROTOBUF_CONSTEXPR Message_tagPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_tagPos(const Message_tagPos& from);
  Message_tagPos(Message_tagPos&& from) noexcept
    : Message_tagPos() {
    *this = ::std::move(from);
  }

  inline Message_tagPos& operator=(const Message_tagPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_tagPos& operator=(Message_tagPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_tagPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_tagPos* internal_default_instance() {
    return reinterpret_cast<const Message_tagPos*>(
               &_Message_tagPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message_tagPos& a, Message_tagPos& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_tagPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_tagPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_tagPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_tagPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_tagPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_tagPos& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_tagPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_tagPos";
  }
  protected:
  explicit Message_tagPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kTagValueFieldNumber = 1,
    kIsDMTDetectedFieldNumber = 5,
    kAngleFieldNumber = 4,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // uint32 tag_value = 1;
  void clear_tag_value();
  uint32_t tag_value() const;
  void set_tag_value(uint32_t value);
  private:
  uint32_t _internal_tag_value() const;
  void _internal_set_tag_value(uint32_t value);
  public:

  // bool is_DMT_detected = 5;
  void clear_is_dmt_detected();
  bool is_dmt_detected() const;
  void set_is_dmt_detected(bool value);
  private:
  bool _internal_is_dmt_detected() const;
  void _internal_set_is_dmt_detected(bool value);
  public:

  // double angle = 4;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_tagPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  uint32_t tag_value_;
  bool is_dmt_detected_;
  double angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapLine) */ {
 public:
  inline Message_MapLine() : Message_MapLine(nullptr) {}
  ~Message_MapLine() override;
  explicit PROTOBUF_CONSTEXPR Message_MapLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapLine(const Message_MapLine& from);
  Message_MapLine(Message_MapLine&& from) noexcept
    : Message_MapLine() {
    *this = ::std::move(from);
  }

  inline Message_MapLine& operator=(const Message_MapLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapLine& operator=(Message_MapLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapLine* internal_default_instance() {
    return reinterpret_cast<const Message_MapLine*>(
               &_Message_MapLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message_MapLine& a, Message_MapLine& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapLine& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapLine";
  }
  protected:
  explicit Message_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPosFieldNumber = 1,
    kEndPosFieldNumber = 2,
  };
  // .rbk.protocol.Message_MapPos start_pos = 1;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::rbk::protocol::Message_MapPos& start_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_start_pos();
  ::rbk::protocol::Message_MapPos* mutable_start_pos();
  void set_allocated_start_pos(::rbk::protocol::Message_MapPos* start_pos);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_start_pos() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::rbk::protocol::Message_MapPos* start_pos);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_start_pos();

  // .rbk.protocol.Message_MapPos end_pos = 2;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::rbk::protocol::Message_MapPos& end_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_end_pos();
  ::rbk::protocol::Message_MapPos* mutable_end_pos();
  void set_allocated_end_pos(::rbk::protocol::Message_MapPos* end_pos);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_end_pos() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_end_pos();
  public:
  void unsafe_arena_set_allocated_end_pos(
      ::rbk::protocol::Message_MapPos* end_pos);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_end_pos();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rbk::protocol::Message_MapPos* start_pos_;
  ::rbk::protocol::Message_MapPos* end_pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapHeader) */ {
 public:
  inline Message_MapHeader() : Message_MapHeader(nullptr) {}
  ~Message_MapHeader() override;
  explicit PROTOBUF_CONSTEXPR Message_MapHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapHeader(const Message_MapHeader& from);
  Message_MapHeader(Message_MapHeader&& from) noexcept
    : Message_MapHeader() {
    *this = ::std::move(from);
  }

  inline Message_MapHeader& operator=(const Message_MapHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapHeader& operator=(Message_MapHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapHeader* internal_default_instance() {
    return reinterpret_cast<const Message_MapHeader*>(
               &_Message_MapHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Message_MapHeader& a, Message_MapHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapHeader";
  }
  protected:
  explicit Message_MapHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapTypeFieldNumber = 1,
    kMapNameFieldNumber = 2,
    kVersionFieldNumber = 8,
    kMinPosFieldNumber = 3,
    kMaxPosFieldNumber = 4,
    kResolutionFieldNumber = 5,
  };
  // string map_type = 1;
  void clear_map_type();
  const std::string& map_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_type();
  PROTOBUF_NODISCARD std::string* release_map_type();
  void set_allocated_map_type(std::string* map_type);
  private:
  const std::string& _internal_map_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_type(const std::string& value);
  std::string* _internal_mutable_map_type();
  public:

  // string map_name = 2;
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // string version = 8;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .rbk.protocol.Message_MapPos min_pos = 3;
  bool has_min_pos() const;
  private:
  bool _internal_has_min_pos() const;
  public:
  void clear_min_pos();
  const ::rbk::protocol::Message_MapPos& min_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_min_pos();
  ::rbk::protocol::Message_MapPos* mutable_min_pos();
  void set_allocated_min_pos(::rbk::protocol::Message_MapPos* min_pos);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_min_pos() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_min_pos();
  public:
  void unsafe_arena_set_allocated_min_pos(
      ::rbk::protocol::Message_MapPos* min_pos);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_min_pos();

  // .rbk.protocol.Message_MapPos max_pos = 4;
  bool has_max_pos() const;
  private:
  bool _internal_has_max_pos() const;
  public:
  void clear_max_pos();
  const ::rbk::protocol::Message_MapPos& max_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_max_pos();
  ::rbk::protocol::Message_MapPos* mutable_max_pos();
  void set_allocated_max_pos(::rbk::protocol::Message_MapPos* max_pos);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_max_pos() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_max_pos();
  public:
  void unsafe_arena_set_allocated_max_pos(
      ::rbk::protocol::Message_MapPos* max_pos);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_max_pos();

  // double resolution = 5;
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::rbk::protocol::Message_MapPos* min_pos_;
  ::rbk::protocol::Message_MapPos* max_pos_;
  double resolution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_MapAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_MapAttribute) */ {
 public:
  inline Message_MapAttribute() : Message_MapAttribute(nullptr) {}
  ~Message_MapAttribute() override;
  explicit PROTOBUF_CONSTEXPR Message_MapAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_MapAttribute(const Message_MapAttribute& from);
  Message_MapAttribute(Message_MapAttribute&& from) noexcept
    : Message_MapAttribute() {
    *this = ::std::move(from);
  }

  inline Message_MapAttribute& operator=(const Message_MapAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MapAttribute& operator=(Message_MapAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_MapAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_MapAttribute* internal_default_instance() {
    return reinterpret_cast<const Message_MapAttribute*>(
               &_Message_MapAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Message_MapAttribute& a, Message_MapAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MapAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MapAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_MapAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_MapAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_MapAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_MapAttribute& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MapAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_MapAttribute";
  }
  protected:
  explicit Message_MapAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 1,
    kColorPenFieldNumber = 2,
    kColorBrushFieldNumber = 3,
    kColorFontFieldNumber = 4,
  };
  // string description = 1;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 color_pen = 2;
  void clear_color_pen();
  uint32_t color_pen() const;
  void set_color_pen(uint32_t value);
  private:
  uint32_t _internal_color_pen() const;
  void _internal_set_color_pen(uint32_t value);
  public:

  // uint32 color_brush = 3;
  void clear_color_brush();
  uint32_t color_brush() const;
  void set_color_brush(uint32_t value);
  private:
  uint32_t _internal_color_brush() const;
  void _internal_set_color_brush(uint32_t value);
  public:

  // uint32 color_font = 4;
  void clear_color_font();
  uint32_t color_font() const;
  void set_color_font(uint32_t value);
  private:
  uint32_t _internal_color_font() const;
  void _internal_set_color_font(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_MapAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  uint32_t color_pen_;
  uint32_t color_brush_;
  uint32_t color_font_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_AdvancedPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_AdvancedPoint) */ {
 public:
  inline Message_AdvancedPoint() : Message_AdvancedPoint(nullptr) {}
  ~Message_AdvancedPoint() override;
  explicit PROTOBUF_CONSTEXPR Message_AdvancedPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_AdvancedPoint(const Message_AdvancedPoint& from);
  Message_AdvancedPoint(Message_AdvancedPoint&& from) noexcept
    : Message_AdvancedPoint() {
    *this = ::std::move(from);
  }

  inline Message_AdvancedPoint& operator=(const Message_AdvancedPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AdvancedPoint& operator=(Message_AdvancedPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_AdvancedPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_AdvancedPoint* internal_default_instance() {
    return reinterpret_cast<const Message_AdvancedPoint*>(
               &_Message_AdvancedPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Message_AdvancedPoint& a, Message_AdvancedPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AdvancedPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AdvancedPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_AdvancedPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_AdvancedPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_AdvancedPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_AdvancedPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AdvancedPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_AdvancedPoint";
  }
  protected:
  explicit Message_AdvancedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 5,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kDescFieldNumber = 8,
    kPosFieldNumber = 3,
    kAttributeFieldNumber = 10,
    kDirFieldNumber = 4,
    kIgnoreDirFieldNumber = 6,
  };
  // repeated .rbk.protocol.Message_MapProperty property = 5;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // bytes desc = 8;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_MapPos pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::rbk::protocol::Message_MapPos& pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_pos();
  ::rbk::protocol::Message_MapPos* mutable_pos();
  void set_allocated_pos(::rbk::protocol::Message_MapPos* pos);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_pos() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::rbk::protocol::Message_MapPos* pos);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_pos();

  // .rbk.protocol.Message_MapAttribute attribute = 10;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // double dir = 4;
  void clear_dir();
  double dir() const;
  void set_dir(double value);
  private:
  double _internal_dir() const;
  void _internal_set_dir(double value);
  public:

  // bool ignore_dir = 6;
  void clear_ignore_dir();
  bool ignore_dir() const;
  void set_ignore_dir(bool value);
  private:
  bool _internal_ignore_dir() const;
  void _internal_set_ignore_dir(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AdvancedPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_MapPos* pos_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  double dir_;
  bool ignore_dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_AdvancedLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_AdvancedLine) */ {
 public:
  inline Message_AdvancedLine() : Message_AdvancedLine(nullptr) {}
  ~Message_AdvancedLine() override;
  explicit PROTOBUF_CONSTEXPR Message_AdvancedLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_AdvancedLine(const Message_AdvancedLine& from);
  Message_AdvancedLine(Message_AdvancedLine&& from) noexcept
    : Message_AdvancedLine() {
    *this = ::std::move(from);
  }

  inline Message_AdvancedLine& operator=(const Message_AdvancedLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AdvancedLine& operator=(Message_AdvancedLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_AdvancedLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_AdvancedLine* internal_default_instance() {
    return reinterpret_cast<const Message_AdvancedLine*>(
               &_Message_AdvancedLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Message_AdvancedLine& a, Message_AdvancedLine& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AdvancedLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AdvancedLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_AdvancedLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_AdvancedLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_AdvancedLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_AdvancedLine& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AdvancedLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_AdvancedLine";
  }
  protected:
  explicit Message_AdvancedLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 4,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kDescFieldNumber = 8,
    kLineFieldNumber = 3,
    kAttributeFieldNumber = 10,
  };
  // repeated .rbk.protocol.Message_MapProperty property = 4;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // bytes desc = 8;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_MapLine line = 3;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const ::rbk::protocol::Message_MapLine& line() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapLine* release_line();
  ::rbk::protocol::Message_MapLine* mutable_line();
  void set_allocated_line(::rbk::protocol::Message_MapLine* line);
  private:
  const ::rbk::protocol::Message_MapLine& _internal_line() const;
  ::rbk::protocol::Message_MapLine* _internal_mutable_line();
  public:
  void unsafe_arena_set_allocated_line(
      ::rbk::protocol::Message_MapLine* line);
  ::rbk::protocol::Message_MapLine* unsafe_arena_release_line();

  // .rbk.protocol.Message_MapAttribute attribute = 10;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AdvancedLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_MapLine* line_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_AdvancedCurve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_AdvancedCurve) */ {
 public:
  inline Message_AdvancedCurve() : Message_AdvancedCurve(nullptr) {}
  ~Message_AdvancedCurve() override;
  explicit PROTOBUF_CONSTEXPR Message_AdvancedCurve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_AdvancedCurve(const Message_AdvancedCurve& from);
  Message_AdvancedCurve(Message_AdvancedCurve&& from) noexcept
    : Message_AdvancedCurve() {
    *this = ::std::move(from);
  }

  inline Message_AdvancedCurve& operator=(const Message_AdvancedCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AdvancedCurve& operator=(Message_AdvancedCurve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_AdvancedCurve& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_AdvancedCurve* internal_default_instance() {
    return reinterpret_cast<const Message_AdvancedCurve*>(
               &_Message_AdvancedCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Message_AdvancedCurve& a, Message_AdvancedCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AdvancedCurve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AdvancedCurve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_AdvancedCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_AdvancedCurve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_AdvancedCurve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_AdvancedCurve& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AdvancedCurve* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_AdvancedCurve";
  }
  protected:
  explicit Message_AdvancedCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 7,
    kDevicesFieldNumber = 12,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kDescFieldNumber = 8,
    kStartPosFieldNumber = 3,
    kEndPosFieldNumber = 4,
    kControlPos1FieldNumber = 5,
    kControlPos2FieldNumber = 6,
    kControlPos3FieldNumber = 9,
    kControlPos4FieldNumber = 10,
    kAttributeFieldNumber = 15,
  };
  // repeated .rbk.protocol.Message_MapProperty property = 7;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // repeated .rbk.protocol.Message_Device devices = 12;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::rbk::protocol::Message_Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >*
      mutable_devices();
  private:
  const ::rbk::protocol::Message_Device& _internal_devices(int index) const;
  ::rbk::protocol::Message_Device* _internal_add_devices();
  public:
  const ::rbk::protocol::Message_Device& devices(int index) const;
  ::rbk::protocol::Message_Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >&
      devices() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // bytes desc = 8;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::rbk::protocol::Message_AdvancedPoint& start_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_AdvancedPoint* release_start_pos();
  ::rbk::protocol::Message_AdvancedPoint* mutable_start_pos();
  void set_allocated_start_pos(::rbk::protocol::Message_AdvancedPoint* start_pos);
  private:
  const ::rbk::protocol::Message_AdvancedPoint& _internal_start_pos() const;
  ::rbk::protocol::Message_AdvancedPoint* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::rbk::protocol::Message_AdvancedPoint* start_pos);
  ::rbk::protocol::Message_AdvancedPoint* unsafe_arena_release_start_pos();

  // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::rbk::protocol::Message_AdvancedPoint& end_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_AdvancedPoint* release_end_pos();
  ::rbk::protocol::Message_AdvancedPoint* mutable_end_pos();
  void set_allocated_end_pos(::rbk::protocol::Message_AdvancedPoint* end_pos);
  private:
  const ::rbk::protocol::Message_AdvancedPoint& _internal_end_pos() const;
  ::rbk::protocol::Message_AdvancedPoint* _internal_mutable_end_pos();
  public:
  void unsafe_arena_set_allocated_end_pos(
      ::rbk::protocol::Message_AdvancedPoint* end_pos);
  ::rbk::protocol::Message_AdvancedPoint* unsafe_arena_release_end_pos();

  // .rbk.protocol.Message_MapPos control_pos1 = 5;
  bool has_control_pos1() const;
  private:
  bool _internal_has_control_pos1() const;
  public:
  void clear_control_pos1();
  const ::rbk::protocol::Message_MapPos& control_pos1() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_control_pos1();
  ::rbk::protocol::Message_MapPos* mutable_control_pos1();
  void set_allocated_control_pos1(::rbk::protocol::Message_MapPos* control_pos1);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_control_pos1() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_control_pos1();
  public:
  void unsafe_arena_set_allocated_control_pos1(
      ::rbk::protocol::Message_MapPos* control_pos1);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_control_pos1();

  // .rbk.protocol.Message_MapPos control_pos2 = 6;
  bool has_control_pos2() const;
  private:
  bool _internal_has_control_pos2() const;
  public:
  void clear_control_pos2();
  const ::rbk::protocol::Message_MapPos& control_pos2() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_control_pos2();
  ::rbk::protocol::Message_MapPos* mutable_control_pos2();
  void set_allocated_control_pos2(::rbk::protocol::Message_MapPos* control_pos2);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_control_pos2() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_control_pos2();
  public:
  void unsafe_arena_set_allocated_control_pos2(
      ::rbk::protocol::Message_MapPos* control_pos2);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_control_pos2();

  // .rbk.protocol.Message_MapPos control_pos3 = 9;
  bool has_control_pos3() const;
  private:
  bool _internal_has_control_pos3() const;
  public:
  void clear_control_pos3();
  const ::rbk::protocol::Message_MapPos& control_pos3() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_control_pos3();
  ::rbk::protocol::Message_MapPos* mutable_control_pos3();
  void set_allocated_control_pos3(::rbk::protocol::Message_MapPos* control_pos3);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_control_pos3() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_control_pos3();
  public:
  void unsafe_arena_set_allocated_control_pos3(
      ::rbk::protocol::Message_MapPos* control_pos3);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_control_pos3();

  // .rbk.protocol.Message_MapPos control_pos4 = 10;
  bool has_control_pos4() const;
  private:
  bool _internal_has_control_pos4() const;
  public:
  void clear_control_pos4();
  const ::rbk::protocol::Message_MapPos& control_pos4() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_control_pos4();
  ::rbk::protocol::Message_MapPos* mutable_control_pos4();
  void set_allocated_control_pos4(::rbk::protocol::Message_MapPos* control_pos4);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_control_pos4() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_control_pos4();
  public:
  void unsafe_arena_set_allocated_control_pos4(
      ::rbk::protocol::Message_MapPos* control_pos4);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_control_pos4();

  // .rbk.protocol.Message_MapAttribute attribute = 15;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AdvancedCurve)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_AdvancedPoint* start_pos_;
  ::rbk::protocol::Message_AdvancedPoint* end_pos_;
  ::rbk::protocol::Message_MapPos* control_pos1_;
  ::rbk::protocol::Message_MapPos* control_pos2_;
  ::rbk::protocol::Message_MapPos* control_pos3_;
  ::rbk::protocol::Message_MapPos* control_pos4_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_AdvancedArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_AdvancedArea) */ {
 public:
  inline Message_AdvancedArea() : Message_AdvancedArea(nullptr) {}
  ~Message_AdvancedArea() override;
  explicit PROTOBUF_CONSTEXPR Message_AdvancedArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_AdvancedArea(const Message_AdvancedArea& from);
  Message_AdvancedArea(Message_AdvancedArea&& from) noexcept
    : Message_AdvancedArea() {
    *this = ::std::move(from);
  }

  inline Message_AdvancedArea& operator=(const Message_AdvancedArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AdvancedArea& operator=(Message_AdvancedArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_AdvancedArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_AdvancedArea* internal_default_instance() {
    return reinterpret_cast<const Message_AdvancedArea*>(
               &_Message_AdvancedArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Message_AdvancedArea& a, Message_AdvancedArea& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AdvancedArea* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AdvancedArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_AdvancedArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_AdvancedArea>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_AdvancedArea& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_AdvancedArea& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AdvancedArea* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_AdvancedArea";
  }
  protected:
  explicit Message_AdvancedArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosGroupFieldNumber = 3,
    kPropertyFieldNumber = 5,
    kDevicesFieldNumber = 10,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kDescFieldNumber = 8,
    kAttributeFieldNumber = 15,
    kDirFieldNumber = 4,
  };
  // repeated .rbk.protocol.Message_MapPos pos_group = 3;
  int pos_group_size() const;
  private:
  int _internal_pos_group_size() const;
  public:
  void clear_pos_group();
  ::rbk::protocol::Message_MapPos* mutable_pos_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
      mutable_pos_group();
  private:
  const ::rbk::protocol::Message_MapPos& _internal_pos_group(int index) const;
  ::rbk::protocol::Message_MapPos* _internal_add_pos_group();
  public:
  const ::rbk::protocol::Message_MapPos& pos_group(int index) const;
  ::rbk::protocol::Message_MapPos* add_pos_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
      pos_group() const;

  // repeated .rbk.protocol.Message_MapProperty property = 5;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // repeated .rbk.protocol.Message_Device devices = 10;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  ::rbk::protocol::Message_Device* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >*
      mutable_devices();
  private:
  const ::rbk::protocol::Message_Device& _internal_devices(int index) const;
  ::rbk::protocol::Message_Device* _internal_add_devices();
  public:
  const ::rbk::protocol::Message_Device& devices(int index) const;
  ::rbk::protocol::Message_Device* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >&
      devices() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // bytes desc = 8;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_MapAttribute attribute = 15;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // double dir = 4;
  void clear_dir();
  double dir() const;
  void set_dir(double value);
  private:
  double _internal_dir() const;
  void _internal_set_dir(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AdvancedArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos > pos_group_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device > devices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  double dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_VirtualLineList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_VirtualLineList) */ {
 public:
  inline Message_VirtualLineList() : Message_VirtualLineList(nullptr) {}
  ~Message_VirtualLineList() override;
  explicit PROTOBUF_CONSTEXPR Message_VirtualLineList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_VirtualLineList(const Message_VirtualLineList& from);
  Message_VirtualLineList(Message_VirtualLineList&& from) noexcept
    : Message_VirtualLineList() {
    *this = ::std::move(from);
  }

  inline Message_VirtualLineList& operator=(const Message_VirtualLineList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_VirtualLineList& operator=(Message_VirtualLineList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_VirtualLineList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_VirtualLineList* internal_default_instance() {
    return reinterpret_cast<const Message_VirtualLineList*>(
               &_Message_VirtualLineList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Message_VirtualLineList& a, Message_VirtualLineList& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_VirtualLineList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_VirtualLineList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_VirtualLineList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_VirtualLineList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_VirtualLineList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_VirtualLineList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_VirtualLineList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_VirtualLineList";
  }
  protected:
  explicit Message_VirtualLineList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualMapLineFieldNumber = 1,
  };
  // repeated .rbk.protocol.Message_MapLine virtual_map_line = 1;
  int virtual_map_line_size() const;
  private:
  int _internal_virtual_map_line_size() const;
  public:
  void clear_virtual_map_line();
  ::rbk::protocol::Message_MapLine* mutable_virtual_map_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >*
      mutable_virtual_map_line();
  private:
  const ::rbk::protocol::Message_MapLine& _internal_virtual_map_line(int index) const;
  ::rbk::protocol::Message_MapLine* _internal_add_virtual_map_line();
  public:
  const ::rbk::protocol::Message_MapLine& virtual_map_line(int index) const;
  ::rbk::protocol::Message_MapLine* add_virtual_map_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >&
      virtual_map_line() const;

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_VirtualLineList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine > virtual_map_line_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_LaserDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_LaserDevice) */ {
 public:
  inline Message_LaserDevice() : Message_LaserDevice(nullptr) {}
  ~Message_LaserDevice() override;
  explicit PROTOBUF_CONSTEXPR Message_LaserDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_LaserDevice(const Message_LaserDevice& from);
  Message_LaserDevice(Message_LaserDevice&& from) noexcept
    : Message_LaserDevice() {
    *this = ::std::move(from);
  }

  inline Message_LaserDevice& operator=(const Message_LaserDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_LaserDevice& operator=(Message_LaserDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_LaserDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_LaserDevice* internal_default_instance() {
    return reinterpret_cast<const Message_LaserDevice*>(
               &_Message_LaserDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Message_LaserDevice& a, Message_LaserDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_LaserDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_LaserDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_LaserDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_LaserDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_LaserDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_LaserDevice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_LaserDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_LaserDevice";
  }
  protected:
  explicit Message_LaserDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaserMarginPosFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .rbk.protocol.Message_MapPos laser_margin_pos = 2;
  int laser_margin_pos_size() const;
  private:
  int _internal_laser_margin_pos_size() const;
  public:
  void clear_laser_margin_pos();
  ::rbk::protocol::Message_MapPos* mutable_laser_margin_pos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
      mutable_laser_margin_pos();
  private:
  const ::rbk::protocol::Message_MapPos& _internal_laser_margin_pos(int index) const;
  ::rbk::protocol::Message_MapPos* _internal_add_laser_margin_pos();
  public:
  const ::rbk::protocol::Message_MapPos& laser_margin_pos(int index) const;
  ::rbk::protocol::Message_MapPos* add_laser_margin_pos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
      laser_margin_pos() const;

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_LaserDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos > laser_margin_pos_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_Device) */ {
 public:
  inline Message_Device() : Message_Device(nullptr) {}
  ~Message_Device() override;
  explicit PROTOBUF_CONSTEXPR Message_Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Device(const Message_Device& from);
  Message_Device(Message_Device&& from) noexcept
    : Message_Device() {
    *this = ::std::move(from);
  }

  inline Message_Device& operator=(const Message_Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Device& operator=(Message_Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Device* internal_default_instance() {
    return reinterpret_cast<const Message_Device*>(
               &_Message_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Message_Device& a, Message_Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_Device";
  }
  protected:
  explicit Message_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaserDevicesFieldNumber = 5,
    kUltrasonicDistFieldNumber = 6,
    kFallingdownDistFieldNumber = 7,
    kModelNameFieldNumber = 1,
  };
  // repeated .rbk.protocol.Message_LaserDevice laser_devices = 5;
  int laser_devices_size() const;
  private:
  int _internal_laser_devices_size() const;
  public:
  void clear_laser_devices();
  ::rbk::protocol::Message_LaserDevice* mutable_laser_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_LaserDevice >*
      mutable_laser_devices();
  private:
  const ::rbk::protocol::Message_LaserDevice& _internal_laser_devices(int index) const;
  ::rbk::protocol::Message_LaserDevice* _internal_add_laser_devices();
  public:
  const ::rbk::protocol::Message_LaserDevice& laser_devices(int index) const;
  ::rbk::protocol::Message_LaserDevice* add_laser_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_LaserDevice >&
      laser_devices() const;

  // repeated double ultrasonic_dist = 6;
  int ultrasonic_dist_size() const;
  private:
  int _internal_ultrasonic_dist_size() const;
  public:
  void clear_ultrasonic_dist();
  private:
  double _internal_ultrasonic_dist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ultrasonic_dist() const;
  void _internal_add_ultrasonic_dist(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ultrasonic_dist();
  public:
  double ultrasonic_dist(int index) const;
  void set_ultrasonic_dist(int index, double value);
  void add_ultrasonic_dist(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ultrasonic_dist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ultrasonic_dist();

  // repeated double fallingdown_dist = 7;
  int fallingdown_dist_size() const;
  private:
  int _internal_fallingdown_dist_size() const;
  public:
  void clear_fallingdown_dist();
  private:
  double _internal_fallingdown_dist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_fallingdown_dist() const;
  void _internal_add_fallingdown_dist(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_fallingdown_dist();
  public:
  double fallingdown_dist(int index) const;
  void set_fallingdown_dist(int index, double value);
  void add_fallingdown_dist(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      fallingdown_dist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_fallingdown_dist();

  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_LaserDevice > laser_devices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ultrasonic_dist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > fallingdown_dist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_PatrolRouteStation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_PatrolRouteStation) */ {
 public:
  inline Message_PatrolRouteStation() : Message_PatrolRouteStation(nullptr) {}
  ~Message_PatrolRouteStation() override;
  explicit PROTOBUF_CONSTEXPR Message_PatrolRouteStation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_PatrolRouteStation(const Message_PatrolRouteStation& from);
  Message_PatrolRouteStation(Message_PatrolRouteStation&& from) noexcept
    : Message_PatrolRouteStation() {
    *this = ::std::move(from);
  }

  inline Message_PatrolRouteStation& operator=(const Message_PatrolRouteStation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_PatrolRouteStation& operator=(Message_PatrolRouteStation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_PatrolRouteStation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_PatrolRouteStation* internal_default_instance() {
    return reinterpret_cast<const Message_PatrolRouteStation*>(
               &_Message_PatrolRouteStation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Message_PatrolRouteStation& a, Message_PatrolRouteStation& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_PatrolRouteStation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_PatrolRouteStation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_PatrolRouteStation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_PatrolRouteStation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_PatrolRouteStation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_PatrolRouteStation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_PatrolRouteStation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_PatrolRouteStation";
  }
  protected:
  explicit Message_PatrolRouteStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_PatrolRouteStation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_PatrolRoute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_PatrolRoute) */ {
 public:
  inline Message_PatrolRoute() : Message_PatrolRoute(nullptr) {}
  ~Message_PatrolRoute() override;
  explicit PROTOBUF_CONSTEXPR Message_PatrolRoute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_PatrolRoute(const Message_PatrolRoute& from);
  Message_PatrolRoute(Message_PatrolRoute&& from) noexcept
    : Message_PatrolRoute() {
    *this = ::std::move(from);
  }

  inline Message_PatrolRoute& operator=(const Message_PatrolRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_PatrolRoute& operator=(Message_PatrolRoute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_PatrolRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_PatrolRoute* internal_default_instance() {
    return reinterpret_cast<const Message_PatrolRoute*>(
               &_Message_PatrolRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Message_PatrolRoute& a, Message_PatrolRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_PatrolRoute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_PatrolRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_PatrolRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_PatrolRoute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_PatrolRoute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_PatrolRoute& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_PatrolRoute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_PatrolRoute";
  }
  protected:
  explicit Message_PatrolRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationListFieldNumber = 2,
    kNameFieldNumber = 1,
    kDescFieldNumber = 8,
    kMaxSpeedFieldNumber = 4,
    kMaxAccFieldNumber = 5,
    kMaxRotFieldNumber = 6,
    kMaxRotAccFieldNumber = 7,
    kMaxDecFieldNumber = 9,
    kMaxRotDecFieldNumber = 10,
  };
  // repeated .rbk.protocol.Message_PatrolRouteStation station_list = 2;
  int station_list_size() const;
  private:
  int _internal_station_list_size() const;
  public:
  void clear_station_list();
  ::rbk::protocol::Message_PatrolRouteStation* mutable_station_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRouteStation >*
      mutable_station_list();
  private:
  const ::rbk::protocol::Message_PatrolRouteStation& _internal_station_list(int index) const;
  ::rbk::protocol::Message_PatrolRouteStation* _internal_add_station_list();
  public:
  const ::rbk::protocol::Message_PatrolRouteStation& station_list(int index) const;
  ::rbk::protocol::Message_PatrolRouteStation* add_station_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRouteStation >&
      station_list() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes desc = 8;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .google.protobuf.DoubleValue max_speed = 4;
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_speed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_speed();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_speed();
  void set_allocated_max_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_speed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_speed() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_speed();
  public:
  void unsafe_arena_set_allocated_max_speed(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_speed);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_speed();

  // .google.protobuf.DoubleValue max_acc = 5;
  bool has_max_acc() const;
  private:
  bool _internal_has_max_acc() const;
  public:
  void clear_max_acc();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_acc() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_acc();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_acc();
  void set_allocated_max_acc(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_acc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_acc() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_acc();
  public:
  void unsafe_arena_set_allocated_max_acc(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_acc);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_acc();

  // .google.protobuf.DoubleValue max_rot = 6;
  bool has_max_rot() const;
  private:
  bool _internal_has_max_rot() const;
  public:
  void clear_max_rot();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_rot();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_rot();
  void set_allocated_max_rot(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_rot() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_rot();
  public:
  void unsafe_arena_set_allocated_max_rot(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_rot();

  // .google.protobuf.DoubleValue max_rot_acc = 7;
  bool has_max_rot_acc() const;
  private:
  bool _internal_has_max_rot_acc() const;
  public:
  void clear_max_rot_acc();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot_acc() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_rot_acc();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_rot_acc();
  void set_allocated_max_rot_acc(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_acc);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_rot_acc() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_rot_acc();
  public:
  void unsafe_arena_set_allocated_max_rot_acc(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_acc);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_rot_acc();

  // .google.protobuf.DoubleValue max_dec = 9;
  bool has_max_dec() const;
  private:
  bool _internal_has_max_dec() const;
  public:
  void clear_max_dec();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_dec() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_dec();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_dec();
  void set_allocated_max_dec(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_dec);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_dec() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_dec();
  public:
  void unsafe_arena_set_allocated_max_dec(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_dec);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_dec();

  // .google.protobuf.DoubleValue max_rot_dec = 10;
  bool has_max_rot_dec() const;
  private:
  bool _internal_has_max_rot_dec() const;
  public:
  void clear_max_rot_dec();
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot_dec() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::DoubleValue* release_max_rot_dec();
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_max_rot_dec();
  void set_allocated_max_rot_dec(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_dec);
  private:
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_max_rot_dec() const;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_max_rot_dec();
  public:
  void unsafe_arena_set_allocated_max_rot_dec(
      ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_dec);
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_max_rot_dec();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_PatrolRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRouteStation > station_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_speed_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_acc_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_acc_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_dec_;
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_dec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_Primitive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_Primitive) */ {
 public:
  inline Message_Primitive() : Message_Primitive(nullptr) {}
  ~Message_Primitive() override;
  explicit PROTOBUF_CONSTEXPR Message_Primitive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Primitive(const Message_Primitive& from);
  Message_Primitive(Message_Primitive&& from) noexcept
    : Message_Primitive() {
    *this = ::std::move(from);
  }

  inline Message_Primitive& operator=(const Message_Primitive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Primitive& operator=(Message_Primitive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Primitive& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Primitive* internal_default_instance() {
    return reinterpret_cast<const Message_Primitive*>(
               &_Message_Primitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Message_Primitive& a, Message_Primitive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Primitive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Primitive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Primitive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Primitive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Primitive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Primitive& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Primitive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_Primitive";
  }
  protected:
  explicit Message_Primitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlPosListFieldNumber = 5,
    kPropertyFieldNumber = 6,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kDescFieldNumber = 7,
    kStartPosFieldNumber = 3,
    kEndPosFieldNumber = 4,
    kAttributeFieldNumber = 8,
  };
  // repeated .rbk.protocol.Message_MapPos control_pos_list = 5;
  int control_pos_list_size() const;
  private:
  int _internal_control_pos_list_size() const;
  public:
  void clear_control_pos_list();
  ::rbk::protocol::Message_MapPos* mutable_control_pos_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
      mutable_control_pos_list();
  private:
  const ::rbk::protocol::Message_MapPos& _internal_control_pos_list(int index) const;
  ::rbk::protocol::Message_MapPos* _internal_add_control_pos_list();
  public:
  const ::rbk::protocol::Message_MapPos& control_pos_list(int index) const;
  ::rbk::protocol::Message_MapPos* add_control_pos_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
      control_pos_list() const;

  // repeated .rbk.protocol.Message_MapProperty property = 6;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // bytes desc = 7;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
  bool has_start_pos() const;
  private:
  bool _internal_has_start_pos() const;
  public:
  void clear_start_pos();
  const ::rbk::protocol::Message_AdvancedPoint& start_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_AdvancedPoint* release_start_pos();
  ::rbk::protocol::Message_AdvancedPoint* mutable_start_pos();
  void set_allocated_start_pos(::rbk::protocol::Message_AdvancedPoint* start_pos);
  private:
  const ::rbk::protocol::Message_AdvancedPoint& _internal_start_pos() const;
  ::rbk::protocol::Message_AdvancedPoint* _internal_mutable_start_pos();
  public:
  void unsafe_arena_set_allocated_start_pos(
      ::rbk::protocol::Message_AdvancedPoint* start_pos);
  ::rbk::protocol::Message_AdvancedPoint* unsafe_arena_release_start_pos();

  // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
  bool has_end_pos() const;
  private:
  bool _internal_has_end_pos() const;
  public:
  void clear_end_pos();
  const ::rbk::protocol::Message_AdvancedPoint& end_pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_AdvancedPoint* release_end_pos();
  ::rbk::protocol::Message_AdvancedPoint* mutable_end_pos();
  void set_allocated_end_pos(::rbk::protocol::Message_AdvancedPoint* end_pos);
  private:
  const ::rbk::protocol::Message_AdvancedPoint& _internal_end_pos() const;
  ::rbk::protocol::Message_AdvancedPoint* _internal_mutable_end_pos();
  public:
  void unsafe_arena_set_allocated_end_pos(
      ::rbk::protocol::Message_AdvancedPoint* end_pos);
  ::rbk::protocol::Message_AdvancedPoint* unsafe_arena_release_end_pos();

  // .rbk.protocol.Message_MapAttribute attribute = 8;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Primitive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos > control_pos_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_AdvancedPoint* start_pos_;
  ::rbk::protocol::Message_AdvancedPoint* end_pos_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_ExternalDevice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_ExternalDevice) */ {
 public:
  inline Message_ExternalDevice() : Message_ExternalDevice(nullptr) {}
  ~Message_ExternalDevice() override;
  explicit PROTOBUF_CONSTEXPR Message_ExternalDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_ExternalDevice(const Message_ExternalDevice& from);
  Message_ExternalDevice(Message_ExternalDevice&& from) noexcept
    : Message_ExternalDevice() {
    *this = ::std::move(from);
  }

  inline Message_ExternalDevice& operator=(const Message_ExternalDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_ExternalDevice& operator=(Message_ExternalDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_ExternalDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_ExternalDevice* internal_default_instance() {
    return reinterpret_cast<const Message_ExternalDevice*>(
               &_Message_ExternalDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Message_ExternalDevice& a, Message_ExternalDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_ExternalDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_ExternalDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_ExternalDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_ExternalDevice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_ExternalDevice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_ExternalDevice& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_ExternalDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_ExternalDevice";
  }
  protected:
  explicit Message_ExternalDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 4,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kDescFieldNumber = 5,
    kAttributeFieldNumber = 6,
    kIsEnabledFieldNumber = 3,
  };
  // repeated .rbk.protocol.Message_MapProperty property = 4;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // bytes desc = 5;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_MapAttribute attribute = 6;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // bool is_enabled = 3;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);
  private:
  bool _internal_is_enabled() const;
  void _internal_set_is_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_ExternalDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  bool is_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_BinLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_BinLocation) */ {
 public:
  inline Message_BinLocation() : Message_BinLocation(nullptr) {}
  ~Message_BinLocation() override;
  explicit PROTOBUF_CONSTEXPR Message_BinLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_BinLocation(const Message_BinLocation& from);
  Message_BinLocation(Message_BinLocation&& from) noexcept
    : Message_BinLocation() {
    *this = ::std::move(from);
  }

  inline Message_BinLocation& operator=(const Message_BinLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_BinLocation& operator=(Message_BinLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_BinLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_BinLocation* internal_default_instance() {
    return reinterpret_cast<const Message_BinLocation*>(
               &_Message_BinLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Message_BinLocation& a, Message_BinLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_BinLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_BinLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_BinLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_BinLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_BinLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_BinLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_BinLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_BinLocation";
  }
  protected:
  explicit Message_BinLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyFieldNumber = 6,
    kClassNameFieldNumber = 1,
    kInstanceNameFieldNumber = 2,
    kGroupNameFieldNumber = 3,
    kPointNameFieldNumber = 4,
    kDescFieldNumber = 7,
    kPosFieldNumber = 5,
    kAttributeFieldNumber = 8,
  };
  // repeated .rbk.protocol.Message_MapProperty property = 6;
  int property_size() const;
  private:
  int _internal_property_size() const;
  public:
  void clear_property();
  ::rbk::protocol::Message_MapProperty* mutable_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_property();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_property(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_property();
  public:
  const ::rbk::protocol::Message_MapProperty& property(int index) const;
  ::rbk::protocol::Message_MapProperty* add_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      property() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // string instance_name = 2;
  void clear_instance_name();
  const std::string& instance_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // string group_name = 3;
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // string point_name = 4;
  void clear_point_name();
  const std::string& point_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_name();
  PROTOBUF_NODISCARD std::string* release_point_name();
  void set_allocated_point_name(std::string* point_name);
  private:
  const std::string& _internal_point_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_name(const std::string& value);
  std::string* _internal_mutable_point_name();
  public:

  // bytes desc = 7;
  void clear_desc();
  const std::string& desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc();
  PROTOBUF_NODISCARD std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .rbk.protocol.Message_MapPos pos = 5;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::rbk::protocol::Message_MapPos& pos() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapPos* release_pos();
  ::rbk::protocol::Message_MapPos* mutable_pos();
  void set_allocated_pos(::rbk::protocol::Message_MapPos* pos);
  private:
  const ::rbk::protocol::Message_MapPos& _internal_pos() const;
  ::rbk::protocol::Message_MapPos* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::rbk::protocol::Message_MapPos* pos);
  ::rbk::protocol::Message_MapPos* unsafe_arena_release_pos();

  // .rbk.protocol.Message_MapAttribute attribute = 8;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rbk::protocol::Message_MapAttribute& attribute() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapAttribute* release_attribute();
  ::rbk::protocol::Message_MapAttribute* mutable_attribute();
  void set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute);
  private:
  const ::rbk::protocol::Message_MapAttribute& _internal_attribute() const;
  ::rbk::protocol::Message_MapAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rbk::protocol::Message_MapAttribute* attribute);
  ::rbk::protocol::Message_MapAttribute* unsafe_arena_release_attribute();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_BinLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > property_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::rbk::protocol::Message_MapPos* pos_;
  ::rbk::protocol::Message_MapAttribute* attribute_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_BinLocations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_BinLocations) */ {
 public:
  inline Message_BinLocations() : Message_BinLocations(nullptr) {}
  ~Message_BinLocations() override;
  explicit PROTOBUF_CONSTEXPR Message_BinLocations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_BinLocations(const Message_BinLocations& from);
  Message_BinLocations(Message_BinLocations&& from) noexcept
    : Message_BinLocations() {
    *this = ::std::move(from);
  }

  inline Message_BinLocations& operator=(const Message_BinLocations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_BinLocations& operator=(Message_BinLocations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_BinLocations& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_BinLocations* internal_default_instance() {
    return reinterpret_cast<const Message_BinLocations*>(
               &_Message_BinLocations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Message_BinLocations& a, Message_BinLocations& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_BinLocations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_BinLocations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_BinLocations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_BinLocations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_BinLocations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_BinLocations& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_BinLocations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_BinLocations";
  }
  protected:
  explicit Message_BinLocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinLocationListFieldNumber = 1,
  };
  // repeated .rbk.protocol.Message_BinLocation bin_location_list = 1;
  int bin_location_list_size() const;
  private:
  int _internal_bin_location_list_size() const;
  public:
  void clear_bin_location_list();
  ::rbk::protocol::Message_BinLocation* mutable_bin_location_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocation >*
      mutable_bin_location_list();
  private:
  const ::rbk::protocol::Message_BinLocation& _internal_bin_location_list(int index) const;
  ::rbk::protocol::Message_BinLocation* _internal_add_bin_location_list();
  public:
  const ::rbk::protocol::Message_BinLocation& bin_location_list(int index) const;
  ::rbk::protocol::Message_BinLocation* add_bin_location_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocation >&
      bin_location_list() const;

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_BinLocations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocation > bin_location_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_Map) */ {
 public:
  inline Message_Map() : Message_Map(nullptr) {}
  ~Message_Map() override;
  explicit PROTOBUF_CONSTEXPR Message_Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Map(const Message_Map& from);
  Message_Map(Message_Map&& from) noexcept
    : Message_Map() {
    *this = ::std::move(from);
  }

  inline Message_Map& operator=(const Message_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Map& operator=(Message_Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Map* internal_default_instance() {
    return reinterpret_cast<const Message_Map*>(
               &_Message_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Message_Map& a, Message_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Map& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_Map";
  }
  protected:
  explicit Message_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalPosListFieldNumber = 3,
    kNormalLineListFieldNumber = 4,
    kNormalPos3DListFieldNumber = 5,
    kAdvancedPointListFieldNumber = 6,
    kAdvancedLineListFieldNumber = 7,
    kAdvancedCurveListFieldNumber = 8,
    kAdvancedAreaListFieldNumber = 9,
    kPatrolRouteListFieldNumber = 10,
    kRssiPosListFieldNumber = 11,
    kReflectorPosListFieldNumber = 12,
    kTagPosListFieldNumber = 13,
    kPrimitiveListFieldNumber = 14,
    kExternalDeviceListFieldNumber = 15,
    kBinLocationsListFieldNumber = 16,
    kUserDataFieldNumber = 100,
    kMapDirectoryFieldNumber = 1,
    kHeaderFieldNumber = 2,
  };
  // repeated .rbk.protocol.Message_MapPos normal_pos_list = 3;
  int normal_pos_list_size() const;
  private:
  int _internal_normal_pos_list_size() const;
  public:
  void clear_normal_pos_list();
  ::rbk::protocol::Message_MapPos* mutable_normal_pos_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
      mutable_normal_pos_list();
  private:
  const ::rbk::protocol::Message_MapPos& _internal_normal_pos_list(int index) const;
  ::rbk::protocol::Message_MapPos* _internal_add_normal_pos_list();
  public:
  const ::rbk::protocol::Message_MapPos& normal_pos_list(int index) const;
  ::rbk::protocol::Message_MapPos* add_normal_pos_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
      normal_pos_list() const;

  // repeated .rbk.protocol.Message_MapLine normal_line_list = 4;
  int normal_line_list_size() const;
  private:
  int _internal_normal_line_list_size() const;
  public:
  void clear_normal_line_list();
  ::rbk::protocol::Message_MapLine* mutable_normal_line_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >*
      mutable_normal_line_list();
  private:
  const ::rbk::protocol::Message_MapLine& _internal_normal_line_list(int index) const;
  ::rbk::protocol::Message_MapLine* _internal_add_normal_line_list();
  public:
  const ::rbk::protocol::Message_MapLine& normal_line_list(int index) const;
  ::rbk::protocol::Message_MapLine* add_normal_line_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >&
      normal_line_list() const;

  // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 5;
  int normal_pos3d_list_size() const;
  private:
  int _internal_normal_pos3d_list_size() const;
  public:
  void clear_normal_pos3d_list();
  ::rbk::protocol::Message_MapPos* mutable_normal_pos3d_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
      mutable_normal_pos3d_list();
  private:
  const ::rbk::protocol::Message_MapPos& _internal_normal_pos3d_list(int index) const;
  ::rbk::protocol::Message_MapPos* _internal_add_normal_pos3d_list();
  public:
  const ::rbk::protocol::Message_MapPos& normal_pos3d_list(int index) const;
  ::rbk::protocol::Message_MapPos* add_normal_pos3d_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
      normal_pos3d_list() const;

  // repeated .rbk.protocol.Message_AdvancedPoint advanced_point_list = 6;
  int advanced_point_list_size() const;
  private:
  int _internal_advanced_point_list_size() const;
  public:
  void clear_advanced_point_list();
  ::rbk::protocol::Message_AdvancedPoint* mutable_advanced_point_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedPoint >*
      mutable_advanced_point_list();
  private:
  const ::rbk::protocol::Message_AdvancedPoint& _internal_advanced_point_list(int index) const;
  ::rbk::protocol::Message_AdvancedPoint* _internal_add_advanced_point_list();
  public:
  const ::rbk::protocol::Message_AdvancedPoint& advanced_point_list(int index) const;
  ::rbk::protocol::Message_AdvancedPoint* add_advanced_point_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedPoint >&
      advanced_point_list() const;

  // repeated .rbk.protocol.Message_AdvancedLine advanced_line_list = 7;
  int advanced_line_list_size() const;
  private:
  int _internal_advanced_line_list_size() const;
  public:
  void clear_advanced_line_list();
  ::rbk::protocol::Message_AdvancedLine* mutable_advanced_line_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedLine >*
      mutable_advanced_line_list();
  private:
  const ::rbk::protocol::Message_AdvancedLine& _internal_advanced_line_list(int index) const;
  ::rbk::protocol::Message_AdvancedLine* _internal_add_advanced_line_list();
  public:
  const ::rbk::protocol::Message_AdvancedLine& advanced_line_list(int index) const;
  ::rbk::protocol::Message_AdvancedLine* add_advanced_line_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedLine >&
      advanced_line_list() const;

  // repeated .rbk.protocol.Message_AdvancedCurve advanced_curve_list = 8;
  int advanced_curve_list_size() const;
  private:
  int _internal_advanced_curve_list_size() const;
  public:
  void clear_advanced_curve_list();
  ::rbk::protocol::Message_AdvancedCurve* mutable_advanced_curve_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedCurve >*
      mutable_advanced_curve_list();
  private:
  const ::rbk::protocol::Message_AdvancedCurve& _internal_advanced_curve_list(int index) const;
  ::rbk::protocol::Message_AdvancedCurve* _internal_add_advanced_curve_list();
  public:
  const ::rbk::protocol::Message_AdvancedCurve& advanced_curve_list(int index) const;
  ::rbk::protocol::Message_AdvancedCurve* add_advanced_curve_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedCurve >&
      advanced_curve_list() const;

  // repeated .rbk.protocol.Message_AdvancedArea advanced_area_list = 9;
  int advanced_area_list_size() const;
  private:
  int _internal_advanced_area_list_size() const;
  public:
  void clear_advanced_area_list();
  ::rbk::protocol::Message_AdvancedArea* mutable_advanced_area_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedArea >*
      mutable_advanced_area_list();
  private:
  const ::rbk::protocol::Message_AdvancedArea& _internal_advanced_area_list(int index) const;
  ::rbk::protocol::Message_AdvancedArea* _internal_add_advanced_area_list();
  public:
  const ::rbk::protocol::Message_AdvancedArea& advanced_area_list(int index) const;
  ::rbk::protocol::Message_AdvancedArea* add_advanced_area_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedArea >&
      advanced_area_list() const;

  // repeated .rbk.protocol.Message_PatrolRoute patrol_route_list = 10;
  int patrol_route_list_size() const;
  private:
  int _internal_patrol_route_list_size() const;
  public:
  void clear_patrol_route_list();
  ::rbk::protocol::Message_PatrolRoute* mutable_patrol_route_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRoute >*
      mutable_patrol_route_list();
  private:
  const ::rbk::protocol::Message_PatrolRoute& _internal_patrol_route_list(int index) const;
  ::rbk::protocol::Message_PatrolRoute* _internal_add_patrol_route_list();
  public:
  const ::rbk::protocol::Message_PatrolRoute& patrol_route_list(int index) const;
  ::rbk::protocol::Message_PatrolRoute* add_patrol_route_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRoute >&
      patrol_route_list() const;

  // repeated .rbk.protocol.Message_MapRSSIPos rssi_pos_list = 11;
  int rssi_pos_list_size() const;
  private:
  int _internal_rssi_pos_list_size() const;
  public:
  void clear_rssi_pos_list();
  ::rbk::protocol::Message_MapRSSIPos* mutable_rssi_pos_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapRSSIPos >*
      mutable_rssi_pos_list();
  private:
  const ::rbk::protocol::Message_MapRSSIPos& _internal_rssi_pos_list(int index) const;
  ::rbk::protocol::Message_MapRSSIPos* _internal_add_rssi_pos_list();
  public:
  const ::rbk::protocol::Message_MapRSSIPos& rssi_pos_list(int index) const;
  ::rbk::protocol::Message_MapRSSIPos* add_rssi_pos_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapRSSIPos >&
      rssi_pos_list() const;

  // repeated .rbk.protocol.Message_ReflectorPos reflector_pos_list = 12;
  int reflector_pos_list_size() const;
  private:
  int _internal_reflector_pos_list_size() const;
  public:
  void clear_reflector_pos_list();
  ::rbk::protocol::Message_ReflectorPos* mutable_reflector_pos_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >*
      mutable_reflector_pos_list();
  private:
  const ::rbk::protocol::Message_ReflectorPos& _internal_reflector_pos_list(int index) const;
  ::rbk::protocol::Message_ReflectorPos* _internal_add_reflector_pos_list();
  public:
  const ::rbk::protocol::Message_ReflectorPos& reflector_pos_list(int index) const;
  ::rbk::protocol::Message_ReflectorPos* add_reflector_pos_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >&
      reflector_pos_list() const;

  // repeated .rbk.protocol.Message_tagPos tag_pos_list = 13;
  int tag_pos_list_size() const;
  private:
  int _internal_tag_pos_list_size() const;
  public:
  void clear_tag_pos_list();
  ::rbk::protocol::Message_tagPos* mutable_tag_pos_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_tagPos >*
      mutable_tag_pos_list();
  private:
  const ::rbk::protocol::Message_tagPos& _internal_tag_pos_list(int index) const;
  ::rbk::protocol::Message_tagPos* _internal_add_tag_pos_list();
  public:
  const ::rbk::protocol::Message_tagPos& tag_pos_list(int index) const;
  ::rbk::protocol::Message_tagPos* add_tag_pos_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_tagPos >&
      tag_pos_list() const;

  // repeated .rbk.protocol.Message_Primitive primitive_list = 14;
  int primitive_list_size() const;
  private:
  int _internal_primitive_list_size() const;
  public:
  void clear_primitive_list();
  ::rbk::protocol::Message_Primitive* mutable_primitive_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Primitive >*
      mutable_primitive_list();
  private:
  const ::rbk::protocol::Message_Primitive& _internal_primitive_list(int index) const;
  ::rbk::protocol::Message_Primitive* _internal_add_primitive_list();
  public:
  const ::rbk::protocol::Message_Primitive& primitive_list(int index) const;
  ::rbk::protocol::Message_Primitive* add_primitive_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Primitive >&
      primitive_list() const;

  // repeated .rbk.protocol.Message_ExternalDevice external_device_list = 15;
  int external_device_list_size() const;
  private:
  int _internal_external_device_list_size() const;
  public:
  void clear_external_device_list();
  ::rbk::protocol::Message_ExternalDevice* mutable_external_device_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ExternalDevice >*
      mutable_external_device_list();
  private:
  const ::rbk::protocol::Message_ExternalDevice& _internal_external_device_list(int index) const;
  ::rbk::protocol::Message_ExternalDevice* _internal_add_external_device_list();
  public:
  const ::rbk::protocol::Message_ExternalDevice& external_device_list(int index) const;
  ::rbk::protocol::Message_ExternalDevice* add_external_device_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ExternalDevice >&
      external_device_list() const;

  // repeated .rbk.protocol.Message_BinLocations bin_locations_list = 16;
  int bin_locations_list_size() const;
  private:
  int _internal_bin_locations_list_size() const;
  public:
  void clear_bin_locations_list();
  ::rbk::protocol::Message_BinLocations* mutable_bin_locations_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocations >*
      mutable_bin_locations_list();
  private:
  const ::rbk::protocol::Message_BinLocations& _internal_bin_locations_list(int index) const;
  ::rbk::protocol::Message_BinLocations* _internal_add_bin_locations_list();
  public:
  const ::rbk::protocol::Message_BinLocations& bin_locations_list(int index) const;
  ::rbk::protocol::Message_BinLocations* add_bin_locations_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocations >&
      bin_locations_list() const;

  // repeated .rbk.protocol.Message_MapProperty user_data = 100;
  int user_data_size() const;
  private:
  int _internal_user_data_size() const;
  public:
  void clear_user_data();
  ::rbk::protocol::Message_MapProperty* mutable_user_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
      mutable_user_data();
  private:
  const ::rbk::protocol::Message_MapProperty& _internal_user_data(int index) const;
  ::rbk::protocol::Message_MapProperty* _internal_add_user_data();
  public:
  const ::rbk::protocol::Message_MapProperty& user_data(int index) const;
  ::rbk::protocol::Message_MapProperty* add_user_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
      user_data() const;

  // string map_directory = 1;
  void clear_map_directory();
  const std::string& map_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_directory();
  PROTOBUF_NODISCARD std::string* release_map_directory();
  void set_allocated_map_directory(std::string* map_directory);
  private:
  const std::string& _internal_map_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_directory(const std::string& value);
  std::string* _internal_mutable_map_directory();
  public:

  // .rbk.protocol.Message_MapHeader header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::rbk::protocol::Message_MapHeader& header() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapHeader* release_header();
  ::rbk::protocol::Message_MapHeader* mutable_header();
  void set_allocated_header(::rbk::protocol::Message_MapHeader* header);
  private:
  const ::rbk::protocol::Message_MapHeader& _internal_header() const;
  ::rbk::protocol::Message_MapHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::rbk::protocol::Message_MapHeader* header);
  ::rbk::protocol::Message_MapHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos > normal_pos_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine > normal_line_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos > normal_pos3d_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedPoint > advanced_point_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedLine > advanced_line_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedCurve > advanced_curve_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedArea > advanced_area_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRoute > patrol_route_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapRSSIPos > rssi_pos_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos > reflector_pos_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_tagPos > tag_pos_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Primitive > primitive_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ExternalDevice > external_device_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocations > bin_locations_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty > user_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_directory_;
  ::rbk::protocol::Message_MapHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// -------------------------------------------------------------------

class Message_Map3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_Map3D) */ {
 public:
  inline Message_Map3D() : Message_Map3D(nullptr) {}
  ~Message_Map3D() override;
  explicit PROTOBUF_CONSTEXPR Message_Map3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_Map3D(const Message_Map3D& from);
  Message_Map3D(Message_Map3D&& from) noexcept
    : Message_Map3D() {
    *this = ::std::move(from);
  }

  inline Message_Map3D& operator=(const Message_Map3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Map3D& operator=(Message_Map3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_Map3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_Map3D* internal_default_instance() {
    return reinterpret_cast<const Message_Map3D*>(
               &_Message_Map3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Message_Map3D& a, Message_Map3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Map3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Map3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_Map3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_Map3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_Map3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_Map3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Map3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_Map3D";
  }
  protected:
  explicit Message_Map3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalPos3DListFieldNumber = 3,
    kMapDirectoryFieldNumber = 1,
    kHeaderFieldNumber = 2,
  };
  // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 3;
  int normal_pos3d_list_size() const;
  private:
  int _internal_normal_pos3d_list_size() const;
  public:
  void clear_normal_pos3d_list();
  ::rbk::protocol::Message_MapPos* mutable_normal_pos3d_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
      mutable_normal_pos3d_list();
  private:
  const ::rbk::protocol::Message_MapPos& _internal_normal_pos3d_list(int index) const;
  ::rbk::protocol::Message_MapPos* _internal_add_normal_pos3d_list();
  public:
  const ::rbk::protocol::Message_MapPos& normal_pos3d_list(int index) const;
  ::rbk::protocol::Message_MapPos* add_normal_pos3d_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
      normal_pos3d_list() const;

  // string map_directory = 1;
  void clear_map_directory();
  const std::string& map_directory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_directory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_directory();
  PROTOBUF_NODISCARD std::string* release_map_directory();
  void set_allocated_map_directory(std::string* map_directory);
  private:
  const std::string& _internal_map_directory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_directory(const std::string& value);
  std::string* _internal_mutable_map_directory();
  public:

  // .rbk.protocol.Message_MapHeader header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::rbk::protocol::Message_MapHeader& header() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_MapHeader* release_header();
  ::rbk::protocol::Message_MapHeader* mutable_header();
  void set_allocated_header(::rbk::protocol::Message_MapHeader* header);
  private:
  const ::rbk::protocol::Message_MapHeader& _internal_header() const;
  ::rbk::protocol::Message_MapHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::rbk::protocol::Message_MapHeader* header);
  ::rbk::protocol::Message_MapHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_Map3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos > normal_pos3d_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_directory_;
  ::rbk::protocol::Message_MapHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_MapLogData

// double robot_odo_x = 1;
inline void Message_MapLogData::clear_robot_odo_x() {
  robot_odo_x_ = 0;
}
inline double Message_MapLogData::_internal_robot_odo_x() const {
  return robot_odo_x_;
}
inline double Message_MapLogData::robot_odo_x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.robot_odo_x)
  return _internal_robot_odo_x();
}
inline void Message_MapLogData::_internal_set_robot_odo_x(double value) {
  
  robot_odo_x_ = value;
}
inline void Message_MapLogData::set_robot_odo_x(double value) {
  _internal_set_robot_odo_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData.robot_odo_x)
}

// double robot_odo_y = 2;
inline void Message_MapLogData::clear_robot_odo_y() {
  robot_odo_y_ = 0;
}
inline double Message_MapLogData::_internal_robot_odo_y() const {
  return robot_odo_y_;
}
inline double Message_MapLogData::robot_odo_y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.robot_odo_y)
  return _internal_robot_odo_y();
}
inline void Message_MapLogData::_internal_set_robot_odo_y(double value) {
  
  robot_odo_y_ = value;
}
inline void Message_MapLogData::set_robot_odo_y(double value) {
  _internal_set_robot_odo_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData.robot_odo_y)
}

// double robot_odo_w = 3;
inline void Message_MapLogData::clear_robot_odo_w() {
  robot_odo_w_ = 0;
}
inline double Message_MapLogData::_internal_robot_odo_w() const {
  return robot_odo_w_;
}
inline double Message_MapLogData::robot_odo_w() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.robot_odo_w)
  return _internal_robot_odo_w();
}
inline void Message_MapLogData::_internal_set_robot_odo_w(double value) {
  
  robot_odo_w_ = value;
}
inline void Message_MapLogData::set_robot_odo_w(double value) {
  _internal_set_robot_odo_w(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData.robot_odo_w)
}

// repeated double laser_beam_dist = 4;
inline int Message_MapLogData::_internal_laser_beam_dist_size() const {
  return laser_beam_dist_.size();
}
inline int Message_MapLogData::laser_beam_dist_size() const {
  return _internal_laser_beam_dist_size();
}
inline void Message_MapLogData::clear_laser_beam_dist() {
  laser_beam_dist_.Clear();
}
inline double Message_MapLogData::_internal_laser_beam_dist(int index) const {
  return laser_beam_dist_.Get(index);
}
inline double Message_MapLogData::laser_beam_dist(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.laser_beam_dist)
  return _internal_laser_beam_dist(index);
}
inline void Message_MapLogData::set_laser_beam_dist(int index, double value) {
  laser_beam_dist_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData.laser_beam_dist)
}
inline void Message_MapLogData::_internal_add_laser_beam_dist(double value) {
  laser_beam_dist_.Add(value);
}
inline void Message_MapLogData::add_laser_beam_dist(double value) {
  _internal_add_laser_beam_dist(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData.laser_beam_dist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_MapLogData::_internal_laser_beam_dist() const {
  return laser_beam_dist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_MapLogData::laser_beam_dist() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData.laser_beam_dist)
  return _internal_laser_beam_dist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_MapLogData::_internal_mutable_laser_beam_dist() {
  return &laser_beam_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_MapLogData::mutable_laser_beam_dist() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData.laser_beam_dist)
  return _internal_mutable_laser_beam_dist();
}

// repeated double laser_beam_angle = 5;
inline int Message_MapLogData::_internal_laser_beam_angle_size() const {
  return laser_beam_angle_.size();
}
inline int Message_MapLogData::laser_beam_angle_size() const {
  return _internal_laser_beam_angle_size();
}
inline void Message_MapLogData::clear_laser_beam_angle() {
  laser_beam_angle_.Clear();
}
inline double Message_MapLogData::_internal_laser_beam_angle(int index) const {
  return laser_beam_angle_.Get(index);
}
inline double Message_MapLogData::laser_beam_angle(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.laser_beam_angle)
  return _internal_laser_beam_angle(index);
}
inline void Message_MapLogData::set_laser_beam_angle(int index, double value) {
  laser_beam_angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData.laser_beam_angle)
}
inline void Message_MapLogData::_internal_add_laser_beam_angle(double value) {
  laser_beam_angle_.Add(value);
}
inline void Message_MapLogData::add_laser_beam_angle(double value) {
  _internal_add_laser_beam_angle(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData.laser_beam_angle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_MapLogData::_internal_laser_beam_angle() const {
  return laser_beam_angle_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_MapLogData::laser_beam_angle() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData.laser_beam_angle)
  return _internal_laser_beam_angle();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_MapLogData::_internal_mutable_laser_beam_angle() {
  return &laser_beam_angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_MapLogData::mutable_laser_beam_angle() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData.laser_beam_angle)
  return _internal_mutable_laser_beam_angle();
}

// repeated double rssi = 6;
inline int Message_MapLogData::_internal_rssi_size() const {
  return rssi_.size();
}
inline int Message_MapLogData::rssi_size() const {
  return _internal_rssi_size();
}
inline void Message_MapLogData::clear_rssi() {
  rssi_.Clear();
}
inline double Message_MapLogData::_internal_rssi(int index) const {
  return rssi_.Get(index);
}
inline double Message_MapLogData::rssi(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.rssi)
  return _internal_rssi(index);
}
inline void Message_MapLogData::set_rssi(int index, double value) {
  rssi_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData.rssi)
}
inline void Message_MapLogData::_internal_add_rssi(double value) {
  rssi_.Add(value);
}
inline void Message_MapLogData::add_rssi(double value) {
  _internal_add_rssi(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData.rssi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_MapLogData::_internal_rssi() const {
  return rssi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_MapLogData::rssi() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData.rssi)
  return _internal_rssi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_MapLogData::_internal_mutable_rssi() {
  return &rssi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_MapLogData::mutable_rssi() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData.rssi)
  return _internal_mutable_rssi();
}

// .rbk.protocol.Message_Header header = 7;
inline bool Message_MapLogData::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message_MapLogData::has_header() const {
  return _internal_has_header();
}
inline const ::rbk::protocol::Message_Header& Message_MapLogData::_internal_header() const {
  const ::rbk::protocol::Message_Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_Header&>(
      ::rbk::protocol::_Message_Header_default_instance_);
}
inline const ::rbk::protocol::Message_Header& Message_MapLogData::header() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData.header)
  return _internal_header();
}
inline void Message_MapLogData::unsafe_arena_set_allocated_header(
    ::rbk::protocol::Message_Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_MapLogData.header)
}
inline ::rbk::protocol::Message_Header* Message_MapLogData::release_header() {
  
  ::rbk::protocol::Message_Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_Header* Message_MapLogData::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapLogData.header)
  
  ::rbk::protocol::Message_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_Header* Message_MapLogData::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::rbk::protocol::Message_Header* Message_MapLogData::mutable_header() {
  ::rbk::protocol::Message_Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLogData.header)
  return _msg;
}
inline void Message_MapLogData::set_allocated_header(::rbk::protocol::Message_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapLogData.header)
}

// -------------------------------------------------------------------

// Message_MapOdo

// double timestamp = 1;
inline void Message_MapOdo::clear_timestamp() {
  timestamp_ = 0;
}
inline double Message_MapOdo::_internal_timestamp() const {
  return timestamp_;
}
inline double Message_MapOdo::timestamp() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.timestamp)
  return _internal_timestamp();
}
inline void Message_MapOdo::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Message_MapOdo::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.timestamp)
}

// float odo_x = 2;
inline void Message_MapOdo::clear_odo_x() {
  odo_x_ = 0;
}
inline float Message_MapOdo::_internal_odo_x() const {
  return odo_x_;
}
inline float Message_MapOdo::odo_x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.odo_x)
  return _internal_odo_x();
}
inline void Message_MapOdo::_internal_set_odo_x(float value) {
  
  odo_x_ = value;
}
inline void Message_MapOdo::set_odo_x(float value) {
  _internal_set_odo_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.odo_x)
}

// float odo_y = 3;
inline void Message_MapOdo::clear_odo_y() {
  odo_y_ = 0;
}
inline float Message_MapOdo::_internal_odo_y() const {
  return odo_y_;
}
inline float Message_MapOdo::odo_y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.odo_y)
  return _internal_odo_y();
}
inline void Message_MapOdo::_internal_set_odo_y(float value) {
  
  odo_y_ = value;
}
inline void Message_MapOdo::set_odo_y(float value) {
  _internal_set_odo_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.odo_y)
}

// float odo_w = 4;
inline void Message_MapOdo::clear_odo_w() {
  odo_w_ = 0;
}
inline float Message_MapOdo::_internal_odo_w() const {
  return odo_w_;
}
inline float Message_MapOdo::odo_w() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.odo_w)
  return _internal_odo_w();
}
inline void Message_MapOdo::_internal_set_odo_w(float value) {
  
  odo_w_ = value;
}
inline void Message_MapOdo::set_odo_w(float value) {
  _internal_set_odo_w(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.odo_w)
}

// float odo_vx = 5;
inline void Message_MapOdo::clear_odo_vx() {
  odo_vx_ = 0;
}
inline float Message_MapOdo::_internal_odo_vx() const {
  return odo_vx_;
}
inline float Message_MapOdo::odo_vx() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.odo_vx)
  return _internal_odo_vx();
}
inline void Message_MapOdo::_internal_set_odo_vx(float value) {
  
  odo_vx_ = value;
}
inline void Message_MapOdo::set_odo_vx(float value) {
  _internal_set_odo_vx(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.odo_vx)
}

// float odo_vy = 6;
inline void Message_MapOdo::clear_odo_vy() {
  odo_vy_ = 0;
}
inline float Message_MapOdo::_internal_odo_vy() const {
  return odo_vy_;
}
inline float Message_MapOdo::odo_vy() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.odo_vy)
  return _internal_odo_vy();
}
inline void Message_MapOdo::_internal_set_odo_vy(float value) {
  
  odo_vy_ = value;
}
inline void Message_MapOdo::set_odo_vy(float value) {
  _internal_set_odo_vy(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.odo_vy)
}

// float odo_vw = 7;
inline void Message_MapOdo::clear_odo_vw() {
  odo_vw_ = 0;
}
inline float Message_MapOdo::_internal_odo_vw() const {
  return odo_vw_;
}
inline float Message_MapOdo::odo_vw() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapOdo.odo_vw)
  return _internal_odo_vw();
}
inline void Message_MapOdo::_internal_set_odo_vw(float value) {
  
  odo_vw_ = value;
}
inline void Message_MapOdo::set_odo_vw(float value) {
  _internal_set_odo_vw(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapOdo.odo_vw)
}

// -------------------------------------------------------------------

// Message_MapLogData3D

// double timestamp = 1;
inline void Message_MapLogData3D::clear_timestamp() {
  timestamp_ = 0;
}
inline double Message_MapLogData3D::_internal_timestamp() const {
  return timestamp_;
}
inline double Message_MapLogData3D::timestamp() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.timestamp)
  return _internal_timestamp();
}
inline void Message_MapLogData3D::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Message_MapLogData3D::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.timestamp)
}

// repeated float x = 2;
inline int Message_MapLogData3D::_internal_x_size() const {
  return x_.size();
}
inline int Message_MapLogData3D::x_size() const {
  return _internal_x_size();
}
inline void Message_MapLogData3D::clear_x() {
  x_.Clear();
}
inline float Message_MapLogData3D::_internal_x(int index) const {
  return x_.Get(index);
}
inline float Message_MapLogData3D::x(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.x)
  return _internal_x(index);
}
inline void Message_MapLogData3D::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.x)
}
inline void Message_MapLogData3D::_internal_add_x(float value) {
  x_.Add(value);
}
inline void Message_MapLogData3D::add_x(float value) {
  _internal_add_x(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::_internal_x() const {
  return x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::x() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.x)
  return _internal_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::_internal_mutable_x() {
  return &x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.x)
  return _internal_mutable_x();
}

// repeated float y = 3;
inline int Message_MapLogData3D::_internal_y_size() const {
  return y_.size();
}
inline int Message_MapLogData3D::y_size() const {
  return _internal_y_size();
}
inline void Message_MapLogData3D::clear_y() {
  y_.Clear();
}
inline float Message_MapLogData3D::_internal_y(int index) const {
  return y_.Get(index);
}
inline float Message_MapLogData3D::y(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.y)
  return _internal_y(index);
}
inline void Message_MapLogData3D::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.y)
}
inline void Message_MapLogData3D::_internal_add_y(float value) {
  y_.Add(value);
}
inline void Message_MapLogData3D::add_y(float value) {
  _internal_add_y(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::_internal_y() const {
  return y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::y() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.y)
  return _internal_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::_internal_mutable_y() {
  return &y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.y)
  return _internal_mutable_y();
}

// repeated float z = 4;
inline int Message_MapLogData3D::_internal_z_size() const {
  return z_.size();
}
inline int Message_MapLogData3D::z_size() const {
  return _internal_z_size();
}
inline void Message_MapLogData3D::clear_z() {
  z_.Clear();
}
inline float Message_MapLogData3D::_internal_z(int index) const {
  return z_.Get(index);
}
inline float Message_MapLogData3D::z(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.z)
  return _internal_z(index);
}
inline void Message_MapLogData3D::set_z(int index, float value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.z)
}
inline void Message_MapLogData3D::_internal_add_z(float value) {
  z_.Add(value);
}
inline void Message_MapLogData3D::add_z(float value) {
  _internal_add_z(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.z)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::_internal_z() const {
  return z_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::z() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.z)
  return _internal_z();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::_internal_mutable_z() {
  return &z_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.z)
  return _internal_mutable_z();
}

// repeated uint32 intensity = 5;
inline int Message_MapLogData3D::_internal_intensity_size() const {
  return intensity_.size();
}
inline int Message_MapLogData3D::intensity_size() const {
  return _internal_intensity_size();
}
inline void Message_MapLogData3D::clear_intensity() {
  intensity_.Clear();
}
inline uint32_t Message_MapLogData3D::_internal_intensity(int index) const {
  return intensity_.Get(index);
}
inline uint32_t Message_MapLogData3D::intensity(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.intensity)
  return _internal_intensity(index);
}
inline void Message_MapLogData3D::set_intensity(int index, uint32_t value) {
  intensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.intensity)
}
inline void Message_MapLogData3D::_internal_add_intensity(uint32_t value) {
  intensity_.Add(value);
}
inline void Message_MapLogData3D::add_intensity(uint32_t value) {
  _internal_add_intensity(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.intensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message_MapLogData3D::_internal_intensity() const {
  return intensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message_MapLogData3D::intensity() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.intensity)
  return _internal_intensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message_MapLogData3D::_internal_mutable_intensity() {
  return &intensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message_MapLogData3D::mutable_intensity() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.intensity)
  return _internal_mutable_intensity();
}

// repeated uint32 timeoffset = 6;
inline int Message_MapLogData3D::_internal_timeoffset_size() const {
  return timeoffset_.size();
}
inline int Message_MapLogData3D::timeoffset_size() const {
  return _internal_timeoffset_size();
}
inline void Message_MapLogData3D::clear_timeoffset() {
  timeoffset_.Clear();
}
inline uint32_t Message_MapLogData3D::_internal_timeoffset(int index) const {
  return timeoffset_.Get(index);
}
inline uint32_t Message_MapLogData3D::timeoffset(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.timeoffset)
  return _internal_timeoffset(index);
}
inline void Message_MapLogData3D::set_timeoffset(int index, uint32_t value) {
  timeoffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.timeoffset)
}
inline void Message_MapLogData3D::_internal_add_timeoffset(uint32_t value) {
  timeoffset_.Add(value);
}
inline void Message_MapLogData3D::add_timeoffset(uint32_t value) {
  _internal_add_timeoffset(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.timeoffset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message_MapLogData3D::_internal_timeoffset() const {
  return timeoffset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message_MapLogData3D::timeoffset() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.timeoffset)
  return _internal_timeoffset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message_MapLogData3D::_internal_mutable_timeoffset() {
  return &timeoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message_MapLogData3D::mutable_timeoffset() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.timeoffset)
  return _internal_mutable_timeoffset();
}

// repeated uint32 ring = 7;
inline int Message_MapLogData3D::_internal_ring_size() const {
  return ring_.size();
}
inline int Message_MapLogData3D::ring_size() const {
  return _internal_ring_size();
}
inline void Message_MapLogData3D::clear_ring() {
  ring_.Clear();
}
inline uint32_t Message_MapLogData3D::_internal_ring(int index) const {
  return ring_.Get(index);
}
inline uint32_t Message_MapLogData3D::ring(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.ring)
  return _internal_ring(index);
}
inline void Message_MapLogData3D::set_ring(int index, uint32_t value) {
  ring_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.ring)
}
inline void Message_MapLogData3D::_internal_add_ring(uint32_t value) {
  ring_.Add(value);
}
inline void Message_MapLogData3D::add_ring(uint32_t value) {
  _internal_add_ring(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.ring)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message_MapLogData3D::_internal_ring() const {
  return ring_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Message_MapLogData3D::ring() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.ring)
  return _internal_ring();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message_MapLogData3D::_internal_mutable_ring() {
  return &ring_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Message_MapLogData3D::mutable_ring() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.ring)
  return _internal_mutable_ring();
}

// repeated bytes data = 8;
inline int Message_MapLogData3D::_internal_data_size() const {
  return data_.size();
}
inline int Message_MapLogData3D::data_size() const {
  return _internal_data_size();
}
inline void Message_MapLogData3D::clear_data() {
  data_.Clear();
}
inline std::string* Message_MapLogData3D::add_data() {
  std::string* _s = _internal_add_data();
  // @@protoc_insertion_point(field_add_mutable:rbk.protocol.Message_MapLogData3D.data)
  return _s;
}
inline const std::string& Message_MapLogData3D::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& Message_MapLogData3D::data(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.data)
  return _internal_data(index);
}
inline std::string* Message_MapLogData3D::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLogData3D.data)
  return data_.Mutable(index);
}
inline void Message_MapLogData3D::set_data(int index, const std::string& value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.data)
}
inline void Message_MapLogData3D::set_data(int index, std::string&& value) {
  data_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.data)
}
inline void Message_MapLogData3D::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rbk.protocol.Message_MapLogData3D.data)
}
inline void Message_MapLogData3D::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rbk.protocol.Message_MapLogData3D.data)
}
inline std::string* Message_MapLogData3D::_internal_add_data() {
  return data_.Add();
}
inline void Message_MapLogData3D::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.data)
}
inline void Message_MapLogData3D::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.data)
}
inline void Message_MapLogData3D::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rbk.protocol.Message_MapLogData3D.data)
}
inline void Message_MapLogData3D::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rbk.protocol.Message_MapLogData3D.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Message_MapLogData3D::data() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Message_MapLogData3D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.data)
  return &data_;
}

// repeated float firstAzimuth = 9;
inline int Message_MapLogData3D::_internal_firstazimuth_size() const {
  return firstazimuth_.size();
}
inline int Message_MapLogData3D::firstazimuth_size() const {
  return _internal_firstazimuth_size();
}
inline void Message_MapLogData3D::clear_firstazimuth() {
  firstazimuth_.Clear();
}
inline float Message_MapLogData3D::_internal_firstazimuth(int index) const {
  return firstazimuth_.Get(index);
}
inline float Message_MapLogData3D::firstazimuth(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.firstAzimuth)
  return _internal_firstazimuth(index);
}
inline void Message_MapLogData3D::set_firstazimuth(int index, float value) {
  firstazimuth_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.firstAzimuth)
}
inline void Message_MapLogData3D::_internal_add_firstazimuth(float value) {
  firstazimuth_.Add(value);
}
inline void Message_MapLogData3D::add_firstazimuth(float value) {
  _internal_add_firstazimuth(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.firstAzimuth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::_internal_firstazimuth() const {
  return firstazimuth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::firstazimuth() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.firstAzimuth)
  return _internal_firstazimuth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::_internal_mutable_firstazimuth() {
  return &firstazimuth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::mutable_firstazimuth() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.firstAzimuth)
  return _internal_mutable_firstazimuth();
}

// repeated float secondAzimuth = 10;
inline int Message_MapLogData3D::_internal_secondazimuth_size() const {
  return secondazimuth_.size();
}
inline int Message_MapLogData3D::secondazimuth_size() const {
  return _internal_secondazimuth_size();
}
inline void Message_MapLogData3D::clear_secondazimuth() {
  secondazimuth_.Clear();
}
inline float Message_MapLogData3D::_internal_secondazimuth(int index) const {
  return secondazimuth_.Get(index);
}
inline float Message_MapLogData3D::secondazimuth(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLogData3D.secondAzimuth)
  return _internal_secondazimuth(index);
}
inline void Message_MapLogData3D::set_secondazimuth(int index, float value) {
  secondazimuth_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLogData3D.secondAzimuth)
}
inline void Message_MapLogData3D::_internal_add_secondazimuth(float value) {
  secondazimuth_.Add(value);
}
inline void Message_MapLogData3D::add_secondazimuth(float value) {
  _internal_add_secondazimuth(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLogData3D.secondAzimuth)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::_internal_secondazimuth() const {
  return secondazimuth_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLogData3D::secondazimuth() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLogData3D.secondAzimuth)
  return _internal_secondazimuth();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::_internal_mutable_secondazimuth() {
  return &secondazimuth_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLogData3D::mutable_secondazimuth() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLogData3D.secondAzimuth)
  return _internal_mutable_secondazimuth();
}

// -------------------------------------------------------------------

// Message_MapLog

// double laser_pos_x = 1;
inline void Message_MapLog::clear_laser_pos_x() {
  laser_pos_x_ = 0;
}
inline double Message_MapLog::_internal_laser_pos_x() const {
  return laser_pos_x_;
}
inline double Message_MapLog::laser_pos_x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_pos_x)
  return _internal_laser_pos_x();
}
inline void Message_MapLog::_internal_set_laser_pos_x(double value) {
  
  laser_pos_x_ = value;
}
inline void Message_MapLog::set_laser_pos_x(double value) {
  _internal_set_laser_pos_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_pos_x)
}

// double laser_pos_y = 2;
inline void Message_MapLog::clear_laser_pos_y() {
  laser_pos_y_ = 0;
}
inline double Message_MapLog::_internal_laser_pos_y() const {
  return laser_pos_y_;
}
inline double Message_MapLog::laser_pos_y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_pos_y)
  return _internal_laser_pos_y();
}
inline void Message_MapLog::_internal_set_laser_pos_y(double value) {
  
  laser_pos_y_ = value;
}
inline void Message_MapLog::set_laser_pos_y(double value) {
  _internal_set_laser_pos_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_pos_y)
}

// double laser_pos_z = 3;
inline void Message_MapLog::clear_laser_pos_z() {
  laser_pos_z_ = 0;
}
inline double Message_MapLog::_internal_laser_pos_z() const {
  return laser_pos_z_;
}
inline double Message_MapLog::laser_pos_z() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_pos_z)
  return _internal_laser_pos_z();
}
inline void Message_MapLog::_internal_set_laser_pos_z(double value) {
  
  laser_pos_z_ = value;
}
inline void Message_MapLog::set_laser_pos_z(double value) {
  _internal_set_laser_pos_z(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_pos_z)
}

// double laser_step = 4;
inline void Message_MapLog::clear_laser_step() {
  laser_step_ = 0;
}
inline double Message_MapLog::_internal_laser_step() const {
  return laser_step_;
}
inline double Message_MapLog::laser_step() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_step)
  return _internal_laser_step();
}
inline void Message_MapLog::_internal_set_laser_step(double value) {
  
  laser_step_ = value;
}
inline void Message_MapLog::set_laser_step(double value) {
  _internal_set_laser_step(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_step)
}

// double laser_range_max = 5;
inline void Message_MapLog::clear_laser_range_max() {
  laser_range_max_ = 0;
}
inline double Message_MapLog::_internal_laser_range_max() const {
  return laser_range_max_;
}
inline double Message_MapLog::laser_range_max() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_range_max)
  return _internal_laser_range_max();
}
inline void Message_MapLog::_internal_set_laser_range_max(double value) {
  
  laser_range_max_ = value;
}
inline void Message_MapLog::set_laser_range_max(double value) {
  _internal_set_laser_range_max(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_range_max)
}

// repeated .rbk.protocol.Message_MapLogData log_data = 6;
inline int Message_MapLog::_internal_log_data_size() const {
  return log_data_.size();
}
inline int Message_MapLog::log_data_size() const {
  return _internal_log_data_size();
}
inline void Message_MapLog::clear_log_data() {
  log_data_.Clear();
}
inline ::rbk::protocol::Message_MapLogData* Message_MapLog::mutable_log_data(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.log_data)
  return log_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData >*
Message_MapLog::mutable_log_data() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.log_data)
  return &log_data_;
}
inline const ::rbk::protocol::Message_MapLogData& Message_MapLog::_internal_log_data(int index) const {
  return log_data_.Get(index);
}
inline const ::rbk::protocol::Message_MapLogData& Message_MapLog::log_data(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.log_data)
  return _internal_log_data(index);
}
inline ::rbk::protocol::Message_MapLogData* Message_MapLog::_internal_add_log_data() {
  return log_data_.Add();
}
inline ::rbk::protocol::Message_MapLogData* Message_MapLog::add_log_data() {
  ::rbk::protocol::Message_MapLogData* _add = _internal_add_log_data();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.log_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData >&
Message_MapLog::log_data() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.log_data)
  return log_data_;
}

// string laser_name = 7;
inline void Message_MapLog::clear_laser_name() {
  laser_name_.ClearToEmpty();
}
inline const std::string& Message_MapLog::laser_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_name)
  return _internal_laser_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapLog::set_laser_name(ArgT0&& arg0, ArgT... args) {
 
 laser_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_name)
}
inline std::string* Message_MapLog::mutable_laser_name() {
  std::string* _s = _internal_mutable_laser_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.laser_name)
  return _s;
}
inline const std::string& Message_MapLog::_internal_laser_name() const {
  return laser_name_.Get();
}
inline void Message_MapLog::_internal_set_laser_name(const std::string& value) {
  
  laser_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapLog::_internal_mutable_laser_name() {
  
  return laser_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapLog::release_laser_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapLog.laser_name)
  return laser_name_.Release();
}
inline void Message_MapLog::set_allocated_laser_name(std::string* laser_name) {
  if (laser_name != nullptr) {
    
  } else {
    
  }
  laser_name_.SetAllocated(laser_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (laser_name_.IsDefault()) {
    laser_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapLog.laser_name)
}

// double laser_install_height = 8;
inline void Message_MapLog::clear_laser_install_height() {
  laser_install_height_ = 0;
}
inline double Message_MapLog::_internal_laser_install_height() const {
  return laser_install_height_;
}
inline double Message_MapLog::laser_install_height() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_install_height)
  return _internal_laser_install_height();
}
inline void Message_MapLog::_internal_set_laser_install_height(double value) {
  
  laser_install_height_ = value;
}
inline void Message_MapLog::set_laser_install_height(double value) {
  _internal_set_laser_install_height(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_install_height)
}

// repeated .rbk.protocol.Message_MapOdo odometer = 9;
inline int Message_MapLog::_internal_odometer_size() const {
  return odometer_.size();
}
inline int Message_MapLog::odometer_size() const {
  return _internal_odometer_size();
}
inline void Message_MapLog::clear_odometer() {
  odometer_.Clear();
}
inline ::rbk::protocol::Message_MapOdo* Message_MapLog::mutable_odometer(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.odometer)
  return odometer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapOdo >*
Message_MapLog::mutable_odometer() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.odometer)
  return &odometer_;
}
inline const ::rbk::protocol::Message_MapOdo& Message_MapLog::_internal_odometer(int index) const {
  return odometer_.Get(index);
}
inline const ::rbk::protocol::Message_MapOdo& Message_MapLog::odometer(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.odometer)
  return _internal_odometer(index);
}
inline ::rbk::protocol::Message_MapOdo* Message_MapLog::_internal_add_odometer() {
  return odometer_.Add();
}
inline ::rbk::protocol::Message_MapOdo* Message_MapLog::add_odometer() {
  ::rbk::protocol::Message_MapOdo* _add = _internal_add_odometer();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.odometer)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapOdo >&
Message_MapLog::odometer() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.odometer)
  return odometer_;
}

// repeated .rbk.protocol.Message_MapLogData3D log_data3d = 10;
inline int Message_MapLog::_internal_log_data3d_size() const {
  return log_data3d_.size();
}
inline int Message_MapLog::log_data3d_size() const {
  return _internal_log_data3d_size();
}
inline void Message_MapLog::clear_log_data3d() {
  log_data3d_.Clear();
}
inline ::rbk::protocol::Message_MapLogData3D* Message_MapLog::mutable_log_data3d(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.log_data3d)
  return log_data3d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData3D >*
Message_MapLog::mutable_log_data3d() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.log_data3d)
  return &log_data3d_;
}
inline const ::rbk::protocol::Message_MapLogData3D& Message_MapLog::_internal_log_data3d(int index) const {
  return log_data3d_.Get(index);
}
inline const ::rbk::protocol::Message_MapLogData3D& Message_MapLog::log_data3d(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.log_data3d)
  return _internal_log_data3d(index);
}
inline ::rbk::protocol::Message_MapLogData3D* Message_MapLog::_internal_add_log_data3d() {
  return log_data3d_.Add();
}
inline ::rbk::protocol::Message_MapLogData3D* Message_MapLog::add_log_data3d() {
  ::rbk::protocol::Message_MapLogData3D* _add = _internal_add_log_data3d();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.log_data3d)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLogData3D >&
Message_MapLog::log_data3d() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.log_data3d)
  return log_data3d_;
}

// double laser_install_yaw = 11;
inline void Message_MapLog::clear_laser_install_yaw() {
  laser_install_yaw_ = 0;
}
inline double Message_MapLog::_internal_laser_install_yaw() const {
  return laser_install_yaw_;
}
inline double Message_MapLog::laser_install_yaw() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_install_yaw)
  return _internal_laser_install_yaw();
}
inline void Message_MapLog::_internal_set_laser_install_yaw(double value) {
  
  laser_install_yaw_ = value;
}
inline void Message_MapLog::set_laser_install_yaw(double value) {
  _internal_set_laser_install_yaw(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_install_yaw)
}

// double laser_install_pitch = 12;
inline void Message_MapLog::clear_laser_install_pitch() {
  laser_install_pitch_ = 0;
}
inline double Message_MapLog::_internal_laser_install_pitch() const {
  return laser_install_pitch_;
}
inline double Message_MapLog::laser_install_pitch() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_install_pitch)
  return _internal_laser_install_pitch();
}
inline void Message_MapLog::_internal_set_laser_install_pitch(double value) {
  
  laser_install_pitch_ = value;
}
inline void Message_MapLog::set_laser_install_pitch(double value) {
  _internal_set_laser_install_pitch(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_install_pitch)
}

// double laser_install_roll = 13;
inline void Message_MapLog::clear_laser_install_roll() {
  laser_install_roll_ = 0;
}
inline double Message_MapLog::_internal_laser_install_roll() const {
  return laser_install_roll_;
}
inline double Message_MapLog::laser_install_roll() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.laser_install_roll)
  return _internal_laser_install_roll();
}
inline void Message_MapLog::_internal_set_laser_install_roll(double value) {
  
  laser_install_roll_ = value;
}
inline void Message_MapLog::set_laser_install_roll(double value) {
  _internal_set_laser_install_roll(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.laser_install_roll)
}

// repeated .rbk.protocol.Message_IMU imu_data = 14;
inline int Message_MapLog::_internal_imu_data_size() const {
  return imu_data_.size();
}
inline int Message_MapLog::imu_data_size() const {
  return _internal_imu_data_size();
}
inline ::rbk::protocol::Message_IMU* Message_MapLog::mutable_imu_data(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.imu_data)
  return imu_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_IMU >*
Message_MapLog::mutable_imu_data() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.imu_data)
  return &imu_data_;
}
inline const ::rbk::protocol::Message_IMU& Message_MapLog::_internal_imu_data(int index) const {
  return imu_data_.Get(index);
}
inline const ::rbk::protocol::Message_IMU& Message_MapLog::imu_data(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.imu_data)
  return _internal_imu_data(index);
}
inline ::rbk::protocol::Message_IMU* Message_MapLog::_internal_add_imu_data() {
  return imu_data_.Add();
}
inline ::rbk::protocol::Message_IMU* Message_MapLog::add_imu_data() {
  ::rbk::protocol::Message_IMU* _add = _internal_add_imu_data();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.imu_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_IMU >&
Message_MapLog::imu_data() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.imu_data)
  return imu_data_;
}

// repeated .rbk.protocol.Message_GNSS gnss_data = 15;
inline int Message_MapLog::_internal_gnss_data_size() const {
  return gnss_data_.size();
}
inline int Message_MapLog::gnss_data_size() const {
  return _internal_gnss_data_size();
}
inline ::rbk::protocol::Message_GNSS* Message_MapLog::mutable_gnss_data(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.gnss_data)
  return gnss_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >*
Message_MapLog::mutable_gnss_data() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.gnss_data)
  return &gnss_data_;
}
inline const ::rbk::protocol::Message_GNSS& Message_MapLog::_internal_gnss_data(int index) const {
  return gnss_data_.Get(index);
}
inline const ::rbk::protocol::Message_GNSS& Message_MapLog::gnss_data(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.gnss_data)
  return _internal_gnss_data(index);
}
inline ::rbk::protocol::Message_GNSS* Message_MapLog::_internal_add_gnss_data() {
  return gnss_data_.Add();
}
inline ::rbk::protocol::Message_GNSS* Message_MapLog::add_gnss_data() {
  ::rbk::protocol::Message_GNSS* _add = _internal_add_gnss_data();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.gnss_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >&
Message_MapLog::gnss_data() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.gnss_data)
  return gnss_data_;
}

// uint32 lasertype = 16;
inline void Message_MapLog::clear_lasertype() {
  lasertype_ = 0u;
}
inline uint32_t Message_MapLog::_internal_lasertype() const {
  return lasertype_;
}
inline uint32_t Message_MapLog::lasertype() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.lasertype)
  return _internal_lasertype();
}
inline void Message_MapLog::_internal_set_lasertype(uint32_t value) {
  
  lasertype_ = value;
}
inline void Message_MapLog::set_lasertype(uint32_t value) {
  _internal_set_lasertype(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.lasertype)
}

// float factor = 17;
inline void Message_MapLog::clear_factor() {
  factor_ = 0;
}
inline float Message_MapLog::_internal_factor() const {
  return factor_;
}
inline float Message_MapLog::factor() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.factor)
  return _internal_factor();
}
inline void Message_MapLog::_internal_set_factor(float value) {
  
  factor_ = value;
}
inline void Message_MapLog::set_factor(float value) {
  _internal_set_factor(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.factor)
}

// repeated float azimuthcorrection = 18;
inline int Message_MapLog::_internal_azimuthcorrection_size() const {
  return azimuthcorrection_.size();
}
inline int Message_MapLog::azimuthcorrection_size() const {
  return _internal_azimuthcorrection_size();
}
inline void Message_MapLog::clear_azimuthcorrection() {
  azimuthcorrection_.Clear();
}
inline float Message_MapLog::_internal_azimuthcorrection(int index) const {
  return azimuthcorrection_.Get(index);
}
inline float Message_MapLog::azimuthcorrection(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.azimuthcorrection)
  return _internal_azimuthcorrection(index);
}
inline void Message_MapLog::set_azimuthcorrection(int index, float value) {
  azimuthcorrection_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.azimuthcorrection)
}
inline void Message_MapLog::_internal_add_azimuthcorrection(float value) {
  azimuthcorrection_.Add(value);
}
inline void Message_MapLog::add_azimuthcorrection(float value) {
  _internal_add_azimuthcorrection(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.azimuthcorrection)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLog::_internal_azimuthcorrection() const {
  return azimuthcorrection_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLog::azimuthcorrection() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.azimuthcorrection)
  return _internal_azimuthcorrection();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLog::_internal_mutable_azimuthcorrection() {
  return &azimuthcorrection_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLog::mutable_azimuthcorrection() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.azimuthcorrection)
  return _internal_mutable_azimuthcorrection();
}

// repeated float verticalcorrection = 19;
inline int Message_MapLog::_internal_verticalcorrection_size() const {
  return verticalcorrection_.size();
}
inline int Message_MapLog::verticalcorrection_size() const {
  return _internal_verticalcorrection_size();
}
inline void Message_MapLog::clear_verticalcorrection() {
  verticalcorrection_.Clear();
}
inline float Message_MapLog::_internal_verticalcorrection(int index) const {
  return verticalcorrection_.Get(index);
}
inline float Message_MapLog::verticalcorrection(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.verticalcorrection)
  return _internal_verticalcorrection(index);
}
inline void Message_MapLog::set_verticalcorrection(int index, float value) {
  verticalcorrection_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapLog.verticalcorrection)
}
inline void Message_MapLog::_internal_add_verticalcorrection(float value) {
  verticalcorrection_.Add(value);
}
inline void Message_MapLog::add_verticalcorrection(float value) {
  _internal_add_verticalcorrection(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.verticalcorrection)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLog::_internal_verticalcorrection() const {
  return verticalcorrection_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Message_MapLog::verticalcorrection() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.verticalcorrection)
  return _internal_verticalcorrection();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLog::_internal_mutable_verticalcorrection() {
  return &verticalcorrection_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Message_MapLog::mutable_verticalcorrection() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.verticalcorrection)
  return _internal_mutable_verticalcorrection();
}

// repeated .rbk.protocol.Message_AllGNSS all_gnss_data = 20;
inline int Message_MapLog::_internal_all_gnss_data_size() const {
  return all_gnss_data_.size();
}
inline int Message_MapLog::all_gnss_data_size() const {
  return _internal_all_gnss_data_size();
}
inline ::rbk::protocol::Message_AllGNSS* Message_MapLog::mutable_all_gnss_data(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLog.all_gnss_data)
  return all_gnss_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AllGNSS >*
Message_MapLog::mutable_all_gnss_data() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_MapLog.all_gnss_data)
  return &all_gnss_data_;
}
inline const ::rbk::protocol::Message_AllGNSS& Message_MapLog::_internal_all_gnss_data(int index) const {
  return all_gnss_data_.Get(index);
}
inline const ::rbk::protocol::Message_AllGNSS& Message_MapLog::all_gnss_data(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLog.all_gnss_data)
  return _internal_all_gnss_data(index);
}
inline ::rbk::protocol::Message_AllGNSS* Message_MapLog::_internal_add_all_gnss_data() {
  return all_gnss_data_.Add();
}
inline ::rbk::protocol::Message_AllGNSS* Message_MapLog::add_all_gnss_data() {
  ::rbk::protocol::Message_AllGNSS* _add = _internal_add_all_gnss_data();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_MapLog.all_gnss_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AllGNSS >&
Message_MapLog::all_gnss_data() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_MapLog.all_gnss_data)
  return all_gnss_data_;
}

// -------------------------------------------------------------------

// Message_MapProperty

// string key = 1;
inline void Message_MapProperty::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& Message_MapProperty::key() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapProperty::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.key)
}
inline std::string* Message_MapProperty::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapProperty.key)
  return _s;
}
inline const std::string& Message_MapProperty::_internal_key() const {
  return key_.Get();
}
inline void Message_MapProperty::_internal_set_key(const std::string& value) {
  
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapProperty::_internal_mutable_key() {
  
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapProperty::release_key() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapProperty.key)
  return key_.Release();
}
inline void Message_MapProperty::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapProperty.key)
}

// string type = 2;
inline void Message_MapProperty::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Message_MapProperty::type() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapProperty::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.type)
}
inline std::string* Message_MapProperty::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapProperty.type)
  return _s;
}
inline const std::string& Message_MapProperty::_internal_type() const {
  return type_.Get();
}
inline void Message_MapProperty::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapProperty::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapProperty::release_type() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapProperty.type)
  return type_.Release();
}
inline void Message_MapProperty::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapProperty.type)
}

// bytes value = 3;
inline void Message_MapProperty::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& Message_MapProperty::value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapProperty::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.value)
}
inline std::string* Message_MapProperty::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapProperty.value)
  return _s;
}
inline const std::string& Message_MapProperty::_internal_value() const {
  return value_.Get();
}
inline void Message_MapProperty::_internal_set_value(const std::string& value) {
  
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapProperty::_internal_mutable_value() {
  
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapProperty::release_value() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapProperty.value)
  return value_.Release();
}
inline void Message_MapProperty::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapProperty.value)
}

// string string_value = 4;
inline bool Message_MapProperty::_internal_has_string_value() const {
  return oneof_value_case() == kStringValue;
}
inline bool Message_MapProperty::has_string_value() const {
  return _internal_has_string_value();
}
inline void Message_MapProperty::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Message_MapProperty::clear_string_value() {
  if (_internal_has_string_value()) {
    oneof_value_.string_value_.Destroy();
    clear_has_oneof_value();
  }
}
inline const std::string& Message_MapProperty::string_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Message_MapProperty::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_oneof_value();
    set_has_string_value();
    oneof_value_.string_value_.InitDefault();
  }
  oneof_value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.string_value)
}
inline std::string* Message_MapProperty::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapProperty.string_value)
  return _s;
}
inline const std::string& Message_MapProperty::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return oneof_value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Message_MapProperty::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_oneof_value();
    set_has_string_value();
    oneof_value_.string_value_.InitDefault();
  }
  oneof_value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapProperty::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_oneof_value();
    set_has_string_value();
    oneof_value_.string_value_.InitDefault();
  }
  return oneof_value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Message_MapProperty::release_string_value() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapProperty.string_value)
  if (_internal_has_string_value()) {
    clear_has_oneof_value();
    return oneof_value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Message_MapProperty::set_allocated_string_value(std::string* string_value) {
  if (has_oneof_value()) {
    clear_oneof_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    oneof_value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapProperty.string_value)
}

// bool bool_value = 5;
inline bool Message_MapProperty::_internal_has_bool_value() const {
  return oneof_value_case() == kBoolValue;
}
inline bool Message_MapProperty::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Message_MapProperty::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Message_MapProperty::clear_bool_value() {
  if (_internal_has_bool_value()) {
    oneof_value_.bool_value_ = false;
    clear_has_oneof_value();
  }
}
inline bool Message_MapProperty::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return oneof_value_.bool_value_;
  }
  return false;
}
inline void Message_MapProperty::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_oneof_value();
    set_has_bool_value();
  }
  oneof_value_.bool_value_ = value;
}
inline bool Message_MapProperty::bool_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.bool_value)
  return _internal_bool_value();
}
inline void Message_MapProperty::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.bool_value)
}

// int32 int32_value = 6;
inline bool Message_MapProperty::_internal_has_int32_value() const {
  return oneof_value_case() == kInt32Value;
}
inline bool Message_MapProperty::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void Message_MapProperty::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void Message_MapProperty::clear_int32_value() {
  if (_internal_has_int32_value()) {
    oneof_value_.int32_value_ = 0;
    clear_has_oneof_value();
  }
}
inline int32_t Message_MapProperty::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return oneof_value_.int32_value_;
  }
  return 0;
}
inline void Message_MapProperty::_internal_set_int32_value(int32_t value) {
  if (!_internal_has_int32_value()) {
    clear_oneof_value();
    set_has_int32_value();
  }
  oneof_value_.int32_value_ = value;
}
inline int32_t Message_MapProperty::int32_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.int32_value)
  return _internal_int32_value();
}
inline void Message_MapProperty::set_int32_value(int32_t value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.int32_value)
}

// uint32 uint32_value = 7;
inline bool Message_MapProperty::_internal_has_uint32_value() const {
  return oneof_value_case() == kUint32Value;
}
inline bool Message_MapProperty::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void Message_MapProperty::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void Message_MapProperty::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    oneof_value_.uint32_value_ = 0u;
    clear_has_oneof_value();
  }
}
inline uint32_t Message_MapProperty::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return oneof_value_.uint32_value_;
  }
  return 0u;
}
inline void Message_MapProperty::_internal_set_uint32_value(uint32_t value) {
  if (!_internal_has_uint32_value()) {
    clear_oneof_value();
    set_has_uint32_value();
  }
  oneof_value_.uint32_value_ = value;
}
inline uint32_t Message_MapProperty::uint32_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.uint32_value)
  return _internal_uint32_value();
}
inline void Message_MapProperty::set_uint32_value(uint32_t value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.uint32_value)
}

// int64 int64_value = 8;
inline bool Message_MapProperty::_internal_has_int64_value() const {
  return oneof_value_case() == kInt64Value;
}
inline bool Message_MapProperty::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void Message_MapProperty::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void Message_MapProperty::clear_int64_value() {
  if (_internal_has_int64_value()) {
    oneof_value_.int64_value_ = int64_t{0};
    clear_has_oneof_value();
  }
}
inline int64_t Message_MapProperty::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return oneof_value_.int64_value_;
  }
  return int64_t{0};
}
inline void Message_MapProperty::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_oneof_value();
    set_has_int64_value();
  }
  oneof_value_.int64_value_ = value;
}
inline int64_t Message_MapProperty::int64_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.int64_value)
  return _internal_int64_value();
}
inline void Message_MapProperty::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.int64_value)
}

// uint64 uint64_value = 9;
inline bool Message_MapProperty::_internal_has_uint64_value() const {
  return oneof_value_case() == kUint64Value;
}
inline bool Message_MapProperty::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void Message_MapProperty::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void Message_MapProperty::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    oneof_value_.uint64_value_ = uint64_t{0u};
    clear_has_oneof_value();
  }
}
inline uint64_t Message_MapProperty::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return oneof_value_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void Message_MapProperty::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_oneof_value();
    set_has_uint64_value();
  }
  oneof_value_.uint64_value_ = value;
}
inline uint64_t Message_MapProperty::uint64_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.uint64_value)
  return _internal_uint64_value();
}
inline void Message_MapProperty::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.uint64_value)
}

// float float_value = 10;
inline bool Message_MapProperty::_internal_has_float_value() const {
  return oneof_value_case() == kFloatValue;
}
inline bool Message_MapProperty::has_float_value() const {
  return _internal_has_float_value();
}
inline void Message_MapProperty::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Message_MapProperty::clear_float_value() {
  if (_internal_has_float_value()) {
    oneof_value_.float_value_ = 0;
    clear_has_oneof_value();
  }
}
inline float Message_MapProperty::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return oneof_value_.float_value_;
  }
  return 0;
}
inline void Message_MapProperty::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_oneof_value();
    set_has_float_value();
  }
  oneof_value_.float_value_ = value;
}
inline float Message_MapProperty::float_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.float_value)
  return _internal_float_value();
}
inline void Message_MapProperty::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.float_value)
}

// double double_value = 11;
inline bool Message_MapProperty::_internal_has_double_value() const {
  return oneof_value_case() == kDoubleValue;
}
inline bool Message_MapProperty::has_double_value() const {
  return _internal_has_double_value();
}
inline void Message_MapProperty::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Message_MapProperty::clear_double_value() {
  if (_internal_has_double_value()) {
    oneof_value_.double_value_ = 0;
    clear_has_oneof_value();
  }
}
inline double Message_MapProperty::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return oneof_value_.double_value_;
  }
  return 0;
}
inline void Message_MapProperty::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_oneof_value();
    set_has_double_value();
  }
  oneof_value_.double_value_ = value;
}
inline double Message_MapProperty::double_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.double_value)
  return _internal_double_value();
}
inline void Message_MapProperty::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.double_value)
}

// bytes bytes_value = 12;
inline bool Message_MapProperty::_internal_has_bytes_value() const {
  return oneof_value_case() == kBytesValue;
}
inline bool Message_MapProperty::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void Message_MapProperty::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void Message_MapProperty::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    oneof_value_.bytes_value_.Destroy();
    clear_has_oneof_value();
  }
}
inline const std::string& Message_MapProperty::bytes_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void Message_MapProperty::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_oneof_value();
    set_has_bytes_value();
    oneof_value_.bytes_value_.InitDefault();
  }
  oneof_value_.bytes_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.bytes_value)
}
inline std::string* Message_MapProperty::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapProperty.bytes_value)
  return _s;
}
inline const std::string& Message_MapProperty::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return oneof_value_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Message_MapProperty::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_oneof_value();
    set_has_bytes_value();
    oneof_value_.bytes_value_.InitDefault();
  }
  oneof_value_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapProperty::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_oneof_value();
    set_has_bytes_value();
    oneof_value_.bytes_value_.InitDefault();
  }
  return oneof_value_.bytes_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Message_MapProperty::release_bytes_value() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapProperty.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_oneof_value();
    return oneof_value_.bytes_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Message_MapProperty::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_oneof_value()) {
    clear_oneof_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    oneof_value_.bytes_value_.InitAllocated(bytes_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapProperty.bytes_value)
}

// string tag = 13;
inline void Message_MapProperty::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& Message_MapProperty::tag() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapProperty.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapProperty::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapProperty.tag)
}
inline std::string* Message_MapProperty::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapProperty.tag)
  return _s;
}
inline const std::string& Message_MapProperty::_internal_tag() const {
  return tag_.Get();
}
inline void Message_MapProperty::_internal_set_tag(const std::string& value) {
  
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapProperty::_internal_mutable_tag() {
  
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapProperty::release_tag() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapProperty.tag)
  return tag_.Release();
}
inline void Message_MapProperty::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapProperty.tag)
}

inline bool Message_MapProperty::has_oneof_value() const {
  return oneof_value_case() != ONEOF_VALUE_NOT_SET;
}
inline void Message_MapProperty::clear_has_oneof_value() {
  _oneof_case_[0] = ONEOF_VALUE_NOT_SET;
}
inline Message_MapProperty::OneofValueCase Message_MapProperty::oneof_value_case() const {
  return Message_MapProperty::OneofValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_MapPos

// double x = 1;
inline void Message_MapPos::clear_x() {
  x_ = 0;
}
inline double Message_MapPos::_internal_x() const {
  return x_;
}
inline double Message_MapPos::x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapPos.x)
  return _internal_x();
}
inline void Message_MapPos::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Message_MapPos::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapPos.x)
}

// double y = 2;
inline void Message_MapPos::clear_y() {
  y_ = 0;
}
inline double Message_MapPos::_internal_y() const {
  return y_;
}
inline double Message_MapPos::y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapPos.y)
  return _internal_y();
}
inline void Message_MapPos::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Message_MapPos::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapPos.y)
}

// double z = 3;
inline void Message_MapPos::clear_z() {
  z_ = 0;
}
inline double Message_MapPos::_internal_z() const {
  return z_;
}
inline double Message_MapPos::z() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapPos.z)
  return _internal_z();
}
inline void Message_MapPos::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Message_MapPos::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapPos.z)
}

// -------------------------------------------------------------------

// Message_MapRSSIPos

// double x = 1;
inline void Message_MapRSSIPos::clear_x() {
  x_ = 0;
}
inline double Message_MapRSSIPos::_internal_x() const {
  return x_;
}
inline double Message_MapRSSIPos::x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapRSSIPos.x)
  return _internal_x();
}
inline void Message_MapRSSIPos::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Message_MapRSSIPos::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapRSSIPos.x)
}

// double y = 2;
inline void Message_MapRSSIPos::clear_y() {
  y_ = 0;
}
inline double Message_MapRSSIPos::_internal_y() const {
  return y_;
}
inline double Message_MapRSSIPos::y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapRSSIPos.y)
  return _internal_y();
}
inline void Message_MapRSSIPos::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Message_MapRSSIPos::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapRSSIPos.y)
}

// -------------------------------------------------------------------

// Message_ReflectorPos

// string type = 1;
inline void Message_ReflectorPos::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Message_ReflectorPos::type() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ReflectorPos.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_ReflectorPos::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ReflectorPos.type)
}
inline std::string* Message_ReflectorPos::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_ReflectorPos.type)
  return _s;
}
inline const std::string& Message_ReflectorPos::_internal_type() const {
  return type_.Get();
}
inline void Message_ReflectorPos::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_ReflectorPos::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_ReflectorPos::release_type() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_ReflectorPos.type)
  return type_.Release();
}
inline void Message_ReflectorPos::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_ReflectorPos.type)
}

// double width = 2;
inline void Message_ReflectorPos::clear_width() {
  width_ = 0;
}
inline double Message_ReflectorPos::_internal_width() const {
  return width_;
}
inline double Message_ReflectorPos::width() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ReflectorPos.width)
  return _internal_width();
}
inline void Message_ReflectorPos::_internal_set_width(double value) {
  
  width_ = value;
}
inline void Message_ReflectorPos::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ReflectorPos.width)
}

// double x = 3;
inline void Message_ReflectorPos::clear_x() {
  x_ = 0;
}
inline double Message_ReflectorPos::_internal_x() const {
  return x_;
}
inline double Message_ReflectorPos::x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ReflectorPos.x)
  return _internal_x();
}
inline void Message_ReflectorPos::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Message_ReflectorPos::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ReflectorPos.x)
}

// double y = 4;
inline void Message_ReflectorPos::clear_y() {
  y_ = 0;
}
inline double Message_ReflectorPos::_internal_y() const {
  return y_;
}
inline double Message_ReflectorPos::y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ReflectorPos.y)
  return _internal_y();
}
inline void Message_ReflectorPos::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Message_ReflectorPos::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ReflectorPos.y)
}

// -------------------------------------------------------------------

// Message_LiveRefPos

// repeated .rbk.protocol.Message_ReflectorPos ref_pos = 1;
inline int Message_LiveRefPos::_internal_ref_pos_size() const {
  return ref_pos_.size();
}
inline int Message_LiveRefPos::ref_pos_size() const {
  return _internal_ref_pos_size();
}
inline void Message_LiveRefPos::clear_ref_pos() {
  ref_pos_.Clear();
}
inline ::rbk::protocol::Message_ReflectorPos* Message_LiveRefPos::mutable_ref_pos(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_LiveRefPos.ref_pos)
  return ref_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >*
Message_LiveRefPos::mutable_ref_pos() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_LiveRefPos.ref_pos)
  return &ref_pos_;
}
inline const ::rbk::protocol::Message_ReflectorPos& Message_LiveRefPos::_internal_ref_pos(int index) const {
  return ref_pos_.Get(index);
}
inline const ::rbk::protocol::Message_ReflectorPos& Message_LiveRefPos::ref_pos(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_LiveRefPos.ref_pos)
  return _internal_ref_pos(index);
}
inline ::rbk::protocol::Message_ReflectorPos* Message_LiveRefPos::_internal_add_ref_pos() {
  return ref_pos_.Add();
}
inline ::rbk::protocol::Message_ReflectorPos* Message_LiveRefPos::add_ref_pos() {
  ::rbk::protocol::Message_ReflectorPos* _add = _internal_add_ref_pos();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_LiveRefPos.ref_pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >&
Message_LiveRefPos::ref_pos() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_LiveRefPos.ref_pos)
  return ref_pos_;
}

// -------------------------------------------------------------------

// Message_tagPos

// uint32 tag_value = 1;
inline void Message_tagPos::clear_tag_value() {
  tag_value_ = 0u;
}
inline uint32_t Message_tagPos::_internal_tag_value() const {
  return tag_value_;
}
inline uint32_t Message_tagPos::tag_value() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_tagPos.tag_value)
  return _internal_tag_value();
}
inline void Message_tagPos::_internal_set_tag_value(uint32_t value) {
  
  tag_value_ = value;
}
inline void Message_tagPos::set_tag_value(uint32_t value) {
  _internal_set_tag_value(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_tagPos.tag_value)
}

// double x = 2;
inline void Message_tagPos::clear_x() {
  x_ = 0;
}
inline double Message_tagPos::_internal_x() const {
  return x_;
}
inline double Message_tagPos::x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_tagPos.x)
  return _internal_x();
}
inline void Message_tagPos::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Message_tagPos::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_tagPos.x)
}

// double y = 3;
inline void Message_tagPos::clear_y() {
  y_ = 0;
}
inline double Message_tagPos::_internal_y() const {
  return y_;
}
inline double Message_tagPos::y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_tagPos.y)
  return _internal_y();
}
inline void Message_tagPos::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Message_tagPos::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_tagPos.y)
}

// double angle = 4;
inline void Message_tagPos::clear_angle() {
  angle_ = 0;
}
inline double Message_tagPos::_internal_angle() const {
  return angle_;
}
inline double Message_tagPos::angle() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_tagPos.angle)
  return _internal_angle();
}
inline void Message_tagPos::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void Message_tagPos::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_tagPos.angle)
}

// bool is_DMT_detected = 5;
inline void Message_tagPos::clear_is_dmt_detected() {
  is_dmt_detected_ = false;
}
inline bool Message_tagPos::_internal_is_dmt_detected() const {
  return is_dmt_detected_;
}
inline bool Message_tagPos::is_dmt_detected() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_tagPos.is_DMT_detected)
  return _internal_is_dmt_detected();
}
inline void Message_tagPos::_internal_set_is_dmt_detected(bool value) {
  
  is_dmt_detected_ = value;
}
inline void Message_tagPos::set_is_dmt_detected(bool value) {
  _internal_set_is_dmt_detected(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_tagPos.is_DMT_detected)
}

// -------------------------------------------------------------------

// Message_MapLine

// .rbk.protocol.Message_MapPos start_pos = 1;
inline bool Message_MapLine::_internal_has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != nullptr;
}
inline bool Message_MapLine::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void Message_MapLine::clear_start_pos() {
  if (GetArenaForAllocation() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_MapLine::_internal_start_pos() const {
  const ::rbk::protocol::Message_MapPos* p = start_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_MapLine::start_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLine.start_pos)
  return _internal_start_pos();
}
inline void Message_MapLine::unsafe_arena_set_allocated_start_pos(
    ::rbk::protocol::Message_MapPos* start_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_pos_);
  }
  start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_MapLine.start_pos)
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::release_start_pos() {
  
  ::rbk::protocol::Message_MapPos* temp = start_pos_;
  start_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapLine.start_pos)
  
  ::rbk::protocol::Message_MapPos* temp = start_pos_;
  start_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::_internal_mutable_start_pos() {
  
  if (start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    start_pos_ = p;
  }
  return start_pos_;
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::mutable_start_pos() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_start_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLine.start_pos)
  return _msg;
}
inline void Message_MapLine::set_allocated_start_pos(::rbk::protocol::Message_MapPos* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_pos);
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapLine.start_pos)
}

// .rbk.protocol.Message_MapPos end_pos = 2;
inline bool Message_MapLine::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Message_MapLine::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Message_MapLine::clear_end_pos() {
  if (GetArenaForAllocation() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_MapLine::_internal_end_pos() const {
  const ::rbk::protocol::Message_MapPos* p = end_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_MapLine::end_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapLine.end_pos)
  return _internal_end_pos();
}
inline void Message_MapLine::unsafe_arena_set_allocated_end_pos(
    ::rbk::protocol::Message_MapPos* end_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pos_);
  }
  end_pos_ = end_pos;
  if (end_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_MapLine.end_pos)
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::release_end_pos() {
  
  ::rbk::protocol::Message_MapPos* temp = end_pos_;
  end_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::unsafe_arena_release_end_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapLine.end_pos)
  
  ::rbk::protocol::Message_MapPos* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::rbk::protocol::Message_MapPos* Message_MapLine::mutable_end_pos() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_end_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapLine.end_pos)
  return _msg;
}
inline void Message_MapLine::set_allocated_end_pos(::rbk::protocol::Message_MapPos* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_pos);
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapLine.end_pos)
}

// -------------------------------------------------------------------

// Message_MapHeader

// string map_type = 1;
inline void Message_MapHeader::clear_map_type() {
  map_type_.ClearToEmpty();
}
inline const std::string& Message_MapHeader::map_type() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapHeader.map_type)
  return _internal_map_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapHeader::set_map_type(ArgT0&& arg0, ArgT... args) {
 
 map_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapHeader.map_type)
}
inline std::string* Message_MapHeader::mutable_map_type() {
  std::string* _s = _internal_mutable_map_type();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapHeader.map_type)
  return _s;
}
inline const std::string& Message_MapHeader::_internal_map_type() const {
  return map_type_.Get();
}
inline void Message_MapHeader::_internal_set_map_type(const std::string& value) {
  
  map_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapHeader::_internal_mutable_map_type() {
  
  return map_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapHeader::release_map_type() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapHeader.map_type)
  return map_type_.Release();
}
inline void Message_MapHeader::set_allocated_map_type(std::string* map_type) {
  if (map_type != nullptr) {
    
  } else {
    
  }
  map_type_.SetAllocated(map_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_type_.IsDefault()) {
    map_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapHeader.map_type)
}

// string map_name = 2;
inline void Message_MapHeader::clear_map_name() {
  map_name_.ClearToEmpty();
}
inline const std::string& Message_MapHeader::map_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapHeader.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapHeader::set_map_name(ArgT0&& arg0, ArgT... args) {
 
 map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapHeader.map_name)
}
inline std::string* Message_MapHeader::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapHeader.map_name)
  return _s;
}
inline const std::string& Message_MapHeader::_internal_map_name() const {
  return map_name_.Get();
}
inline void Message_MapHeader::_internal_set_map_name(const std::string& value) {
  
  map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapHeader::_internal_mutable_map_name() {
  
  return map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapHeader::release_map_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapHeader.map_name)
  return map_name_.Release();
}
inline void Message_MapHeader::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    
  } else {
    
  }
  map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_name_.IsDefault()) {
    map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapHeader.map_name)
}

// .rbk.protocol.Message_MapPos min_pos = 3;
inline bool Message_MapHeader::_internal_has_min_pos() const {
  return this != internal_default_instance() && min_pos_ != nullptr;
}
inline bool Message_MapHeader::has_min_pos() const {
  return _internal_has_min_pos();
}
inline void Message_MapHeader::clear_min_pos() {
  if (GetArenaForAllocation() == nullptr && min_pos_ != nullptr) {
    delete min_pos_;
  }
  min_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_MapHeader::_internal_min_pos() const {
  const ::rbk::protocol::Message_MapPos* p = min_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_MapHeader::min_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapHeader.min_pos)
  return _internal_min_pos();
}
inline void Message_MapHeader::unsafe_arena_set_allocated_min_pos(
    ::rbk::protocol::Message_MapPos* min_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_pos_);
  }
  min_pos_ = min_pos;
  if (min_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_MapHeader.min_pos)
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::release_min_pos() {
  
  ::rbk::protocol::Message_MapPos* temp = min_pos_;
  min_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::unsafe_arena_release_min_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapHeader.min_pos)
  
  ::rbk::protocol::Message_MapPos* temp = min_pos_;
  min_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::_internal_mutable_min_pos() {
  
  if (min_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    min_pos_ = p;
  }
  return min_pos_;
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::mutable_min_pos() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_min_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapHeader.min_pos)
  return _msg;
}
inline void Message_MapHeader::set_allocated_min_pos(::rbk::protocol::Message_MapPos* min_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete min_pos_;
  }
  if (min_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(min_pos);
    if (message_arena != submessage_arena) {
      min_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_pos, submessage_arena);
    }
    
  } else {
    
  }
  min_pos_ = min_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapHeader.min_pos)
}

// .rbk.protocol.Message_MapPos max_pos = 4;
inline bool Message_MapHeader::_internal_has_max_pos() const {
  return this != internal_default_instance() && max_pos_ != nullptr;
}
inline bool Message_MapHeader::has_max_pos() const {
  return _internal_has_max_pos();
}
inline void Message_MapHeader::clear_max_pos() {
  if (GetArenaForAllocation() == nullptr && max_pos_ != nullptr) {
    delete max_pos_;
  }
  max_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_MapHeader::_internal_max_pos() const {
  const ::rbk::protocol::Message_MapPos* p = max_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_MapHeader::max_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapHeader.max_pos)
  return _internal_max_pos();
}
inline void Message_MapHeader::unsafe_arena_set_allocated_max_pos(
    ::rbk::protocol::Message_MapPos* max_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_pos_);
  }
  max_pos_ = max_pos;
  if (max_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_MapHeader.max_pos)
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::release_max_pos() {
  
  ::rbk::protocol::Message_MapPos* temp = max_pos_;
  max_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::unsafe_arena_release_max_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapHeader.max_pos)
  
  ::rbk::protocol::Message_MapPos* temp = max_pos_;
  max_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::_internal_mutable_max_pos() {
  
  if (max_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    max_pos_ = p;
  }
  return max_pos_;
}
inline ::rbk::protocol::Message_MapPos* Message_MapHeader::mutable_max_pos() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_max_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapHeader.max_pos)
  return _msg;
}
inline void Message_MapHeader::set_allocated_max_pos(::rbk::protocol::Message_MapPos* max_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete max_pos_;
  }
  if (max_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(max_pos);
    if (message_arena != submessage_arena) {
      max_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_pos, submessage_arena);
    }
    
  } else {
    
  }
  max_pos_ = max_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapHeader.max_pos)
}

// double resolution = 5;
inline void Message_MapHeader::clear_resolution() {
  resolution_ = 0;
}
inline double Message_MapHeader::_internal_resolution() const {
  return resolution_;
}
inline double Message_MapHeader::resolution() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapHeader.resolution)
  return _internal_resolution();
}
inline void Message_MapHeader::_internal_set_resolution(double value) {
  
  resolution_ = value;
}
inline void Message_MapHeader::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapHeader.resolution)
}

// string version = 8;
inline void Message_MapHeader::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Message_MapHeader::version() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapHeader.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapHeader::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapHeader.version)
}
inline std::string* Message_MapHeader::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapHeader.version)
  return _s;
}
inline const std::string& Message_MapHeader::_internal_version() const {
  return version_.Get();
}
inline void Message_MapHeader::_internal_set_version(const std::string& value) {
  
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapHeader::_internal_mutable_version() {
  
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapHeader::release_version() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapHeader.version)
  return version_.Release();
}
inline void Message_MapHeader::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapHeader.version)
}

// -------------------------------------------------------------------

// Message_MapAttribute

// string description = 1;
inline void Message_MapAttribute::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Message_MapAttribute::description() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapAttribute.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_MapAttribute::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapAttribute.description)
}
inline std::string* Message_MapAttribute::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_MapAttribute.description)
  return _s;
}
inline const std::string& Message_MapAttribute::_internal_description() const {
  return description_.Get();
}
inline void Message_MapAttribute::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_MapAttribute::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_MapAttribute::release_description() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_MapAttribute.description)
  return description_.Release();
}
inline void Message_MapAttribute::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_MapAttribute.description)
}

// uint32 color_pen = 2;
inline void Message_MapAttribute::clear_color_pen() {
  color_pen_ = 0u;
}
inline uint32_t Message_MapAttribute::_internal_color_pen() const {
  return color_pen_;
}
inline uint32_t Message_MapAttribute::color_pen() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapAttribute.color_pen)
  return _internal_color_pen();
}
inline void Message_MapAttribute::_internal_set_color_pen(uint32_t value) {
  
  color_pen_ = value;
}
inline void Message_MapAttribute::set_color_pen(uint32_t value) {
  _internal_set_color_pen(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapAttribute.color_pen)
}

// uint32 color_brush = 3;
inline void Message_MapAttribute::clear_color_brush() {
  color_brush_ = 0u;
}
inline uint32_t Message_MapAttribute::_internal_color_brush() const {
  return color_brush_;
}
inline uint32_t Message_MapAttribute::color_brush() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapAttribute.color_brush)
  return _internal_color_brush();
}
inline void Message_MapAttribute::_internal_set_color_brush(uint32_t value) {
  
  color_brush_ = value;
}
inline void Message_MapAttribute::set_color_brush(uint32_t value) {
  _internal_set_color_brush(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapAttribute.color_brush)
}

// uint32 color_font = 4;
inline void Message_MapAttribute::clear_color_font() {
  color_font_ = 0u;
}
inline uint32_t Message_MapAttribute::_internal_color_font() const {
  return color_font_;
}
inline uint32_t Message_MapAttribute::color_font() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_MapAttribute.color_font)
  return _internal_color_font();
}
inline void Message_MapAttribute::_internal_set_color_font(uint32_t value) {
  
  color_font_ = value;
}
inline void Message_MapAttribute::set_color_font(uint32_t value) {
  _internal_set_color_font(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_MapAttribute.color_font)
}

// -------------------------------------------------------------------

// Message_AdvancedPoint

// string class_name = 1;
inline void Message_AdvancedPoint::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedPoint::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedPoint::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedPoint.class_name)
}
inline std::string* Message_AdvancedPoint::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedPoint.class_name)
  return _s;
}
inline const std::string& Message_AdvancedPoint::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_AdvancedPoint::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedPoint::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedPoint::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedPoint.class_name)
  return class_name_.Release();
}
inline void Message_AdvancedPoint::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedPoint.class_name)
}

// string instance_name = 2;
inline void Message_AdvancedPoint::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedPoint::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedPoint::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedPoint.instance_name)
}
inline std::string* Message_AdvancedPoint::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedPoint.instance_name)
  return _s;
}
inline const std::string& Message_AdvancedPoint::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_AdvancedPoint::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedPoint::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedPoint::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedPoint.instance_name)
  return instance_name_.Release();
}
inline void Message_AdvancedPoint::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedPoint.instance_name)
}

// .rbk.protocol.Message_MapPos pos = 3;
inline bool Message_AdvancedPoint::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Message_AdvancedPoint::has_pos() const {
  return _internal_has_pos();
}
inline void Message_AdvancedPoint::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedPoint::_internal_pos() const {
  const ::rbk::protocol::Message_MapPos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedPoint::pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.pos)
  return _internal_pos();
}
inline void Message_AdvancedPoint::unsafe_arena_set_allocated_pos(
    ::rbk::protocol::Message_MapPos* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedPoint.pos)
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedPoint::release_pos() {
  
  ::rbk::protocol::Message_MapPos* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedPoint::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedPoint.pos)
  
  ::rbk::protocol::Message_MapPos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedPoint::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedPoint::mutable_pos() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedPoint.pos)
  return _msg;
}
inline void Message_AdvancedPoint::set_allocated_pos(::rbk::protocol::Message_MapPos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedPoint.pos)
}

// double dir = 4;
inline void Message_AdvancedPoint::clear_dir() {
  dir_ = 0;
}
inline double Message_AdvancedPoint::_internal_dir() const {
  return dir_;
}
inline double Message_AdvancedPoint::dir() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.dir)
  return _internal_dir();
}
inline void Message_AdvancedPoint::_internal_set_dir(double value) {
  
  dir_ = value;
}
inline void Message_AdvancedPoint::set_dir(double value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedPoint.dir)
}

// repeated .rbk.protocol.Message_MapProperty property = 5;
inline int Message_AdvancedPoint::_internal_property_size() const {
  return property_.size();
}
inline int Message_AdvancedPoint::property_size() const {
  return _internal_property_size();
}
inline void Message_AdvancedPoint::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedPoint::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedPoint.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_AdvancedPoint::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedPoint.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedPoint::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedPoint::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedPoint::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedPoint::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedPoint.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_AdvancedPoint::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedPoint.property)
  return property_;
}

// bool ignore_dir = 6;
inline void Message_AdvancedPoint::clear_ignore_dir() {
  ignore_dir_ = false;
}
inline bool Message_AdvancedPoint::_internal_ignore_dir() const {
  return ignore_dir_;
}
inline bool Message_AdvancedPoint::ignore_dir() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.ignore_dir)
  return _internal_ignore_dir();
}
inline void Message_AdvancedPoint::_internal_set_ignore_dir(bool value) {
  
  ignore_dir_ = value;
}
inline void Message_AdvancedPoint::set_ignore_dir(bool value) {
  _internal_set_ignore_dir(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedPoint.ignore_dir)
}

// bytes desc = 8;
inline void Message_AdvancedPoint::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_AdvancedPoint::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedPoint::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedPoint.desc)
}
inline std::string* Message_AdvancedPoint::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedPoint.desc)
  return _s;
}
inline const std::string& Message_AdvancedPoint::_internal_desc() const {
  return desc_.Get();
}
inline void Message_AdvancedPoint::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedPoint::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedPoint::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedPoint.desc)
  return desc_.Release();
}
inline void Message_AdvancedPoint::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedPoint.desc)
}

// .rbk.protocol.Message_MapAttribute attribute = 10;
inline bool Message_AdvancedPoint::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_AdvancedPoint::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_AdvancedPoint::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedPoint::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedPoint::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedPoint.attribute)
  return _internal_attribute();
}
inline void Message_AdvancedPoint::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedPoint.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedPoint::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedPoint::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedPoint.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedPoint::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedPoint::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedPoint.attribute)
  return _msg;
}
inline void Message_AdvancedPoint::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedPoint.attribute)
}

// -------------------------------------------------------------------

// Message_AdvancedLine

// string class_name = 1;
inline void Message_AdvancedLine::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedLine::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedLine.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedLine::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedLine.class_name)
}
inline std::string* Message_AdvancedLine::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedLine.class_name)
  return _s;
}
inline const std::string& Message_AdvancedLine::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_AdvancedLine::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedLine::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedLine::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedLine.class_name)
  return class_name_.Release();
}
inline void Message_AdvancedLine::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedLine.class_name)
}

// string instance_name = 2;
inline void Message_AdvancedLine::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedLine::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedLine.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedLine::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedLine.instance_name)
}
inline std::string* Message_AdvancedLine::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedLine.instance_name)
  return _s;
}
inline const std::string& Message_AdvancedLine::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_AdvancedLine::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedLine::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedLine::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedLine.instance_name)
  return instance_name_.Release();
}
inline void Message_AdvancedLine::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedLine.instance_name)
}

// .rbk.protocol.Message_MapLine line = 3;
inline bool Message_AdvancedLine::_internal_has_line() const {
  return this != internal_default_instance() && line_ != nullptr;
}
inline bool Message_AdvancedLine::has_line() const {
  return _internal_has_line();
}
inline void Message_AdvancedLine::clear_line() {
  if (GetArenaForAllocation() == nullptr && line_ != nullptr) {
    delete line_;
  }
  line_ = nullptr;
}
inline const ::rbk::protocol::Message_MapLine& Message_AdvancedLine::_internal_line() const {
  const ::rbk::protocol::Message_MapLine* p = line_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapLine&>(
      ::rbk::protocol::_Message_MapLine_default_instance_);
}
inline const ::rbk::protocol::Message_MapLine& Message_AdvancedLine::line() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedLine.line)
  return _internal_line();
}
inline void Message_AdvancedLine::unsafe_arena_set_allocated_line(
    ::rbk::protocol::Message_MapLine* line) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(line_);
  }
  line_ = line;
  if (line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedLine.line)
}
inline ::rbk::protocol::Message_MapLine* Message_AdvancedLine::release_line() {
  
  ::rbk::protocol::Message_MapLine* temp = line_;
  line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapLine* Message_AdvancedLine::unsafe_arena_release_line() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedLine.line)
  
  ::rbk::protocol::Message_MapLine* temp = line_;
  line_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapLine* Message_AdvancedLine::_internal_mutable_line() {
  
  if (line_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapLine>(GetArenaForAllocation());
    line_ = p;
  }
  return line_;
}
inline ::rbk::protocol::Message_MapLine* Message_AdvancedLine::mutable_line() {
  ::rbk::protocol::Message_MapLine* _msg = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedLine.line)
  return _msg;
}
inline void Message_AdvancedLine::set_allocated_line(::rbk::protocol::Message_MapLine* line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete line_;
  }
  if (line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(line);
    if (message_arena != submessage_arena) {
      line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    
  } else {
    
  }
  line_ = line;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedLine.line)
}

// repeated .rbk.protocol.Message_MapProperty property = 4;
inline int Message_AdvancedLine::_internal_property_size() const {
  return property_.size();
}
inline int Message_AdvancedLine::property_size() const {
  return _internal_property_size();
}
inline void Message_AdvancedLine::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedLine::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedLine.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_AdvancedLine::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedLine.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedLine::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedLine::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedLine.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedLine::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedLine::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedLine.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_AdvancedLine::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedLine.property)
  return property_;
}

// bytes desc = 8;
inline void Message_AdvancedLine::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_AdvancedLine::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedLine.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedLine::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedLine.desc)
}
inline std::string* Message_AdvancedLine::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedLine.desc)
  return _s;
}
inline const std::string& Message_AdvancedLine::_internal_desc() const {
  return desc_.Get();
}
inline void Message_AdvancedLine::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedLine::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedLine::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedLine.desc)
  return desc_.Release();
}
inline void Message_AdvancedLine::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedLine.desc)
}

// .rbk.protocol.Message_MapAttribute attribute = 10;
inline bool Message_AdvancedLine::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_AdvancedLine::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_AdvancedLine::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedLine::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedLine::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedLine.attribute)
  return _internal_attribute();
}
inline void Message_AdvancedLine::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedLine.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedLine::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedLine::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedLine.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedLine::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedLine::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedLine.attribute)
  return _msg;
}
inline void Message_AdvancedLine::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedLine.attribute)
}

// -------------------------------------------------------------------

// Message_AdvancedCurve

// string class_name = 1;
inline void Message_AdvancedCurve::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedCurve::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedCurve::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedCurve.class_name)
}
inline std::string* Message_AdvancedCurve::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.class_name)
  return _s;
}
inline const std::string& Message_AdvancedCurve::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_AdvancedCurve::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedCurve::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedCurve::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.class_name)
  return class_name_.Release();
}
inline void Message_AdvancedCurve::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.class_name)
}

// string instance_name = 2;
inline void Message_AdvancedCurve::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedCurve::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedCurve::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedCurve.instance_name)
}
inline std::string* Message_AdvancedCurve::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.instance_name)
  return _s;
}
inline const std::string& Message_AdvancedCurve::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_AdvancedCurve::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedCurve::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedCurve::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.instance_name)
  return instance_name_.Release();
}
inline void Message_AdvancedCurve::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.instance_name)
}

// .rbk.protocol.Message_AdvancedPoint start_pos = 3;
inline bool Message_AdvancedCurve::_internal_has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != nullptr;
}
inline bool Message_AdvancedCurve::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void Message_AdvancedCurve::clear_start_pos() {
  if (GetArenaForAllocation() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_AdvancedCurve::_internal_start_pos() const {
  const ::rbk::protocol::Message_AdvancedPoint* p = start_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_AdvancedPoint&>(
      ::rbk::protocol::_Message_AdvancedPoint_default_instance_);
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_AdvancedCurve::start_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.start_pos)
  return _internal_start_pos();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_start_pos(
    ::rbk::protocol::Message_AdvancedPoint* start_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_pos_);
  }
  start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.start_pos)
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::release_start_pos() {
  
  ::rbk::protocol::Message_AdvancedPoint* temp = start_pos_;
  start_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.start_pos)
  
  ::rbk::protocol::Message_AdvancedPoint* temp = start_pos_;
  start_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::_internal_mutable_start_pos() {
  
  if (start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_AdvancedPoint>(GetArenaForAllocation());
    start_pos_ = p;
  }
  return start_pos_;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::mutable_start_pos() {
  ::rbk::protocol::Message_AdvancedPoint* _msg = _internal_mutable_start_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.start_pos)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_start_pos(::rbk::protocol::Message_AdvancedPoint* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_pos);
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.start_pos)
}

// .rbk.protocol.Message_AdvancedPoint end_pos = 4;
inline bool Message_AdvancedCurve::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Message_AdvancedCurve::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Message_AdvancedCurve::clear_end_pos() {
  if (GetArenaForAllocation() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_AdvancedCurve::_internal_end_pos() const {
  const ::rbk::protocol::Message_AdvancedPoint* p = end_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_AdvancedPoint&>(
      ::rbk::protocol::_Message_AdvancedPoint_default_instance_);
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_AdvancedCurve::end_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.end_pos)
  return _internal_end_pos();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_end_pos(
    ::rbk::protocol::Message_AdvancedPoint* end_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pos_);
  }
  end_pos_ = end_pos;
  if (end_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.end_pos)
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::release_end_pos() {
  
  ::rbk::protocol::Message_AdvancedPoint* temp = end_pos_;
  end_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::unsafe_arena_release_end_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.end_pos)
  
  ::rbk::protocol::Message_AdvancedPoint* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_AdvancedPoint>(GetArenaForAllocation());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_AdvancedCurve::mutable_end_pos() {
  ::rbk::protocol::Message_AdvancedPoint* _msg = _internal_mutable_end_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.end_pos)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_end_pos(::rbk::protocol::Message_AdvancedPoint* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_pos);
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.end_pos)
}

// .rbk.protocol.Message_MapPos control_pos1 = 5;
inline bool Message_AdvancedCurve::_internal_has_control_pos1() const {
  return this != internal_default_instance() && control_pos1_ != nullptr;
}
inline bool Message_AdvancedCurve::has_control_pos1() const {
  return _internal_has_control_pos1();
}
inline void Message_AdvancedCurve::clear_control_pos1() {
  if (GetArenaForAllocation() == nullptr && control_pos1_ != nullptr) {
    delete control_pos1_;
  }
  control_pos1_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::_internal_control_pos1() const {
  const ::rbk::protocol::Message_MapPos* p = control_pos1_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::control_pos1() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.control_pos1)
  return _internal_control_pos1();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_control_pos1(
    ::rbk::protocol::Message_MapPos* control_pos1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_pos1_);
  }
  control_pos1_ = control_pos1;
  if (control_pos1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos1)
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::release_control_pos1() {
  
  ::rbk::protocol::Message_MapPos* temp = control_pos1_;
  control_pos1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::unsafe_arena_release_control_pos1() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.control_pos1)
  
  ::rbk::protocol::Message_MapPos* temp = control_pos1_;
  control_pos1_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::_internal_mutable_control_pos1() {
  
  if (control_pos1_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    control_pos1_ = p;
  }
  return control_pos1_;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::mutable_control_pos1() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_control_pos1();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.control_pos1)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_control_pos1(::rbk::protocol::Message_MapPos* control_pos1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_pos1_;
  }
  if (control_pos1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_pos1);
    if (message_arena != submessage_arena) {
      control_pos1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_pos1, submessage_arena);
    }
    
  } else {
    
  }
  control_pos1_ = control_pos1;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos1)
}

// .rbk.protocol.Message_MapPos control_pos2 = 6;
inline bool Message_AdvancedCurve::_internal_has_control_pos2() const {
  return this != internal_default_instance() && control_pos2_ != nullptr;
}
inline bool Message_AdvancedCurve::has_control_pos2() const {
  return _internal_has_control_pos2();
}
inline void Message_AdvancedCurve::clear_control_pos2() {
  if (GetArenaForAllocation() == nullptr && control_pos2_ != nullptr) {
    delete control_pos2_;
  }
  control_pos2_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::_internal_control_pos2() const {
  const ::rbk::protocol::Message_MapPos* p = control_pos2_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::control_pos2() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.control_pos2)
  return _internal_control_pos2();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_control_pos2(
    ::rbk::protocol::Message_MapPos* control_pos2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_pos2_);
  }
  control_pos2_ = control_pos2;
  if (control_pos2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos2)
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::release_control_pos2() {
  
  ::rbk::protocol::Message_MapPos* temp = control_pos2_;
  control_pos2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::unsafe_arena_release_control_pos2() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.control_pos2)
  
  ::rbk::protocol::Message_MapPos* temp = control_pos2_;
  control_pos2_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::_internal_mutable_control_pos2() {
  
  if (control_pos2_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    control_pos2_ = p;
  }
  return control_pos2_;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::mutable_control_pos2() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_control_pos2();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.control_pos2)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_control_pos2(::rbk::protocol::Message_MapPos* control_pos2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_pos2_;
  }
  if (control_pos2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_pos2);
    if (message_arena != submessage_arena) {
      control_pos2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_pos2, submessage_arena);
    }
    
  } else {
    
  }
  control_pos2_ = control_pos2;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos2)
}

// repeated .rbk.protocol.Message_MapProperty property = 7;
inline int Message_AdvancedCurve::_internal_property_size() const {
  return property_.size();
}
inline int Message_AdvancedCurve::property_size() const {
  return _internal_property_size();
}
inline void Message_AdvancedCurve::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedCurve::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_AdvancedCurve::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedCurve.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedCurve::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedCurve::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedCurve::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedCurve::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedCurve.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_AdvancedCurve::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedCurve.property)
  return property_;
}

// bytes desc = 8;
inline void Message_AdvancedCurve::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_AdvancedCurve::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedCurve::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedCurve.desc)
}
inline std::string* Message_AdvancedCurve::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.desc)
  return _s;
}
inline const std::string& Message_AdvancedCurve::_internal_desc() const {
  return desc_.Get();
}
inline void Message_AdvancedCurve::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedCurve::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedCurve::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.desc)
  return desc_.Release();
}
inline void Message_AdvancedCurve::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.desc)
}

// .rbk.protocol.Message_MapPos control_pos3 = 9;
inline bool Message_AdvancedCurve::_internal_has_control_pos3() const {
  return this != internal_default_instance() && control_pos3_ != nullptr;
}
inline bool Message_AdvancedCurve::has_control_pos3() const {
  return _internal_has_control_pos3();
}
inline void Message_AdvancedCurve::clear_control_pos3() {
  if (GetArenaForAllocation() == nullptr && control_pos3_ != nullptr) {
    delete control_pos3_;
  }
  control_pos3_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::_internal_control_pos3() const {
  const ::rbk::protocol::Message_MapPos* p = control_pos3_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::control_pos3() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.control_pos3)
  return _internal_control_pos3();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_control_pos3(
    ::rbk::protocol::Message_MapPos* control_pos3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_pos3_);
  }
  control_pos3_ = control_pos3;
  if (control_pos3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos3)
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::release_control_pos3() {
  
  ::rbk::protocol::Message_MapPos* temp = control_pos3_;
  control_pos3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::unsafe_arena_release_control_pos3() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.control_pos3)
  
  ::rbk::protocol::Message_MapPos* temp = control_pos3_;
  control_pos3_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::_internal_mutable_control_pos3() {
  
  if (control_pos3_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    control_pos3_ = p;
  }
  return control_pos3_;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::mutable_control_pos3() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_control_pos3();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.control_pos3)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_control_pos3(::rbk::protocol::Message_MapPos* control_pos3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_pos3_;
  }
  if (control_pos3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_pos3);
    if (message_arena != submessage_arena) {
      control_pos3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_pos3, submessage_arena);
    }
    
  } else {
    
  }
  control_pos3_ = control_pos3;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos3)
}

// .rbk.protocol.Message_MapPos control_pos4 = 10;
inline bool Message_AdvancedCurve::_internal_has_control_pos4() const {
  return this != internal_default_instance() && control_pos4_ != nullptr;
}
inline bool Message_AdvancedCurve::has_control_pos4() const {
  return _internal_has_control_pos4();
}
inline void Message_AdvancedCurve::clear_control_pos4() {
  if (GetArenaForAllocation() == nullptr && control_pos4_ != nullptr) {
    delete control_pos4_;
  }
  control_pos4_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::_internal_control_pos4() const {
  const ::rbk::protocol::Message_MapPos* p = control_pos4_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedCurve::control_pos4() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.control_pos4)
  return _internal_control_pos4();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_control_pos4(
    ::rbk::protocol::Message_MapPos* control_pos4) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_pos4_);
  }
  control_pos4_ = control_pos4;
  if (control_pos4) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos4)
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::release_control_pos4() {
  
  ::rbk::protocol::Message_MapPos* temp = control_pos4_;
  control_pos4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::unsafe_arena_release_control_pos4() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.control_pos4)
  
  ::rbk::protocol::Message_MapPos* temp = control_pos4_;
  control_pos4_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::_internal_mutable_control_pos4() {
  
  if (control_pos4_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    control_pos4_ = p;
  }
  return control_pos4_;
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedCurve::mutable_control_pos4() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_control_pos4();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.control_pos4)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_control_pos4(::rbk::protocol::Message_MapPos* control_pos4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_pos4_;
  }
  if (control_pos4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(control_pos4);
    if (message_arena != submessage_arena) {
      control_pos4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_pos4, submessage_arena);
    }
    
  } else {
    
  }
  control_pos4_ = control_pos4;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.control_pos4)
}

// repeated .rbk.protocol.Message_Device devices = 12;
inline int Message_AdvancedCurve::_internal_devices_size() const {
  return devices_.size();
}
inline int Message_AdvancedCurve::devices_size() const {
  return _internal_devices_size();
}
inline void Message_AdvancedCurve::clear_devices() {
  devices_.Clear();
}
inline ::rbk::protocol::Message_Device* Message_AdvancedCurve::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >*
Message_AdvancedCurve::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedCurve.devices)
  return &devices_;
}
inline const ::rbk::protocol::Message_Device& Message_AdvancedCurve::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::rbk::protocol::Message_Device& Message_AdvancedCurve::devices(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.devices)
  return _internal_devices(index);
}
inline ::rbk::protocol::Message_Device* Message_AdvancedCurve::_internal_add_devices() {
  return devices_.Add();
}
inline ::rbk::protocol::Message_Device* Message_AdvancedCurve::add_devices() {
  ::rbk::protocol::Message_Device* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedCurve.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >&
Message_AdvancedCurve::devices() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedCurve.devices)
  return devices_;
}

// .rbk.protocol.Message_MapAttribute attribute = 15;
inline bool Message_AdvancedCurve::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_AdvancedCurve::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_AdvancedCurve::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedCurve::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedCurve::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedCurve.attribute)
  return _internal_attribute();
}
inline void Message_AdvancedCurve::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedCurve.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedCurve::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedCurve::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedCurve.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedCurve::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedCurve::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedCurve.attribute)
  return _msg;
}
inline void Message_AdvancedCurve::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedCurve.attribute)
}

// -------------------------------------------------------------------

// Message_AdvancedArea

// string class_name = 1;
inline void Message_AdvancedArea::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedArea::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedArea::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedArea.class_name)
}
inline std::string* Message_AdvancedArea::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.class_name)
  return _s;
}
inline const std::string& Message_AdvancedArea::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_AdvancedArea::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedArea::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedArea::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedArea.class_name)
  return class_name_.Release();
}
inline void Message_AdvancedArea::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedArea.class_name)
}

// string instance_name = 2;
inline void Message_AdvancedArea::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_AdvancedArea::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedArea::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedArea.instance_name)
}
inline std::string* Message_AdvancedArea::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.instance_name)
  return _s;
}
inline const std::string& Message_AdvancedArea::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_AdvancedArea::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedArea::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedArea::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedArea.instance_name)
  return instance_name_.Release();
}
inline void Message_AdvancedArea::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedArea.instance_name)
}

// repeated .rbk.protocol.Message_MapPos pos_group = 3;
inline int Message_AdvancedArea::_internal_pos_group_size() const {
  return pos_group_.size();
}
inline int Message_AdvancedArea::pos_group_size() const {
  return _internal_pos_group_size();
}
inline void Message_AdvancedArea::clear_pos_group() {
  pos_group_.Clear();
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedArea::mutable_pos_group(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.pos_group)
  return pos_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
Message_AdvancedArea::mutable_pos_group() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedArea.pos_group)
  return &pos_group_;
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedArea::_internal_pos_group(int index) const {
  return pos_group_.Get(index);
}
inline const ::rbk::protocol::Message_MapPos& Message_AdvancedArea::pos_group(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.pos_group)
  return _internal_pos_group(index);
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedArea::_internal_add_pos_group() {
  return pos_group_.Add();
}
inline ::rbk::protocol::Message_MapPos* Message_AdvancedArea::add_pos_group() {
  ::rbk::protocol::Message_MapPos* _add = _internal_add_pos_group();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedArea.pos_group)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
Message_AdvancedArea::pos_group() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedArea.pos_group)
  return pos_group_;
}

// double dir = 4;
inline void Message_AdvancedArea::clear_dir() {
  dir_ = 0;
}
inline double Message_AdvancedArea::_internal_dir() const {
  return dir_;
}
inline double Message_AdvancedArea::dir() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.dir)
  return _internal_dir();
}
inline void Message_AdvancedArea::_internal_set_dir(double value) {
  
  dir_ = value;
}
inline void Message_AdvancedArea::set_dir(double value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedArea.dir)
}

// repeated .rbk.protocol.Message_MapProperty property = 5;
inline int Message_AdvancedArea::_internal_property_size() const {
  return property_.size();
}
inline int Message_AdvancedArea::property_size() const {
  return _internal_property_size();
}
inline void Message_AdvancedArea::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedArea::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_AdvancedArea::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedArea.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedArea::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_AdvancedArea::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedArea::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_AdvancedArea::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedArea.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_AdvancedArea::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedArea.property)
  return property_;
}

// bytes desc = 8;
inline void Message_AdvancedArea::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_AdvancedArea::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_AdvancedArea::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_AdvancedArea.desc)
}
inline std::string* Message_AdvancedArea::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.desc)
  return _s;
}
inline const std::string& Message_AdvancedArea::_internal_desc() const {
  return desc_.Get();
}
inline void Message_AdvancedArea::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_AdvancedArea::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_AdvancedArea::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedArea.desc)
  return desc_.Release();
}
inline void Message_AdvancedArea::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedArea.desc)
}

// repeated .rbk.protocol.Message_Device devices = 10;
inline int Message_AdvancedArea::_internal_devices_size() const {
  return devices_.size();
}
inline int Message_AdvancedArea::devices_size() const {
  return _internal_devices_size();
}
inline void Message_AdvancedArea::clear_devices() {
  devices_.Clear();
}
inline ::rbk::protocol::Message_Device* Message_AdvancedArea::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >*
Message_AdvancedArea::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AdvancedArea.devices)
  return &devices_;
}
inline const ::rbk::protocol::Message_Device& Message_AdvancedArea::_internal_devices(int index) const {
  return devices_.Get(index);
}
inline const ::rbk::protocol::Message_Device& Message_AdvancedArea::devices(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.devices)
  return _internal_devices(index);
}
inline ::rbk::protocol::Message_Device* Message_AdvancedArea::_internal_add_devices() {
  return devices_.Add();
}
inline ::rbk::protocol::Message_Device* Message_AdvancedArea::add_devices() {
  ::rbk::protocol::Message_Device* _add = _internal_add_devices();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AdvancedArea.devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Device >&
Message_AdvancedArea::devices() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AdvancedArea.devices)
  return devices_;
}

// .rbk.protocol.Message_MapAttribute attribute = 15;
inline bool Message_AdvancedArea::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_AdvancedArea::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_AdvancedArea::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedArea::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_AdvancedArea::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AdvancedArea.attribute)
  return _internal_attribute();
}
inline void Message_AdvancedArea::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_AdvancedArea.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedArea::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedArea::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_AdvancedArea.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedArea::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_AdvancedArea::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AdvancedArea.attribute)
  return _msg;
}
inline void Message_AdvancedArea::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_AdvancedArea.attribute)
}

// -------------------------------------------------------------------

// Message_VirtualLineList

// repeated .rbk.protocol.Message_MapLine virtual_map_line = 1;
inline int Message_VirtualLineList::_internal_virtual_map_line_size() const {
  return virtual_map_line_.size();
}
inline int Message_VirtualLineList::virtual_map_line_size() const {
  return _internal_virtual_map_line_size();
}
inline void Message_VirtualLineList::clear_virtual_map_line() {
  virtual_map_line_.Clear();
}
inline ::rbk::protocol::Message_MapLine* Message_VirtualLineList::mutable_virtual_map_line(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_VirtualLineList.virtual_map_line)
  return virtual_map_line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >*
Message_VirtualLineList::mutable_virtual_map_line() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_VirtualLineList.virtual_map_line)
  return &virtual_map_line_;
}
inline const ::rbk::protocol::Message_MapLine& Message_VirtualLineList::_internal_virtual_map_line(int index) const {
  return virtual_map_line_.Get(index);
}
inline const ::rbk::protocol::Message_MapLine& Message_VirtualLineList::virtual_map_line(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_VirtualLineList.virtual_map_line)
  return _internal_virtual_map_line(index);
}
inline ::rbk::protocol::Message_MapLine* Message_VirtualLineList::_internal_add_virtual_map_line() {
  return virtual_map_line_.Add();
}
inline ::rbk::protocol::Message_MapLine* Message_VirtualLineList::add_virtual_map_line() {
  ::rbk::protocol::Message_MapLine* _add = _internal_add_virtual_map_line();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_VirtualLineList.virtual_map_line)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >&
Message_VirtualLineList::virtual_map_line() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_VirtualLineList.virtual_map_line)
  return virtual_map_line_;
}

// -------------------------------------------------------------------

// Message_LaserDevice

// uint32 id = 1;
inline void Message_LaserDevice::clear_id() {
  id_ = 0u;
}
inline uint32_t Message_LaserDevice::_internal_id() const {
  return id_;
}
inline uint32_t Message_LaserDevice::id() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_LaserDevice.id)
  return _internal_id();
}
inline void Message_LaserDevice::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Message_LaserDevice::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_LaserDevice.id)
}

// repeated .rbk.protocol.Message_MapPos laser_margin_pos = 2;
inline int Message_LaserDevice::_internal_laser_margin_pos_size() const {
  return laser_margin_pos_.size();
}
inline int Message_LaserDevice::laser_margin_pos_size() const {
  return _internal_laser_margin_pos_size();
}
inline void Message_LaserDevice::clear_laser_margin_pos() {
  laser_margin_pos_.Clear();
}
inline ::rbk::protocol::Message_MapPos* Message_LaserDevice::mutable_laser_margin_pos(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_LaserDevice.laser_margin_pos)
  return laser_margin_pos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
Message_LaserDevice::mutable_laser_margin_pos() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_LaserDevice.laser_margin_pos)
  return &laser_margin_pos_;
}
inline const ::rbk::protocol::Message_MapPos& Message_LaserDevice::_internal_laser_margin_pos(int index) const {
  return laser_margin_pos_.Get(index);
}
inline const ::rbk::protocol::Message_MapPos& Message_LaserDevice::laser_margin_pos(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_LaserDevice.laser_margin_pos)
  return _internal_laser_margin_pos(index);
}
inline ::rbk::protocol::Message_MapPos* Message_LaserDevice::_internal_add_laser_margin_pos() {
  return laser_margin_pos_.Add();
}
inline ::rbk::protocol::Message_MapPos* Message_LaserDevice::add_laser_margin_pos() {
  ::rbk::protocol::Message_MapPos* _add = _internal_add_laser_margin_pos();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_LaserDevice.laser_margin_pos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
Message_LaserDevice::laser_margin_pos() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_LaserDevice.laser_margin_pos)
  return laser_margin_pos_;
}

// -------------------------------------------------------------------

// Message_Device

// string model_name = 1;
inline void Message_Device::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& Message_Device::model_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Device.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Device::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Device.model_name)
}
inline std::string* Message_Device::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Device.model_name)
  return _s;
}
inline const std::string& Message_Device::_internal_model_name() const {
  return model_name_.Get();
}
inline void Message_Device::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Device::_internal_mutable_model_name() {
  
  return model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Device::release_model_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Device.model_name)
  return model_name_.Release();
}
inline void Message_Device::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault()) {
    model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Device.model_name)
}

// repeated .rbk.protocol.Message_LaserDevice laser_devices = 5;
inline int Message_Device::_internal_laser_devices_size() const {
  return laser_devices_.size();
}
inline int Message_Device::laser_devices_size() const {
  return _internal_laser_devices_size();
}
inline void Message_Device::clear_laser_devices() {
  laser_devices_.Clear();
}
inline ::rbk::protocol::Message_LaserDevice* Message_Device::mutable_laser_devices(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Device.laser_devices)
  return laser_devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_LaserDevice >*
Message_Device::mutable_laser_devices() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Device.laser_devices)
  return &laser_devices_;
}
inline const ::rbk::protocol::Message_LaserDevice& Message_Device::_internal_laser_devices(int index) const {
  return laser_devices_.Get(index);
}
inline const ::rbk::protocol::Message_LaserDevice& Message_Device::laser_devices(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Device.laser_devices)
  return _internal_laser_devices(index);
}
inline ::rbk::protocol::Message_LaserDevice* Message_Device::_internal_add_laser_devices() {
  return laser_devices_.Add();
}
inline ::rbk::protocol::Message_LaserDevice* Message_Device::add_laser_devices() {
  ::rbk::protocol::Message_LaserDevice* _add = _internal_add_laser_devices();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Device.laser_devices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_LaserDevice >&
Message_Device::laser_devices() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Device.laser_devices)
  return laser_devices_;
}

// repeated double ultrasonic_dist = 6;
inline int Message_Device::_internal_ultrasonic_dist_size() const {
  return ultrasonic_dist_.size();
}
inline int Message_Device::ultrasonic_dist_size() const {
  return _internal_ultrasonic_dist_size();
}
inline void Message_Device::clear_ultrasonic_dist() {
  ultrasonic_dist_.Clear();
}
inline double Message_Device::_internal_ultrasonic_dist(int index) const {
  return ultrasonic_dist_.Get(index);
}
inline double Message_Device::ultrasonic_dist(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Device.ultrasonic_dist)
  return _internal_ultrasonic_dist(index);
}
inline void Message_Device::set_ultrasonic_dist(int index, double value) {
  ultrasonic_dist_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Device.ultrasonic_dist)
}
inline void Message_Device::_internal_add_ultrasonic_dist(double value) {
  ultrasonic_dist_.Add(value);
}
inline void Message_Device::add_ultrasonic_dist(double value) {
  _internal_add_ultrasonic_dist(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Device.ultrasonic_dist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_Device::_internal_ultrasonic_dist() const {
  return ultrasonic_dist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_Device::ultrasonic_dist() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Device.ultrasonic_dist)
  return _internal_ultrasonic_dist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_Device::_internal_mutable_ultrasonic_dist() {
  return &ultrasonic_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_Device::mutable_ultrasonic_dist() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Device.ultrasonic_dist)
  return _internal_mutable_ultrasonic_dist();
}

// repeated double fallingdown_dist = 7;
inline int Message_Device::_internal_fallingdown_dist_size() const {
  return fallingdown_dist_.size();
}
inline int Message_Device::fallingdown_dist_size() const {
  return _internal_fallingdown_dist_size();
}
inline void Message_Device::clear_fallingdown_dist() {
  fallingdown_dist_.Clear();
}
inline double Message_Device::_internal_fallingdown_dist(int index) const {
  return fallingdown_dist_.Get(index);
}
inline double Message_Device::fallingdown_dist(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Device.fallingdown_dist)
  return _internal_fallingdown_dist(index);
}
inline void Message_Device::set_fallingdown_dist(int index, double value) {
  fallingdown_dist_.Set(index, value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Device.fallingdown_dist)
}
inline void Message_Device::_internal_add_fallingdown_dist(double value) {
  fallingdown_dist_.Add(value);
}
inline void Message_Device::add_fallingdown_dist(double value) {
  _internal_add_fallingdown_dist(value);
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Device.fallingdown_dist)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_Device::_internal_fallingdown_dist() const {
  return fallingdown_dist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Message_Device::fallingdown_dist() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Device.fallingdown_dist)
  return _internal_fallingdown_dist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_Device::_internal_mutable_fallingdown_dist() {
  return &fallingdown_dist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Message_Device::mutable_fallingdown_dist() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Device.fallingdown_dist)
  return _internal_mutable_fallingdown_dist();
}

// -------------------------------------------------------------------

// Message_PatrolRouteStation

// string id = 1;
inline void Message_PatrolRouteStation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Message_PatrolRouteStation::id() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRouteStation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_PatrolRouteStation::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_PatrolRouteStation.id)
}
inline std::string* Message_PatrolRouteStation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRouteStation.id)
  return _s;
}
inline const std::string& Message_PatrolRouteStation::_internal_id() const {
  return id_.Get();
}
inline void Message_PatrolRouteStation::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_PatrolRouteStation::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_PatrolRouteStation::release_id() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRouteStation.id)
  return id_.Release();
}
inline void Message_PatrolRouteStation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRouteStation.id)
}

// -------------------------------------------------------------------

// Message_PatrolRoute

// string name = 1;
inline void Message_PatrolRoute::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Message_PatrolRoute::name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_PatrolRoute::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_PatrolRoute.name)
}
inline std::string* Message_PatrolRoute::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.name)
  return _s;
}
inline const std::string& Message_PatrolRoute::_internal_name() const {
  return name_.Get();
}
inline void Message_PatrolRoute::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_PatrolRoute::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_PatrolRoute::release_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.name)
  return name_.Release();
}
inline void Message_PatrolRoute::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.name)
}

// repeated .rbk.protocol.Message_PatrolRouteStation station_list = 2;
inline int Message_PatrolRoute::_internal_station_list_size() const {
  return station_list_.size();
}
inline int Message_PatrolRoute::station_list_size() const {
  return _internal_station_list_size();
}
inline void Message_PatrolRoute::clear_station_list() {
  station_list_.Clear();
}
inline ::rbk::protocol::Message_PatrolRouteStation* Message_PatrolRoute::mutable_station_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.station_list)
  return station_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRouteStation >*
Message_PatrolRoute::mutable_station_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_PatrolRoute.station_list)
  return &station_list_;
}
inline const ::rbk::protocol::Message_PatrolRouteStation& Message_PatrolRoute::_internal_station_list(int index) const {
  return station_list_.Get(index);
}
inline const ::rbk::protocol::Message_PatrolRouteStation& Message_PatrolRoute::station_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.station_list)
  return _internal_station_list(index);
}
inline ::rbk::protocol::Message_PatrolRouteStation* Message_PatrolRoute::_internal_add_station_list() {
  return station_list_.Add();
}
inline ::rbk::protocol::Message_PatrolRouteStation* Message_PatrolRoute::add_station_list() {
  ::rbk::protocol::Message_PatrolRouteStation* _add = _internal_add_station_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_PatrolRoute.station_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRouteStation >&
Message_PatrolRoute::station_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_PatrolRoute.station_list)
  return station_list_;
}

// .google.protobuf.DoubleValue max_speed = 4;
inline bool Message_PatrolRoute::_internal_has_max_speed() const {
  return this != internal_default_instance() && max_speed_ != nullptr;
}
inline bool Message_PatrolRoute::has_max_speed() const {
  return _internal_has_max_speed();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::_internal_max_speed() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_speed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::max_speed() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.max_speed)
  return _internal_max_speed();
}
inline void Message_PatrolRoute::unsafe_arena_set_allocated_max_speed(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_speed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_speed_);
  }
  max_speed_ = max_speed;
  if (max_speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_PatrolRoute.max_speed)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::release_max_speed() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_speed_;
  max_speed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::unsafe_arena_release_max_speed() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.max_speed)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_speed_;
  max_speed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::_internal_mutable_max_speed() {
  
  if (max_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    max_speed_ = p;
  }
  return max_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::mutable_max_speed() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_speed();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.max_speed)
  return _msg;
}
inline void Message_PatrolRoute::set_allocated_max_speed(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_speed_);
  }
  if (max_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_speed));
    if (message_arena != submessage_arena) {
      max_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_speed, submessage_arena);
    }
    
  } else {
    
  }
  max_speed_ = max_speed;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.max_speed)
}

// .google.protobuf.DoubleValue max_acc = 5;
inline bool Message_PatrolRoute::_internal_has_max_acc() const {
  return this != internal_default_instance() && max_acc_ != nullptr;
}
inline bool Message_PatrolRoute::has_max_acc() const {
  return _internal_has_max_acc();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::_internal_max_acc() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_acc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::max_acc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.max_acc)
  return _internal_max_acc();
}
inline void Message_PatrolRoute::unsafe_arena_set_allocated_max_acc(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_acc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_acc_);
  }
  max_acc_ = max_acc;
  if (max_acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_PatrolRoute.max_acc)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::release_max_acc() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_acc_;
  max_acc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::unsafe_arena_release_max_acc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.max_acc)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_acc_;
  max_acc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::_internal_mutable_max_acc() {
  
  if (max_acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    max_acc_ = p;
  }
  return max_acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::mutable_max_acc() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_acc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.max_acc)
  return _msg;
}
inline void Message_PatrolRoute::set_allocated_max_acc(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_acc_);
  }
  if (max_acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_acc));
    if (message_arena != submessage_arena) {
      max_acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_acc, submessage_arena);
    }
    
  } else {
    
  }
  max_acc_ = max_acc;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.max_acc)
}

// .google.protobuf.DoubleValue max_rot = 6;
inline bool Message_PatrolRoute::_internal_has_max_rot() const {
  return this != internal_default_instance() && max_rot_ != nullptr;
}
inline bool Message_PatrolRoute::has_max_rot() const {
  return _internal_has_max_rot();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::_internal_max_rot() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::max_rot() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.max_rot)
  return _internal_max_rot();
}
inline void Message_PatrolRoute::unsafe_arena_set_allocated_max_rot(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_);
  }
  max_rot_ = max_rot;
  if (max_rot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_PatrolRoute.max_rot)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::release_max_rot() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_rot_;
  max_rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::unsafe_arena_release_max_rot() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.max_rot)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_rot_;
  max_rot_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::_internal_mutable_max_rot() {
  
  if (max_rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    max_rot_ = p;
  }
  return max_rot_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::mutable_max_rot() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_rot();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.max_rot)
  return _msg;
}
inline void Message_PatrolRoute::set_allocated_max_rot(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_);
  }
  if (max_rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot));
    if (message_arena != submessage_arena) {
      max_rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_rot, submessage_arena);
    }
    
  } else {
    
  }
  max_rot_ = max_rot;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.max_rot)
}

// .google.protobuf.DoubleValue max_rot_acc = 7;
inline bool Message_PatrolRoute::_internal_has_max_rot_acc() const {
  return this != internal_default_instance() && max_rot_acc_ != nullptr;
}
inline bool Message_PatrolRoute::has_max_rot_acc() const {
  return _internal_has_max_rot_acc();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::_internal_max_rot_acc() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_rot_acc_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::max_rot_acc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.max_rot_acc)
  return _internal_max_rot_acc();
}
inline void Message_PatrolRoute::unsafe_arena_set_allocated_max_rot_acc(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_acc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_acc_);
  }
  max_rot_acc_ = max_rot_acc;
  if (max_rot_acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_PatrolRoute.max_rot_acc)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::release_max_rot_acc() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_rot_acc_;
  max_rot_acc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::unsafe_arena_release_max_rot_acc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.max_rot_acc)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_rot_acc_;
  max_rot_acc_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::_internal_mutable_max_rot_acc() {
  
  if (max_rot_acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    max_rot_acc_ = p;
  }
  return max_rot_acc_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::mutable_max_rot_acc() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_rot_acc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.max_rot_acc)
  return _msg;
}
inline void Message_PatrolRoute::set_allocated_max_rot_acc(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_acc_);
  }
  if (max_rot_acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_acc));
    if (message_arena != submessage_arena) {
      max_rot_acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_rot_acc, submessage_arena);
    }
    
  } else {
    
  }
  max_rot_acc_ = max_rot_acc;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.max_rot_acc)
}

// bytes desc = 8;
inline void Message_PatrolRoute::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_PatrolRoute::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_PatrolRoute::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_PatrolRoute.desc)
}
inline std::string* Message_PatrolRoute::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.desc)
  return _s;
}
inline const std::string& Message_PatrolRoute::_internal_desc() const {
  return desc_.Get();
}
inline void Message_PatrolRoute::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_PatrolRoute::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_PatrolRoute::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.desc)
  return desc_.Release();
}
inline void Message_PatrolRoute::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.desc)
}

// .google.protobuf.DoubleValue max_dec = 9;
inline bool Message_PatrolRoute::_internal_has_max_dec() const {
  return this != internal_default_instance() && max_dec_ != nullptr;
}
inline bool Message_PatrolRoute::has_max_dec() const {
  return _internal_has_max_dec();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::_internal_max_dec() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_dec_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::max_dec() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.max_dec)
  return _internal_max_dec();
}
inline void Message_PatrolRoute::unsafe_arena_set_allocated_max_dec(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_dec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_dec_);
  }
  max_dec_ = max_dec;
  if (max_dec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_PatrolRoute.max_dec)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::release_max_dec() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_dec_;
  max_dec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::unsafe_arena_release_max_dec() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.max_dec)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_dec_;
  max_dec_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::_internal_mutable_max_dec() {
  
  if (max_dec_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    max_dec_ = p;
  }
  return max_dec_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::mutable_max_dec() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_dec();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.max_dec)
  return _msg;
}
inline void Message_PatrolRoute::set_allocated_max_dec(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_dec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_dec_);
  }
  if (max_dec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_dec));
    if (message_arena != submessage_arena) {
      max_dec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_dec, submessage_arena);
    }
    
  } else {
    
  }
  max_dec_ = max_dec;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.max_dec)
}

// .google.protobuf.DoubleValue max_rot_dec = 10;
inline bool Message_PatrolRoute::_internal_has_max_rot_dec() const {
  return this != internal_default_instance() && max_rot_dec_ != nullptr;
}
inline bool Message_PatrolRoute::has_max_rot_dec() const {
  return _internal_has_max_rot_dec();
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::_internal_max_rot_dec() const {
  const ::PROTOBUF_NAMESPACE_ID::DoubleValue* p = max_rot_dec_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::DoubleValue&>(
      ::PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::DoubleValue& Message_PatrolRoute::max_rot_dec() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_PatrolRoute.max_rot_dec)
  return _internal_max_rot_dec();
}
inline void Message_PatrolRoute::unsafe_arena_set_allocated_max_rot_dec(
    ::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_dec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_dec_);
  }
  max_rot_dec_ = max_rot_dec;
  if (max_rot_dec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_PatrolRoute.max_rot_dec)
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::release_max_rot_dec() {
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_rot_dec_;
  max_rot_dec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::unsafe_arena_release_max_rot_dec() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_PatrolRoute.max_rot_dec)
  
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* temp = max_rot_dec_;
  max_rot_dec_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::_internal_mutable_max_rot_dec() {
  
  if (max_rot_dec_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaForAllocation());
    max_rot_dec_ = p;
  }
  return max_rot_dec_;
}
inline ::PROTOBUF_NAMESPACE_ID::DoubleValue* Message_PatrolRoute::mutable_max_rot_dec() {
  ::PROTOBUF_NAMESPACE_ID::DoubleValue* _msg = _internal_mutable_max_rot_dec();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_PatrolRoute.max_rot_dec)
  return _msg;
}
inline void Message_PatrolRoute::set_allocated_max_rot_dec(::PROTOBUF_NAMESPACE_ID::DoubleValue* max_rot_dec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_dec_);
  }
  if (max_rot_dec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_rot_dec));
    if (message_arena != submessage_arena) {
      max_rot_dec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_rot_dec, submessage_arena);
    }
    
  } else {
    
  }
  max_rot_dec_ = max_rot_dec;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_PatrolRoute.max_rot_dec)
}

// -------------------------------------------------------------------

// Message_Primitive

// string class_name = 1;
inline void Message_Primitive::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_Primitive::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Primitive::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Primitive.class_name)
}
inline std::string* Message_Primitive::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.class_name)
  return _s;
}
inline const std::string& Message_Primitive::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_Primitive::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Primitive::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Primitive::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Primitive.class_name)
  return class_name_.Release();
}
inline void Message_Primitive::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Primitive.class_name)
}

// string instance_name = 2;
inline void Message_Primitive::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_Primitive::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Primitive::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Primitive.instance_name)
}
inline std::string* Message_Primitive::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.instance_name)
  return _s;
}
inline const std::string& Message_Primitive::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_Primitive::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Primitive::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Primitive::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Primitive.instance_name)
  return instance_name_.Release();
}
inline void Message_Primitive::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Primitive.instance_name)
}

// .rbk.protocol.Message_AdvancedPoint start_pos = 3;
inline bool Message_Primitive::_internal_has_start_pos() const {
  return this != internal_default_instance() && start_pos_ != nullptr;
}
inline bool Message_Primitive::has_start_pos() const {
  return _internal_has_start_pos();
}
inline void Message_Primitive::clear_start_pos() {
  if (GetArenaForAllocation() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_Primitive::_internal_start_pos() const {
  const ::rbk::protocol::Message_AdvancedPoint* p = start_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_AdvancedPoint&>(
      ::rbk::protocol::_Message_AdvancedPoint_default_instance_);
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_Primitive::start_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.start_pos)
  return _internal_start_pos();
}
inline void Message_Primitive::unsafe_arena_set_allocated_start_pos(
    ::rbk::protocol::Message_AdvancedPoint* start_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_pos_);
  }
  start_pos_ = start_pos;
  if (start_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_Primitive.start_pos)
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::release_start_pos() {
  
  ::rbk::protocol::Message_AdvancedPoint* temp = start_pos_;
  start_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::unsafe_arena_release_start_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Primitive.start_pos)
  
  ::rbk::protocol::Message_AdvancedPoint* temp = start_pos_;
  start_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::_internal_mutable_start_pos() {
  
  if (start_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_AdvancedPoint>(GetArenaForAllocation());
    start_pos_ = p;
  }
  return start_pos_;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::mutable_start_pos() {
  ::rbk::protocol::Message_AdvancedPoint* _msg = _internal_mutable_start_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.start_pos)
  return _msg;
}
inline void Message_Primitive::set_allocated_start_pos(::rbk::protocol::Message_AdvancedPoint* start_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete start_pos_;
  }
  if (start_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start_pos);
    if (message_arena != submessage_arena) {
      start_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_pos, submessage_arena);
    }
    
  } else {
    
  }
  start_pos_ = start_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Primitive.start_pos)
}

// .rbk.protocol.Message_AdvancedPoint end_pos = 4;
inline bool Message_Primitive::_internal_has_end_pos() const {
  return this != internal_default_instance() && end_pos_ != nullptr;
}
inline bool Message_Primitive::has_end_pos() const {
  return _internal_has_end_pos();
}
inline void Message_Primitive::clear_end_pos() {
  if (GetArenaForAllocation() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_Primitive::_internal_end_pos() const {
  const ::rbk::protocol::Message_AdvancedPoint* p = end_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_AdvancedPoint&>(
      ::rbk::protocol::_Message_AdvancedPoint_default_instance_);
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_Primitive::end_pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.end_pos)
  return _internal_end_pos();
}
inline void Message_Primitive::unsafe_arena_set_allocated_end_pos(
    ::rbk::protocol::Message_AdvancedPoint* end_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_pos_);
  }
  end_pos_ = end_pos;
  if (end_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_Primitive.end_pos)
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::release_end_pos() {
  
  ::rbk::protocol::Message_AdvancedPoint* temp = end_pos_;
  end_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::unsafe_arena_release_end_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Primitive.end_pos)
  
  ::rbk::protocol::Message_AdvancedPoint* temp = end_pos_;
  end_pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::_internal_mutable_end_pos() {
  
  if (end_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_AdvancedPoint>(GetArenaForAllocation());
    end_pos_ = p;
  }
  return end_pos_;
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Primitive::mutable_end_pos() {
  ::rbk::protocol::Message_AdvancedPoint* _msg = _internal_mutable_end_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.end_pos)
  return _msg;
}
inline void Message_Primitive::set_allocated_end_pos(::rbk::protocol::Message_AdvancedPoint* end_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete end_pos_;
  }
  if (end_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_pos);
    if (message_arena != submessage_arena) {
      end_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_pos, submessage_arena);
    }
    
  } else {
    
  }
  end_pos_ = end_pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Primitive.end_pos)
}

// repeated .rbk.protocol.Message_MapPos control_pos_list = 5;
inline int Message_Primitive::_internal_control_pos_list_size() const {
  return control_pos_list_.size();
}
inline int Message_Primitive::control_pos_list_size() const {
  return _internal_control_pos_list_size();
}
inline void Message_Primitive::clear_control_pos_list() {
  control_pos_list_.Clear();
}
inline ::rbk::protocol::Message_MapPos* Message_Primitive::mutable_control_pos_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.control_pos_list)
  return control_pos_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
Message_Primitive::mutable_control_pos_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Primitive.control_pos_list)
  return &control_pos_list_;
}
inline const ::rbk::protocol::Message_MapPos& Message_Primitive::_internal_control_pos_list(int index) const {
  return control_pos_list_.Get(index);
}
inline const ::rbk::protocol::Message_MapPos& Message_Primitive::control_pos_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.control_pos_list)
  return _internal_control_pos_list(index);
}
inline ::rbk::protocol::Message_MapPos* Message_Primitive::_internal_add_control_pos_list() {
  return control_pos_list_.Add();
}
inline ::rbk::protocol::Message_MapPos* Message_Primitive::add_control_pos_list() {
  ::rbk::protocol::Message_MapPos* _add = _internal_add_control_pos_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Primitive.control_pos_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
Message_Primitive::control_pos_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Primitive.control_pos_list)
  return control_pos_list_;
}

// repeated .rbk.protocol.Message_MapProperty property = 6;
inline int Message_Primitive::_internal_property_size() const {
  return property_.size();
}
inline int Message_Primitive::property_size() const {
  return _internal_property_size();
}
inline void Message_Primitive::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_Primitive::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_Primitive::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Primitive.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_Primitive::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_Primitive::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_Primitive::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_Primitive::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Primitive.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_Primitive::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Primitive.property)
  return property_;
}

// bytes desc = 7;
inline void Message_Primitive::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_Primitive::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Primitive::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Primitive.desc)
}
inline std::string* Message_Primitive::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.desc)
  return _s;
}
inline const std::string& Message_Primitive::_internal_desc() const {
  return desc_.Get();
}
inline void Message_Primitive::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Primitive::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Primitive::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Primitive.desc)
  return desc_.Release();
}
inline void Message_Primitive::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Primitive.desc)
}

// .rbk.protocol.Message_MapAttribute attribute = 8;
inline bool Message_Primitive::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_Primitive::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_Primitive::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_Primitive::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_Primitive::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Primitive.attribute)
  return _internal_attribute();
}
inline void Message_Primitive::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_Primitive.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_Primitive::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_Primitive::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Primitive.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_Primitive::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_Primitive::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Primitive.attribute)
  return _msg;
}
inline void Message_Primitive::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Primitive.attribute)
}

// -------------------------------------------------------------------

// Message_ExternalDevice

// string class_name = 1;
inline void Message_ExternalDevice::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_ExternalDevice::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ExternalDevice.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_ExternalDevice::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ExternalDevice.class_name)
}
inline std::string* Message_ExternalDevice::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_ExternalDevice.class_name)
  return _s;
}
inline const std::string& Message_ExternalDevice::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_ExternalDevice::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_ExternalDevice::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_ExternalDevice::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_ExternalDevice.class_name)
  return class_name_.Release();
}
inline void Message_ExternalDevice::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_ExternalDevice.class_name)
}

// string instance_name = 2;
inline void Message_ExternalDevice::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_ExternalDevice::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ExternalDevice.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_ExternalDevice::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ExternalDevice.instance_name)
}
inline std::string* Message_ExternalDevice::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_ExternalDevice.instance_name)
  return _s;
}
inline const std::string& Message_ExternalDevice::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_ExternalDevice::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_ExternalDevice::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_ExternalDevice::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_ExternalDevice.instance_name)
  return instance_name_.Release();
}
inline void Message_ExternalDevice::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_ExternalDevice.instance_name)
}

// bool is_enabled = 3;
inline void Message_ExternalDevice::clear_is_enabled() {
  is_enabled_ = false;
}
inline bool Message_ExternalDevice::_internal_is_enabled() const {
  return is_enabled_;
}
inline bool Message_ExternalDevice::is_enabled() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ExternalDevice.is_enabled)
  return _internal_is_enabled();
}
inline void Message_ExternalDevice::_internal_set_is_enabled(bool value) {
  
  is_enabled_ = value;
}
inline void Message_ExternalDevice::set_is_enabled(bool value) {
  _internal_set_is_enabled(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ExternalDevice.is_enabled)
}

// repeated .rbk.protocol.Message_MapProperty property = 4;
inline int Message_ExternalDevice::_internal_property_size() const {
  return property_.size();
}
inline int Message_ExternalDevice::property_size() const {
  return _internal_property_size();
}
inline void Message_ExternalDevice::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_ExternalDevice::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_ExternalDevice.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_ExternalDevice::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_ExternalDevice.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_ExternalDevice::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_ExternalDevice::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ExternalDevice.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_ExternalDevice::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_ExternalDevice::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_ExternalDevice.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_ExternalDevice::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_ExternalDevice.property)
  return property_;
}

// bytes desc = 5;
inline void Message_ExternalDevice::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_ExternalDevice::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ExternalDevice.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_ExternalDevice::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_ExternalDevice.desc)
}
inline std::string* Message_ExternalDevice::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_ExternalDevice.desc)
  return _s;
}
inline const std::string& Message_ExternalDevice::_internal_desc() const {
  return desc_.Get();
}
inline void Message_ExternalDevice::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_ExternalDevice::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_ExternalDevice::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_ExternalDevice.desc)
  return desc_.Release();
}
inline void Message_ExternalDevice::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_ExternalDevice.desc)
}

// .rbk.protocol.Message_MapAttribute attribute = 6;
inline bool Message_ExternalDevice::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_ExternalDevice::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_ExternalDevice::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_ExternalDevice::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_ExternalDevice::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_ExternalDevice.attribute)
  return _internal_attribute();
}
inline void Message_ExternalDevice::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_ExternalDevice.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_ExternalDevice::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_ExternalDevice::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_ExternalDevice.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_ExternalDevice::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_ExternalDevice::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_ExternalDevice.attribute)
  return _msg;
}
inline void Message_ExternalDevice::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_ExternalDevice.attribute)
}

// -------------------------------------------------------------------

// Message_BinLocation

// string class_name = 1;
inline void Message_BinLocation::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Message_BinLocation::class_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BinLocation::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_BinLocation.class_name)
}
inline std::string* Message_BinLocation::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.class_name)
  return _s;
}
inline const std::string& Message_BinLocation::_internal_class_name() const {
  return class_name_.Get();
}
inline void Message_BinLocation::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_BinLocation::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_BinLocation::release_class_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.class_name)
  return class_name_.Release();
}
inline void Message_BinLocation::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.class_name)
}

// string instance_name = 2;
inline void Message_BinLocation::clear_instance_name() {
  instance_name_.ClearToEmpty();
}
inline const std::string& Message_BinLocation::instance_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.instance_name)
  return _internal_instance_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BinLocation::set_instance_name(ArgT0&& arg0, ArgT... args) {
 
 instance_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_BinLocation.instance_name)
}
inline std::string* Message_BinLocation::mutable_instance_name() {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.instance_name)
  return _s;
}
inline const std::string& Message_BinLocation::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void Message_BinLocation::_internal_set_instance_name(const std::string& value) {
  
  instance_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_BinLocation::_internal_mutable_instance_name() {
  
  return instance_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_BinLocation::release_instance_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.instance_name)
  return instance_name_.Release();
}
inline void Message_BinLocation::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    
  } else {
    
  }
  instance_name_.SetAllocated(instance_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_name_.IsDefault()) {
    instance_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.instance_name)
}

// string group_name = 3;
inline void Message_BinLocation::clear_group_name() {
  group_name_.ClearToEmpty();
}
inline const std::string& Message_BinLocation::group_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BinLocation::set_group_name(ArgT0&& arg0, ArgT... args) {
 
 group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_BinLocation.group_name)
}
inline std::string* Message_BinLocation::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.group_name)
  return _s;
}
inline const std::string& Message_BinLocation::_internal_group_name() const {
  return group_name_.Get();
}
inline void Message_BinLocation::_internal_set_group_name(const std::string& value) {
  
  group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_BinLocation::_internal_mutable_group_name() {
  
  return group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_BinLocation::release_group_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.group_name)
  return group_name_.Release();
}
inline void Message_BinLocation::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_name_.IsDefault()) {
    group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.group_name)
}

// string point_name = 4;
inline void Message_BinLocation::clear_point_name() {
  point_name_.ClearToEmpty();
}
inline const std::string& Message_BinLocation::point_name() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.point_name)
  return _internal_point_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BinLocation::set_point_name(ArgT0&& arg0, ArgT... args) {
 
 point_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_BinLocation.point_name)
}
inline std::string* Message_BinLocation::mutable_point_name() {
  std::string* _s = _internal_mutable_point_name();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.point_name)
  return _s;
}
inline const std::string& Message_BinLocation::_internal_point_name() const {
  return point_name_.Get();
}
inline void Message_BinLocation::_internal_set_point_name(const std::string& value) {
  
  point_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_BinLocation::_internal_mutable_point_name() {
  
  return point_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_BinLocation::release_point_name() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.point_name)
  return point_name_.Release();
}
inline void Message_BinLocation::set_allocated_point_name(std::string* point_name) {
  if (point_name != nullptr) {
    
  } else {
    
  }
  point_name_.SetAllocated(point_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (point_name_.IsDefault()) {
    point_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.point_name)
}

// .rbk.protocol.Message_MapPos pos = 5;
inline bool Message_BinLocation::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool Message_BinLocation::has_pos() const {
  return _internal_has_pos();
}
inline void Message_BinLocation::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::rbk::protocol::Message_MapPos& Message_BinLocation::_internal_pos() const {
  const ::rbk::protocol::Message_MapPos* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapPos&>(
      ::rbk::protocol::_Message_MapPos_default_instance_);
}
inline const ::rbk::protocol::Message_MapPos& Message_BinLocation::pos() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.pos)
  return _internal_pos();
}
inline void Message_BinLocation::unsafe_arena_set_allocated_pos(
    ::rbk::protocol::Message_MapPos* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_BinLocation.pos)
}
inline ::rbk::protocol::Message_MapPos* Message_BinLocation::release_pos() {
  
  ::rbk::protocol::Message_MapPos* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_BinLocation::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.pos)
  
  ::rbk::protocol::Message_MapPos* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapPos* Message_BinLocation::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapPos>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::rbk::protocol::Message_MapPos* Message_BinLocation::mutable_pos() {
  ::rbk::protocol::Message_MapPos* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.pos)
  return _msg;
}
inline void Message_BinLocation::set_allocated_pos(::rbk::protocol::Message_MapPos* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.pos)
}

// repeated .rbk.protocol.Message_MapProperty property = 6;
inline int Message_BinLocation::_internal_property_size() const {
  return property_.size();
}
inline int Message_BinLocation::property_size() const {
  return _internal_property_size();
}
inline void Message_BinLocation::clear_property() {
  property_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_BinLocation::mutable_property(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.property)
  return property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_BinLocation::mutable_property() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_BinLocation.property)
  return &property_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_BinLocation::_internal_property(int index) const {
  return property_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_BinLocation::property(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.property)
  return _internal_property(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_BinLocation::_internal_add_property() {
  return property_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_BinLocation::add_property() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_property();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_BinLocation.property)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_BinLocation::property() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_BinLocation.property)
  return property_;
}

// bytes desc = 7;
inline void Message_BinLocation::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& Message_BinLocation::desc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.desc)
  return _internal_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_BinLocation::set_desc(ArgT0&& arg0, ArgT... args) {
 
 desc_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_BinLocation.desc)
}
inline std::string* Message_BinLocation::mutable_desc() {
  std::string* _s = _internal_mutable_desc();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.desc)
  return _s;
}
inline const std::string& Message_BinLocation::_internal_desc() const {
  return desc_.Get();
}
inline void Message_BinLocation::_internal_set_desc(const std::string& value) {
  
  desc_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_BinLocation::_internal_mutable_desc() {
  
  return desc_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_BinLocation::release_desc() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.desc)
  return desc_.Release();
}
inline void Message_BinLocation::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(desc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (desc_.IsDefault()) {
    desc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.desc)
}

// .rbk.protocol.Message_MapAttribute attribute = 8;
inline bool Message_BinLocation::_internal_has_attribute() const {
  return this != internal_default_instance() && attribute_ != nullptr;
}
inline bool Message_BinLocation::has_attribute() const {
  return _internal_has_attribute();
}
inline void Message_BinLocation::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
}
inline const ::rbk::protocol::Message_MapAttribute& Message_BinLocation::_internal_attribute() const {
  const ::rbk::protocol::Message_MapAttribute* p = attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapAttribute&>(
      ::rbk::protocol::_Message_MapAttribute_default_instance_);
}
inline const ::rbk::protocol::Message_MapAttribute& Message_BinLocation::attribute() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocation.attribute)
  return _internal_attribute();
}
inline void Message_BinLocation::unsafe_arena_set_allocated_attribute(
    ::rbk::protocol::Message_MapAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute_);
  }
  attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_BinLocation.attribute)
}
inline ::rbk::protocol::Message_MapAttribute* Message_BinLocation::release_attribute() {
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_BinLocation::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_BinLocation.attribute)
  
  ::rbk::protocol::Message_MapAttribute* temp = attribute_;
  attribute_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapAttribute* Message_BinLocation::_internal_mutable_attribute() {
  
  if (attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapAttribute>(GetArenaForAllocation());
    attribute_ = p;
  }
  return attribute_;
}
inline ::rbk::protocol::Message_MapAttribute* Message_BinLocation::mutable_attribute() {
  ::rbk::protocol::Message_MapAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocation.attribute)
  return _msg;
}
inline void Message_BinLocation::set_allocated_attribute(::rbk::protocol::Message_MapAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_BinLocation.attribute)
}

// -------------------------------------------------------------------

// Message_BinLocations

// repeated .rbk.protocol.Message_BinLocation bin_location_list = 1;
inline int Message_BinLocations::_internal_bin_location_list_size() const {
  return bin_location_list_.size();
}
inline int Message_BinLocations::bin_location_list_size() const {
  return _internal_bin_location_list_size();
}
inline void Message_BinLocations::clear_bin_location_list() {
  bin_location_list_.Clear();
}
inline ::rbk::protocol::Message_BinLocation* Message_BinLocations::mutable_bin_location_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_BinLocations.bin_location_list)
  return bin_location_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocation >*
Message_BinLocations::mutable_bin_location_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_BinLocations.bin_location_list)
  return &bin_location_list_;
}
inline const ::rbk::protocol::Message_BinLocation& Message_BinLocations::_internal_bin_location_list(int index) const {
  return bin_location_list_.Get(index);
}
inline const ::rbk::protocol::Message_BinLocation& Message_BinLocations::bin_location_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_BinLocations.bin_location_list)
  return _internal_bin_location_list(index);
}
inline ::rbk::protocol::Message_BinLocation* Message_BinLocations::_internal_add_bin_location_list() {
  return bin_location_list_.Add();
}
inline ::rbk::protocol::Message_BinLocation* Message_BinLocations::add_bin_location_list() {
  ::rbk::protocol::Message_BinLocation* _add = _internal_add_bin_location_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_BinLocations.bin_location_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocation >&
Message_BinLocations::bin_location_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_BinLocations.bin_location_list)
  return bin_location_list_;
}

// -------------------------------------------------------------------

// Message_Map

// string map_directory = 1;
inline void Message_Map::clear_map_directory() {
  map_directory_.ClearToEmpty();
}
inline const std::string& Message_Map::map_directory() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.map_directory)
  return _internal_map_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Map::set_map_directory(ArgT0&& arg0, ArgT... args) {
 
 map_directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Map.map_directory)
}
inline std::string* Message_Map::mutable_map_directory() {
  std::string* _s = _internal_mutable_map_directory();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.map_directory)
  return _s;
}
inline const std::string& Message_Map::_internal_map_directory() const {
  return map_directory_.Get();
}
inline void Message_Map::_internal_set_map_directory(const std::string& value) {
  
  map_directory_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Map::_internal_mutable_map_directory() {
  
  return map_directory_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Map::release_map_directory() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Map.map_directory)
  return map_directory_.Release();
}
inline void Message_Map::set_allocated_map_directory(std::string* map_directory) {
  if (map_directory != nullptr) {
    
  } else {
    
  }
  map_directory_.SetAllocated(map_directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_directory_.IsDefault()) {
    map_directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Map.map_directory)
}

// .rbk.protocol.Message_MapHeader header = 2;
inline bool Message_Map::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message_Map::has_header() const {
  return _internal_has_header();
}
inline void Message_Map::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::rbk::protocol::Message_MapHeader& Message_Map::_internal_header() const {
  const ::rbk::protocol::Message_MapHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapHeader&>(
      ::rbk::protocol::_Message_MapHeader_default_instance_);
}
inline const ::rbk::protocol::Message_MapHeader& Message_Map::header() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.header)
  return _internal_header();
}
inline void Message_Map::unsafe_arena_set_allocated_header(
    ::rbk::protocol::Message_MapHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_Map.header)
}
inline ::rbk::protocol::Message_MapHeader* Message_Map::release_header() {
  
  ::rbk::protocol::Message_MapHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapHeader* Message_Map::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Map.header)
  
  ::rbk::protocol::Message_MapHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapHeader* Message_Map::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::rbk::protocol::Message_MapHeader* Message_Map::mutable_header() {
  ::rbk::protocol::Message_MapHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.header)
  return _msg;
}
inline void Message_Map::set_allocated_header(::rbk::protocol::Message_MapHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Map.header)
}

// repeated .rbk.protocol.Message_MapPos normal_pos_list = 3;
inline int Message_Map::_internal_normal_pos_list_size() const {
  return normal_pos_list_.size();
}
inline int Message_Map::normal_pos_list_size() const {
  return _internal_normal_pos_list_size();
}
inline void Message_Map::clear_normal_pos_list() {
  normal_pos_list_.Clear();
}
inline ::rbk::protocol::Message_MapPos* Message_Map::mutable_normal_pos_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.normal_pos_list)
  return normal_pos_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
Message_Map::mutable_normal_pos_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.normal_pos_list)
  return &normal_pos_list_;
}
inline const ::rbk::protocol::Message_MapPos& Message_Map::_internal_normal_pos_list(int index) const {
  return normal_pos_list_.Get(index);
}
inline const ::rbk::protocol::Message_MapPos& Message_Map::normal_pos_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.normal_pos_list)
  return _internal_normal_pos_list(index);
}
inline ::rbk::protocol::Message_MapPos* Message_Map::_internal_add_normal_pos_list() {
  return normal_pos_list_.Add();
}
inline ::rbk::protocol::Message_MapPos* Message_Map::add_normal_pos_list() {
  ::rbk::protocol::Message_MapPos* _add = _internal_add_normal_pos_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.normal_pos_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
Message_Map::normal_pos_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.normal_pos_list)
  return normal_pos_list_;
}

// repeated .rbk.protocol.Message_MapLine normal_line_list = 4;
inline int Message_Map::_internal_normal_line_list_size() const {
  return normal_line_list_.size();
}
inline int Message_Map::normal_line_list_size() const {
  return _internal_normal_line_list_size();
}
inline void Message_Map::clear_normal_line_list() {
  normal_line_list_.Clear();
}
inline ::rbk::protocol::Message_MapLine* Message_Map::mutable_normal_line_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.normal_line_list)
  return normal_line_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >*
Message_Map::mutable_normal_line_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.normal_line_list)
  return &normal_line_list_;
}
inline const ::rbk::protocol::Message_MapLine& Message_Map::_internal_normal_line_list(int index) const {
  return normal_line_list_.Get(index);
}
inline const ::rbk::protocol::Message_MapLine& Message_Map::normal_line_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.normal_line_list)
  return _internal_normal_line_list(index);
}
inline ::rbk::protocol::Message_MapLine* Message_Map::_internal_add_normal_line_list() {
  return normal_line_list_.Add();
}
inline ::rbk::protocol::Message_MapLine* Message_Map::add_normal_line_list() {
  ::rbk::protocol::Message_MapLine* _add = _internal_add_normal_line_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.normal_line_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapLine >&
Message_Map::normal_line_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.normal_line_list)
  return normal_line_list_;
}

// repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 5;
inline int Message_Map::_internal_normal_pos3d_list_size() const {
  return normal_pos3d_list_.size();
}
inline int Message_Map::normal_pos3d_list_size() const {
  return _internal_normal_pos3d_list_size();
}
inline void Message_Map::clear_normal_pos3d_list() {
  normal_pos3d_list_.Clear();
}
inline ::rbk::protocol::Message_MapPos* Message_Map::mutable_normal_pos3d_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.normal_pos3d_list)
  return normal_pos3d_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
Message_Map::mutable_normal_pos3d_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.normal_pos3d_list)
  return &normal_pos3d_list_;
}
inline const ::rbk::protocol::Message_MapPos& Message_Map::_internal_normal_pos3d_list(int index) const {
  return normal_pos3d_list_.Get(index);
}
inline const ::rbk::protocol::Message_MapPos& Message_Map::normal_pos3d_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.normal_pos3d_list)
  return _internal_normal_pos3d_list(index);
}
inline ::rbk::protocol::Message_MapPos* Message_Map::_internal_add_normal_pos3d_list() {
  return normal_pos3d_list_.Add();
}
inline ::rbk::protocol::Message_MapPos* Message_Map::add_normal_pos3d_list() {
  ::rbk::protocol::Message_MapPos* _add = _internal_add_normal_pos3d_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.normal_pos3d_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
Message_Map::normal_pos3d_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.normal_pos3d_list)
  return normal_pos3d_list_;
}

// repeated .rbk.protocol.Message_AdvancedPoint advanced_point_list = 6;
inline int Message_Map::_internal_advanced_point_list_size() const {
  return advanced_point_list_.size();
}
inline int Message_Map::advanced_point_list_size() const {
  return _internal_advanced_point_list_size();
}
inline void Message_Map::clear_advanced_point_list() {
  advanced_point_list_.Clear();
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Map::mutable_advanced_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.advanced_point_list)
  return advanced_point_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedPoint >*
Message_Map::mutable_advanced_point_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.advanced_point_list)
  return &advanced_point_list_;
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_Map::_internal_advanced_point_list(int index) const {
  return advanced_point_list_.Get(index);
}
inline const ::rbk::protocol::Message_AdvancedPoint& Message_Map::advanced_point_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.advanced_point_list)
  return _internal_advanced_point_list(index);
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Map::_internal_add_advanced_point_list() {
  return advanced_point_list_.Add();
}
inline ::rbk::protocol::Message_AdvancedPoint* Message_Map::add_advanced_point_list() {
  ::rbk::protocol::Message_AdvancedPoint* _add = _internal_add_advanced_point_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.advanced_point_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedPoint >&
Message_Map::advanced_point_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.advanced_point_list)
  return advanced_point_list_;
}

// repeated .rbk.protocol.Message_AdvancedLine advanced_line_list = 7;
inline int Message_Map::_internal_advanced_line_list_size() const {
  return advanced_line_list_.size();
}
inline int Message_Map::advanced_line_list_size() const {
  return _internal_advanced_line_list_size();
}
inline void Message_Map::clear_advanced_line_list() {
  advanced_line_list_.Clear();
}
inline ::rbk::protocol::Message_AdvancedLine* Message_Map::mutable_advanced_line_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.advanced_line_list)
  return advanced_line_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedLine >*
Message_Map::mutable_advanced_line_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.advanced_line_list)
  return &advanced_line_list_;
}
inline const ::rbk::protocol::Message_AdvancedLine& Message_Map::_internal_advanced_line_list(int index) const {
  return advanced_line_list_.Get(index);
}
inline const ::rbk::protocol::Message_AdvancedLine& Message_Map::advanced_line_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.advanced_line_list)
  return _internal_advanced_line_list(index);
}
inline ::rbk::protocol::Message_AdvancedLine* Message_Map::_internal_add_advanced_line_list() {
  return advanced_line_list_.Add();
}
inline ::rbk::protocol::Message_AdvancedLine* Message_Map::add_advanced_line_list() {
  ::rbk::protocol::Message_AdvancedLine* _add = _internal_add_advanced_line_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.advanced_line_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedLine >&
Message_Map::advanced_line_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.advanced_line_list)
  return advanced_line_list_;
}

// repeated .rbk.protocol.Message_AdvancedCurve advanced_curve_list = 8;
inline int Message_Map::_internal_advanced_curve_list_size() const {
  return advanced_curve_list_.size();
}
inline int Message_Map::advanced_curve_list_size() const {
  return _internal_advanced_curve_list_size();
}
inline void Message_Map::clear_advanced_curve_list() {
  advanced_curve_list_.Clear();
}
inline ::rbk::protocol::Message_AdvancedCurve* Message_Map::mutable_advanced_curve_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.advanced_curve_list)
  return advanced_curve_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedCurve >*
Message_Map::mutable_advanced_curve_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.advanced_curve_list)
  return &advanced_curve_list_;
}
inline const ::rbk::protocol::Message_AdvancedCurve& Message_Map::_internal_advanced_curve_list(int index) const {
  return advanced_curve_list_.Get(index);
}
inline const ::rbk::protocol::Message_AdvancedCurve& Message_Map::advanced_curve_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.advanced_curve_list)
  return _internal_advanced_curve_list(index);
}
inline ::rbk::protocol::Message_AdvancedCurve* Message_Map::_internal_add_advanced_curve_list() {
  return advanced_curve_list_.Add();
}
inline ::rbk::protocol::Message_AdvancedCurve* Message_Map::add_advanced_curve_list() {
  ::rbk::protocol::Message_AdvancedCurve* _add = _internal_add_advanced_curve_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.advanced_curve_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedCurve >&
Message_Map::advanced_curve_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.advanced_curve_list)
  return advanced_curve_list_;
}

// repeated .rbk.protocol.Message_AdvancedArea advanced_area_list = 9;
inline int Message_Map::_internal_advanced_area_list_size() const {
  return advanced_area_list_.size();
}
inline int Message_Map::advanced_area_list_size() const {
  return _internal_advanced_area_list_size();
}
inline void Message_Map::clear_advanced_area_list() {
  advanced_area_list_.Clear();
}
inline ::rbk::protocol::Message_AdvancedArea* Message_Map::mutable_advanced_area_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.advanced_area_list)
  return advanced_area_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedArea >*
Message_Map::mutable_advanced_area_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.advanced_area_list)
  return &advanced_area_list_;
}
inline const ::rbk::protocol::Message_AdvancedArea& Message_Map::_internal_advanced_area_list(int index) const {
  return advanced_area_list_.Get(index);
}
inline const ::rbk::protocol::Message_AdvancedArea& Message_Map::advanced_area_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.advanced_area_list)
  return _internal_advanced_area_list(index);
}
inline ::rbk::protocol::Message_AdvancedArea* Message_Map::_internal_add_advanced_area_list() {
  return advanced_area_list_.Add();
}
inline ::rbk::protocol::Message_AdvancedArea* Message_Map::add_advanced_area_list() {
  ::rbk::protocol::Message_AdvancedArea* _add = _internal_add_advanced_area_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.advanced_area_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_AdvancedArea >&
Message_Map::advanced_area_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.advanced_area_list)
  return advanced_area_list_;
}

// repeated .rbk.protocol.Message_PatrolRoute patrol_route_list = 10;
inline int Message_Map::_internal_patrol_route_list_size() const {
  return patrol_route_list_.size();
}
inline int Message_Map::patrol_route_list_size() const {
  return _internal_patrol_route_list_size();
}
inline void Message_Map::clear_patrol_route_list() {
  patrol_route_list_.Clear();
}
inline ::rbk::protocol::Message_PatrolRoute* Message_Map::mutable_patrol_route_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.patrol_route_list)
  return patrol_route_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRoute >*
Message_Map::mutable_patrol_route_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.patrol_route_list)
  return &patrol_route_list_;
}
inline const ::rbk::protocol::Message_PatrolRoute& Message_Map::_internal_patrol_route_list(int index) const {
  return patrol_route_list_.Get(index);
}
inline const ::rbk::protocol::Message_PatrolRoute& Message_Map::patrol_route_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.patrol_route_list)
  return _internal_patrol_route_list(index);
}
inline ::rbk::protocol::Message_PatrolRoute* Message_Map::_internal_add_patrol_route_list() {
  return patrol_route_list_.Add();
}
inline ::rbk::protocol::Message_PatrolRoute* Message_Map::add_patrol_route_list() {
  ::rbk::protocol::Message_PatrolRoute* _add = _internal_add_patrol_route_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.patrol_route_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_PatrolRoute >&
Message_Map::patrol_route_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.patrol_route_list)
  return patrol_route_list_;
}

// repeated .rbk.protocol.Message_MapRSSIPos rssi_pos_list = 11;
inline int Message_Map::_internal_rssi_pos_list_size() const {
  return rssi_pos_list_.size();
}
inline int Message_Map::rssi_pos_list_size() const {
  return _internal_rssi_pos_list_size();
}
inline void Message_Map::clear_rssi_pos_list() {
  rssi_pos_list_.Clear();
}
inline ::rbk::protocol::Message_MapRSSIPos* Message_Map::mutable_rssi_pos_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.rssi_pos_list)
  return rssi_pos_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapRSSIPos >*
Message_Map::mutable_rssi_pos_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.rssi_pos_list)
  return &rssi_pos_list_;
}
inline const ::rbk::protocol::Message_MapRSSIPos& Message_Map::_internal_rssi_pos_list(int index) const {
  return rssi_pos_list_.Get(index);
}
inline const ::rbk::protocol::Message_MapRSSIPos& Message_Map::rssi_pos_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.rssi_pos_list)
  return _internal_rssi_pos_list(index);
}
inline ::rbk::protocol::Message_MapRSSIPos* Message_Map::_internal_add_rssi_pos_list() {
  return rssi_pos_list_.Add();
}
inline ::rbk::protocol::Message_MapRSSIPos* Message_Map::add_rssi_pos_list() {
  ::rbk::protocol::Message_MapRSSIPos* _add = _internal_add_rssi_pos_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.rssi_pos_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapRSSIPos >&
Message_Map::rssi_pos_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.rssi_pos_list)
  return rssi_pos_list_;
}

// repeated .rbk.protocol.Message_ReflectorPos reflector_pos_list = 12;
inline int Message_Map::_internal_reflector_pos_list_size() const {
  return reflector_pos_list_.size();
}
inline int Message_Map::reflector_pos_list_size() const {
  return _internal_reflector_pos_list_size();
}
inline void Message_Map::clear_reflector_pos_list() {
  reflector_pos_list_.Clear();
}
inline ::rbk::protocol::Message_ReflectorPos* Message_Map::mutable_reflector_pos_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.reflector_pos_list)
  return reflector_pos_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >*
Message_Map::mutable_reflector_pos_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.reflector_pos_list)
  return &reflector_pos_list_;
}
inline const ::rbk::protocol::Message_ReflectorPos& Message_Map::_internal_reflector_pos_list(int index) const {
  return reflector_pos_list_.Get(index);
}
inline const ::rbk::protocol::Message_ReflectorPos& Message_Map::reflector_pos_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.reflector_pos_list)
  return _internal_reflector_pos_list(index);
}
inline ::rbk::protocol::Message_ReflectorPos* Message_Map::_internal_add_reflector_pos_list() {
  return reflector_pos_list_.Add();
}
inline ::rbk::protocol::Message_ReflectorPos* Message_Map::add_reflector_pos_list() {
  ::rbk::protocol::Message_ReflectorPos* _add = _internal_add_reflector_pos_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.reflector_pos_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ReflectorPos >&
Message_Map::reflector_pos_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.reflector_pos_list)
  return reflector_pos_list_;
}

// repeated .rbk.protocol.Message_tagPos tag_pos_list = 13;
inline int Message_Map::_internal_tag_pos_list_size() const {
  return tag_pos_list_.size();
}
inline int Message_Map::tag_pos_list_size() const {
  return _internal_tag_pos_list_size();
}
inline void Message_Map::clear_tag_pos_list() {
  tag_pos_list_.Clear();
}
inline ::rbk::protocol::Message_tagPos* Message_Map::mutable_tag_pos_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.tag_pos_list)
  return tag_pos_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_tagPos >*
Message_Map::mutable_tag_pos_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.tag_pos_list)
  return &tag_pos_list_;
}
inline const ::rbk::protocol::Message_tagPos& Message_Map::_internal_tag_pos_list(int index) const {
  return tag_pos_list_.Get(index);
}
inline const ::rbk::protocol::Message_tagPos& Message_Map::tag_pos_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.tag_pos_list)
  return _internal_tag_pos_list(index);
}
inline ::rbk::protocol::Message_tagPos* Message_Map::_internal_add_tag_pos_list() {
  return tag_pos_list_.Add();
}
inline ::rbk::protocol::Message_tagPos* Message_Map::add_tag_pos_list() {
  ::rbk::protocol::Message_tagPos* _add = _internal_add_tag_pos_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.tag_pos_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_tagPos >&
Message_Map::tag_pos_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.tag_pos_list)
  return tag_pos_list_;
}

// repeated .rbk.protocol.Message_Primitive primitive_list = 14;
inline int Message_Map::_internal_primitive_list_size() const {
  return primitive_list_.size();
}
inline int Message_Map::primitive_list_size() const {
  return _internal_primitive_list_size();
}
inline void Message_Map::clear_primitive_list() {
  primitive_list_.Clear();
}
inline ::rbk::protocol::Message_Primitive* Message_Map::mutable_primitive_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.primitive_list)
  return primitive_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Primitive >*
Message_Map::mutable_primitive_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.primitive_list)
  return &primitive_list_;
}
inline const ::rbk::protocol::Message_Primitive& Message_Map::_internal_primitive_list(int index) const {
  return primitive_list_.Get(index);
}
inline const ::rbk::protocol::Message_Primitive& Message_Map::primitive_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.primitive_list)
  return _internal_primitive_list(index);
}
inline ::rbk::protocol::Message_Primitive* Message_Map::_internal_add_primitive_list() {
  return primitive_list_.Add();
}
inline ::rbk::protocol::Message_Primitive* Message_Map::add_primitive_list() {
  ::rbk::protocol::Message_Primitive* _add = _internal_add_primitive_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.primitive_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_Primitive >&
Message_Map::primitive_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.primitive_list)
  return primitive_list_;
}

// repeated .rbk.protocol.Message_ExternalDevice external_device_list = 15;
inline int Message_Map::_internal_external_device_list_size() const {
  return external_device_list_.size();
}
inline int Message_Map::external_device_list_size() const {
  return _internal_external_device_list_size();
}
inline void Message_Map::clear_external_device_list() {
  external_device_list_.Clear();
}
inline ::rbk::protocol::Message_ExternalDevice* Message_Map::mutable_external_device_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.external_device_list)
  return external_device_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ExternalDevice >*
Message_Map::mutable_external_device_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.external_device_list)
  return &external_device_list_;
}
inline const ::rbk::protocol::Message_ExternalDevice& Message_Map::_internal_external_device_list(int index) const {
  return external_device_list_.Get(index);
}
inline const ::rbk::protocol::Message_ExternalDevice& Message_Map::external_device_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.external_device_list)
  return _internal_external_device_list(index);
}
inline ::rbk::protocol::Message_ExternalDevice* Message_Map::_internal_add_external_device_list() {
  return external_device_list_.Add();
}
inline ::rbk::protocol::Message_ExternalDevice* Message_Map::add_external_device_list() {
  ::rbk::protocol::Message_ExternalDevice* _add = _internal_add_external_device_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.external_device_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_ExternalDevice >&
Message_Map::external_device_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.external_device_list)
  return external_device_list_;
}

// repeated .rbk.protocol.Message_BinLocations bin_locations_list = 16;
inline int Message_Map::_internal_bin_locations_list_size() const {
  return bin_locations_list_.size();
}
inline int Message_Map::bin_locations_list_size() const {
  return _internal_bin_locations_list_size();
}
inline void Message_Map::clear_bin_locations_list() {
  bin_locations_list_.Clear();
}
inline ::rbk::protocol::Message_BinLocations* Message_Map::mutable_bin_locations_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.bin_locations_list)
  return bin_locations_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocations >*
Message_Map::mutable_bin_locations_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.bin_locations_list)
  return &bin_locations_list_;
}
inline const ::rbk::protocol::Message_BinLocations& Message_Map::_internal_bin_locations_list(int index) const {
  return bin_locations_list_.Get(index);
}
inline const ::rbk::protocol::Message_BinLocations& Message_Map::bin_locations_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.bin_locations_list)
  return _internal_bin_locations_list(index);
}
inline ::rbk::protocol::Message_BinLocations* Message_Map::_internal_add_bin_locations_list() {
  return bin_locations_list_.Add();
}
inline ::rbk::protocol::Message_BinLocations* Message_Map::add_bin_locations_list() {
  ::rbk::protocol::Message_BinLocations* _add = _internal_add_bin_locations_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.bin_locations_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_BinLocations >&
Message_Map::bin_locations_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.bin_locations_list)
  return bin_locations_list_;
}

// repeated .rbk.protocol.Message_MapProperty user_data = 100;
inline int Message_Map::_internal_user_data_size() const {
  return user_data_.size();
}
inline int Message_Map::user_data_size() const {
  return _internal_user_data_size();
}
inline void Message_Map::clear_user_data() {
  user_data_.Clear();
}
inline ::rbk::protocol::Message_MapProperty* Message_Map::mutable_user_data(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map.user_data)
  return user_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >*
Message_Map::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map.user_data)
  return &user_data_;
}
inline const ::rbk::protocol::Message_MapProperty& Message_Map::_internal_user_data(int index) const {
  return user_data_.Get(index);
}
inline const ::rbk::protocol::Message_MapProperty& Message_Map::user_data(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map.user_data)
  return _internal_user_data(index);
}
inline ::rbk::protocol::Message_MapProperty* Message_Map::_internal_add_user_data() {
  return user_data_.Add();
}
inline ::rbk::protocol::Message_MapProperty* Message_Map::add_user_data() {
  ::rbk::protocol::Message_MapProperty* _add = _internal_add_user_data();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map.user_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapProperty >&
Message_Map::user_data() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map.user_data)
  return user_data_;
}

// -------------------------------------------------------------------

// Message_Map3D

// string map_directory = 1;
inline void Message_Map3D::clear_map_directory() {
  map_directory_.ClearToEmpty();
}
inline const std::string& Message_Map3D::map_directory() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map3D.map_directory)
  return _internal_map_directory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_Map3D::set_map_directory(ArgT0&& arg0, ArgT... args) {
 
 map_directory_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_Map3D.map_directory)
}
inline std::string* Message_Map3D::mutable_map_directory() {
  std::string* _s = _internal_mutable_map_directory();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map3D.map_directory)
  return _s;
}
inline const std::string& Message_Map3D::_internal_map_directory() const {
  return map_directory_.Get();
}
inline void Message_Map3D::_internal_set_map_directory(const std::string& value) {
  
  map_directory_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_Map3D::_internal_mutable_map_directory() {
  
  return map_directory_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_Map3D::release_map_directory() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Map3D.map_directory)
  return map_directory_.Release();
}
inline void Message_Map3D::set_allocated_map_directory(std::string* map_directory) {
  if (map_directory != nullptr) {
    
  } else {
    
  }
  map_directory_.SetAllocated(map_directory, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (map_directory_.IsDefault()) {
    map_directory_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Map3D.map_directory)
}

// .rbk.protocol.Message_MapHeader header = 2;
inline bool Message_Map3D::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message_Map3D::has_header() const {
  return _internal_has_header();
}
inline void Message_Map3D::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::rbk::protocol::Message_MapHeader& Message_Map3D::_internal_header() const {
  const ::rbk::protocol::Message_MapHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_MapHeader&>(
      ::rbk::protocol::_Message_MapHeader_default_instance_);
}
inline const ::rbk::protocol::Message_MapHeader& Message_Map3D::header() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map3D.header)
  return _internal_header();
}
inline void Message_Map3D::unsafe_arena_set_allocated_header(
    ::rbk::protocol::Message_MapHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_Map3D.header)
}
inline ::rbk::protocol::Message_MapHeader* Message_Map3D::release_header() {
  
  ::rbk::protocol::Message_MapHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_MapHeader* Message_Map3D::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_Map3D.header)
  
  ::rbk::protocol::Message_MapHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_MapHeader* Message_Map3D::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_MapHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::rbk::protocol::Message_MapHeader* Message_Map3D::mutable_header() {
  ::rbk::protocol::Message_MapHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map3D.header)
  return _msg;
}
inline void Message_Map3D::set_allocated_header(::rbk::protocol::Message_MapHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_Map3D.header)
}

// repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 3;
inline int Message_Map3D::_internal_normal_pos3d_list_size() const {
  return normal_pos3d_list_.size();
}
inline int Message_Map3D::normal_pos3d_list_size() const {
  return _internal_normal_pos3d_list_size();
}
inline void Message_Map3D::clear_normal_pos3d_list() {
  normal_pos3d_list_.Clear();
}
inline ::rbk::protocol::Message_MapPos* Message_Map3D::mutable_normal_pos3d_list(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_Map3D.normal_pos3d_list)
  return normal_pos3d_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >*
Message_Map3D::mutable_normal_pos3d_list() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_Map3D.normal_pos3d_list)
  return &normal_pos3d_list_;
}
inline const ::rbk::protocol::Message_MapPos& Message_Map3D::_internal_normal_pos3d_list(int index) const {
  return normal_pos3d_list_.Get(index);
}
inline const ::rbk::protocol::Message_MapPos& Message_Map3D::normal_pos3d_list(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_Map3D.normal_pos3d_list)
  return _internal_normal_pos3d_list(index);
}
inline ::rbk::protocol::Message_MapPos* Message_Map3D::_internal_add_normal_pos3d_list() {
  return normal_pos3d_list_.Add();
}
inline ::rbk::protocol::Message_MapPos* Message_Map3D::add_normal_pos3d_list() {
  ::rbk::protocol::Message_MapPos* _add = _internal_add_normal_pos3d_list();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_Map3D.normal_pos3d_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_MapPos >&
Message_Map3D::normal_pos3d_list() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_Map3D.normal_pos3d_list)
  return normal_pos3d_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rbk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fmap_2eproto
