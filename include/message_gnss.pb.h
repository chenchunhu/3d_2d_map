// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_gnss.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fgnss_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fgnss_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message_header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fgnss_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fgnss_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fgnss_2eproto;
namespace rbk {
namespace protocol {
class Message_AllGNSS;
struct Message_AllGNSSDefaultTypeInternal;
extern Message_AllGNSSDefaultTypeInternal _Message_AllGNSS_default_instance_;
class Message_GNSS;
struct Message_GNSSDefaultTypeInternal;
extern Message_GNSSDefaultTypeInternal _Message_GNSS_default_instance_;
class Message_GnssInstallInfo;
struct Message_GnssInstallInfoDefaultTypeInternal;
extern Message_GnssInstallInfoDefaultTypeInternal _Message_GnssInstallInfo_default_instance_;
class Message_GnssRefInfo;
struct Message_GnssRefInfoDefaultTypeInternal;
extern Message_GnssRefInfoDefaultTypeInternal _Message_GnssRefInfo_default_instance_;
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> ::rbk::protocol::Message_AllGNSS* Arena::CreateMaybeMessage<::rbk::protocol::Message_AllGNSS>(Arena*);
template<> ::rbk::protocol::Message_GNSS* Arena::CreateMaybeMessage<::rbk::protocol::Message_GNSS>(Arena*);
template<> ::rbk::protocol::Message_GnssInstallInfo* Arena::CreateMaybeMessage<::rbk::protocol::Message_GnssInstallInfo>(Arena*);
template<> ::rbk::protocol::Message_GnssRefInfo* Arena::CreateMaybeMessage<::rbk::protocol::Message_GnssRefInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rbk {
namespace protocol {

// ===================================================================

class Message_GnssInstallInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_GnssInstallInfo) */ {
 public:
  inline Message_GnssInstallInfo() : Message_GnssInstallInfo(nullptr) {}
  ~Message_GnssInstallInfo() override;
  explicit PROTOBUF_CONSTEXPR Message_GnssInstallInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_GnssInstallInfo(const Message_GnssInstallInfo& from);
  Message_GnssInstallInfo(Message_GnssInstallInfo&& from) noexcept
    : Message_GnssInstallInfo() {
    *this = ::std::move(from);
  }

  inline Message_GnssInstallInfo& operator=(const Message_GnssInstallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_GnssInstallInfo& operator=(Message_GnssInstallInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_GnssInstallInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_GnssInstallInfo* internal_default_instance() {
    return reinterpret_cast<const Message_GnssInstallInfo*>(
               &_Message_GnssInstallInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_GnssInstallInfo& a, Message_GnssInstallInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_GnssInstallInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_GnssInstallInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_GnssInstallInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_GnssInstallInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_GnssInstallInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_GnssInstallInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_GnssInstallInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_GnssInstallInfo";
  }
  protected:
  explicit Message_GnssInstallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double yaw = 4;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_GnssInstallInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class Message_GnssRefInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_GnssRefInfo) */ {
 public:
  inline Message_GnssRefInfo() : Message_GnssRefInfo(nullptr) {}
  ~Message_GnssRefInfo() override;
  explicit PROTOBUF_CONSTEXPR Message_GnssRefInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_GnssRefInfo(const Message_GnssRefInfo& from);
  Message_GnssRefInfo(Message_GnssRefInfo&& from) noexcept
    : Message_GnssRefInfo() {
    *this = ::std::move(from);
  }

  inline Message_GnssRefInfo& operator=(const Message_GnssRefInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_GnssRefInfo& operator=(Message_GnssRefInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_GnssRefInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_GnssRefInfo* internal_default_instance() {
    return reinterpret_cast<const Message_GnssRefInfo*>(
               &_Message_GnssRefInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_GnssRefInfo& a, Message_GnssRefInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_GnssRefInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_GnssRefInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_GnssRefInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_GnssRefInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_GnssRefInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_GnssRefInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_GnssRefInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_GnssRefInfo";
  }
  protected:
  explicit Message_GnssRefInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_GnssRefInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class Message_GNSS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_GNSS) */ {
 public:
  inline Message_GNSS() : Message_GNSS(nullptr) {}
  ~Message_GNSS() override;
  explicit PROTOBUF_CONSTEXPR Message_GNSS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_GNSS(const Message_GNSS& from);
  Message_GNSS(Message_GNSS&& from) noexcept
    : Message_GNSS() {
    *this = ::std::move(from);
  }

  inline Message_GNSS& operator=(const Message_GNSS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_GNSS& operator=(Message_GNSS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_GNSS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_GNSS* internal_default_instance() {
    return reinterpret_cast<const Message_GNSS*>(
               &_Message_GNSS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_GNSS& a, Message_GNSS& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_GNSS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_GNSS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_GNSS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_GNSS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_GNSS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_GNSS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_GNSS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_GNSS";
  }
  protected:
  explicit Message_GNSS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInstallInfoFieldNumber = 13,
    kRefInfoFieldNumber = 14,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kZFieldNumber = 5,
    kUbx2DAccHFieldNumber = 7,
    kUbx2DAccVFieldNumber = 8,
    kUbx3DAccFieldNumber = 9,
    kLongitudeFieldNumber = 10,
    kLatitudeFieldNumber = 11,
    kAltitudeFieldNumber = 12,
    kEnuXFieldNumber = 15,
    kEnuYFieldNumber = 16,
    kHeadingFieldNumber = 17,
    kStatusFieldNumber = 2,
  };
  // .rbk.protocol.Message_Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::rbk::protocol::Message_Header& header() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_Header* release_header();
  ::rbk::protocol::Message_Header* mutable_header();
  void set_allocated_header(::rbk::protocol::Message_Header* header);
  private:
  const ::rbk::protocol::Message_Header& _internal_header() const;
  ::rbk::protocol::Message_Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::rbk::protocol::Message_Header* header);
  ::rbk::protocol::Message_Header* unsafe_arena_release_header();

  // .rbk.protocol.Message_GnssInstallInfo install_info = 13;
  bool has_install_info() const;
  private:
  bool _internal_has_install_info() const;
  public:
  void clear_install_info();
  const ::rbk::protocol::Message_GnssInstallInfo& install_info() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_GnssInstallInfo* release_install_info();
  ::rbk::protocol::Message_GnssInstallInfo* mutable_install_info();
  void set_allocated_install_info(::rbk::protocol::Message_GnssInstallInfo* install_info);
  private:
  const ::rbk::protocol::Message_GnssInstallInfo& _internal_install_info() const;
  ::rbk::protocol::Message_GnssInstallInfo* _internal_mutable_install_info();
  public:
  void unsafe_arena_set_allocated_install_info(
      ::rbk::protocol::Message_GnssInstallInfo* install_info);
  ::rbk::protocol::Message_GnssInstallInfo* unsafe_arena_release_install_info();

  // .rbk.protocol.Message_GnssRefInfo ref_info = 14;
  bool has_ref_info() const;
  private:
  bool _internal_has_ref_info() const;
  public:
  void clear_ref_info();
  const ::rbk::protocol::Message_GnssRefInfo& ref_info() const;
  PROTOBUF_NODISCARD ::rbk::protocol::Message_GnssRefInfo* release_ref_info();
  ::rbk::protocol::Message_GnssRefInfo* mutable_ref_info();
  void set_allocated_ref_info(::rbk::protocol::Message_GnssRefInfo* ref_info);
  private:
  const ::rbk::protocol::Message_GnssRefInfo& _internal_ref_info() const;
  ::rbk::protocol::Message_GnssRefInfo* _internal_mutable_ref_info();
  public:
  void unsafe_arena_set_allocated_ref_info(
      ::rbk::protocol::Message_GnssRefInfo* ref_info);
  ::rbk::protocol::Message_GnssRefInfo* unsafe_arena_release_ref_info();

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 5;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double ubx_2d_acc_h = 7;
  void clear_ubx_2d_acc_h();
  double ubx_2d_acc_h() const;
  void set_ubx_2d_acc_h(double value);
  private:
  double _internal_ubx_2d_acc_h() const;
  void _internal_set_ubx_2d_acc_h(double value);
  public:

  // double ubx_2d_acc_v = 8;
  void clear_ubx_2d_acc_v();
  double ubx_2d_acc_v() const;
  void set_ubx_2d_acc_v(double value);
  private:
  double _internal_ubx_2d_acc_v() const;
  void _internal_set_ubx_2d_acc_v(double value);
  public:

  // double ubx_3d_acc = 9;
  void clear_ubx_3d_acc();
  double ubx_3d_acc() const;
  void set_ubx_3d_acc(double value);
  private:
  double _internal_ubx_3d_acc() const;
  void _internal_set_ubx_3d_acc(double value);
  public:

  // double longitude = 10;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 11;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 12;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // double enu_x = 15;
  void clear_enu_x();
  double enu_x() const;
  void set_enu_x(double value);
  private:
  double _internal_enu_x() const;
  void _internal_set_enu_x(double value);
  public:

  // double enu_y = 16;
  void clear_enu_y();
  double enu_y() const;
  void set_enu_y(double value);
  private:
  double _internal_enu_y() const;
  void _internal_set_enu_y(double value);
  public:

  // double heading = 17;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // int32 status = 2;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_GNSS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rbk::protocol::Message_Header* header_;
  ::rbk::protocol::Message_GnssInstallInfo* install_info_;
  ::rbk::protocol::Message_GnssRefInfo* ref_info_;
  double x_;
  double y_;
  double z_;
  double ubx_2d_acc_h_;
  double ubx_2d_acc_v_;
  double ubx_3d_acc_;
  double longitude_;
  double latitude_;
  double altitude_;
  double enu_x_;
  double enu_y_;
  double heading_;
  int32_t status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fgnss_2eproto;
};
// -------------------------------------------------------------------

class Message_AllGNSS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rbk.protocol.Message_AllGNSS) */ {
 public:
  inline Message_AllGNSS() : Message_AllGNSS(nullptr) {}
  ~Message_AllGNSS() override;
  explicit PROTOBUF_CONSTEXPR Message_AllGNSS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_AllGNSS(const Message_AllGNSS& from);
  Message_AllGNSS(Message_AllGNSS&& from) noexcept
    : Message_AllGNSS() {
    *this = ::std::move(from);
  }

  inline Message_AllGNSS& operator=(const Message_AllGNSS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AllGNSS& operator=(Message_AllGNSS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_AllGNSS& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_AllGNSS* internal_default_instance() {
    return reinterpret_cast<const Message_AllGNSS*>(
               &_Message_AllGNSS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_AllGNSS& a, Message_AllGNSS& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AllGNSS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_AllGNSS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_AllGNSS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_AllGNSS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_AllGNSS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Message_AllGNSS& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AllGNSS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rbk.protocol.Message_AllGNSS";
  }
  protected:
  explicit Message_AllGNSS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGnssFieldNumber = 1,
  };
  // repeated .rbk.protocol.Message_GNSS gnss = 1;
  int gnss_size() const;
  private:
  int _internal_gnss_size() const;
  public:
  void clear_gnss();
  ::rbk::protocol::Message_GNSS* mutable_gnss(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >*
      mutable_gnss();
  private:
  const ::rbk::protocol::Message_GNSS& _internal_gnss(int index) const;
  ::rbk::protocol::Message_GNSS* _internal_add_gnss();
  public:
  const ::rbk::protocol::Message_GNSS& gnss(int index) const;
  ::rbk::protocol::Message_GNSS* add_gnss();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >&
      gnss() const;

  // @@protoc_insertion_point(class_scope:rbk.protocol.Message_AllGNSS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS > gnss_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_5fgnss_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_GnssInstallInfo

// double x = 1;
inline void Message_GnssInstallInfo::clear_x() {
  x_ = 0;
}
inline double Message_GnssInstallInfo::_internal_x() const {
  return x_;
}
inline double Message_GnssInstallInfo::x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssInstallInfo.x)
  return _internal_x();
}
inline void Message_GnssInstallInfo::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Message_GnssInstallInfo::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssInstallInfo.x)
}

// double y = 2;
inline void Message_GnssInstallInfo::clear_y() {
  y_ = 0;
}
inline double Message_GnssInstallInfo::_internal_y() const {
  return y_;
}
inline double Message_GnssInstallInfo::y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssInstallInfo.y)
  return _internal_y();
}
inline void Message_GnssInstallInfo::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Message_GnssInstallInfo::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssInstallInfo.y)
}

// double z = 3;
inline void Message_GnssInstallInfo::clear_z() {
  z_ = 0;
}
inline double Message_GnssInstallInfo::_internal_z() const {
  return z_;
}
inline double Message_GnssInstallInfo::z() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssInstallInfo.z)
  return _internal_z();
}
inline void Message_GnssInstallInfo::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Message_GnssInstallInfo::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssInstallInfo.z)
}

// double yaw = 4;
inline void Message_GnssInstallInfo::clear_yaw() {
  yaw_ = 0;
}
inline double Message_GnssInstallInfo::_internal_yaw() const {
  return yaw_;
}
inline double Message_GnssInstallInfo::yaw() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssInstallInfo.yaw)
  return _internal_yaw();
}
inline void Message_GnssInstallInfo::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void Message_GnssInstallInfo::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssInstallInfo.yaw)
}

// -------------------------------------------------------------------

// Message_GnssRefInfo

// double longitude = 1;
inline void Message_GnssRefInfo::clear_longitude() {
  longitude_ = 0;
}
inline double Message_GnssRefInfo::_internal_longitude() const {
  return longitude_;
}
inline double Message_GnssRefInfo::longitude() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssRefInfo.longitude)
  return _internal_longitude();
}
inline void Message_GnssRefInfo::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Message_GnssRefInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssRefInfo.longitude)
}

// double latitude = 2;
inline void Message_GnssRefInfo::clear_latitude() {
  latitude_ = 0;
}
inline double Message_GnssRefInfo::_internal_latitude() const {
  return latitude_;
}
inline double Message_GnssRefInfo::latitude() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssRefInfo.latitude)
  return _internal_latitude();
}
inline void Message_GnssRefInfo::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Message_GnssRefInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssRefInfo.latitude)
}

// double altitude = 3;
inline void Message_GnssRefInfo::clear_altitude() {
  altitude_ = 0;
}
inline double Message_GnssRefInfo::_internal_altitude() const {
  return altitude_;
}
inline double Message_GnssRefInfo::altitude() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GnssRefInfo.altitude)
  return _internal_altitude();
}
inline void Message_GnssRefInfo::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void Message_GnssRefInfo::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GnssRefInfo.altitude)
}

// -------------------------------------------------------------------

// Message_GNSS

// .rbk.protocol.Message_Header header = 1;
inline bool Message_GNSS::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Message_GNSS::has_header() const {
  return _internal_has_header();
}
inline const ::rbk::protocol::Message_Header& Message_GNSS::_internal_header() const {
  const ::rbk::protocol::Message_Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_Header&>(
      ::rbk::protocol::_Message_Header_default_instance_);
}
inline const ::rbk::protocol::Message_Header& Message_GNSS::header() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.header)
  return _internal_header();
}
inline void Message_GNSS::unsafe_arena_set_allocated_header(
    ::rbk::protocol::Message_Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_GNSS.header)
}
inline ::rbk::protocol::Message_Header* Message_GNSS::release_header() {
  
  ::rbk::protocol::Message_Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_Header* Message_GNSS::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_GNSS.header)
  
  ::rbk::protocol::Message_Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_Header* Message_GNSS::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::rbk::protocol::Message_Header* Message_GNSS::mutable_header() {
  ::rbk::protocol::Message_Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_GNSS.header)
  return _msg;
}
inline void Message_GNSS::set_allocated_header(::rbk::protocol::Message_Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_GNSS.header)
}

// int32 status = 2;
inline void Message_GNSS::clear_status() {
  status_ = 0;
}
inline int32_t Message_GNSS::_internal_status() const {
  return status_;
}
inline int32_t Message_GNSS::status() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.status)
  return _internal_status();
}
inline void Message_GNSS::_internal_set_status(int32_t value) {
  
  status_ = value;
}
inline void Message_GNSS::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.status)
}

// double x = 3;
inline void Message_GNSS::clear_x() {
  x_ = 0;
}
inline double Message_GNSS::_internal_x() const {
  return x_;
}
inline double Message_GNSS::x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.x)
  return _internal_x();
}
inline void Message_GNSS::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Message_GNSS::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.x)
}

// double y = 4;
inline void Message_GNSS::clear_y() {
  y_ = 0;
}
inline double Message_GNSS::_internal_y() const {
  return y_;
}
inline double Message_GNSS::y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.y)
  return _internal_y();
}
inline void Message_GNSS::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Message_GNSS::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.y)
}

// double z = 5;
inline void Message_GNSS::clear_z() {
  z_ = 0;
}
inline double Message_GNSS::_internal_z() const {
  return z_;
}
inline double Message_GNSS::z() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.z)
  return _internal_z();
}
inline void Message_GNSS::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Message_GNSS::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.z)
}

// double ubx_2d_acc_h = 7;
inline void Message_GNSS::clear_ubx_2d_acc_h() {
  ubx_2d_acc_h_ = 0;
}
inline double Message_GNSS::_internal_ubx_2d_acc_h() const {
  return ubx_2d_acc_h_;
}
inline double Message_GNSS::ubx_2d_acc_h() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.ubx_2d_acc_h)
  return _internal_ubx_2d_acc_h();
}
inline void Message_GNSS::_internal_set_ubx_2d_acc_h(double value) {
  
  ubx_2d_acc_h_ = value;
}
inline void Message_GNSS::set_ubx_2d_acc_h(double value) {
  _internal_set_ubx_2d_acc_h(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.ubx_2d_acc_h)
}

// double ubx_2d_acc_v = 8;
inline void Message_GNSS::clear_ubx_2d_acc_v() {
  ubx_2d_acc_v_ = 0;
}
inline double Message_GNSS::_internal_ubx_2d_acc_v() const {
  return ubx_2d_acc_v_;
}
inline double Message_GNSS::ubx_2d_acc_v() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.ubx_2d_acc_v)
  return _internal_ubx_2d_acc_v();
}
inline void Message_GNSS::_internal_set_ubx_2d_acc_v(double value) {
  
  ubx_2d_acc_v_ = value;
}
inline void Message_GNSS::set_ubx_2d_acc_v(double value) {
  _internal_set_ubx_2d_acc_v(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.ubx_2d_acc_v)
}

// double ubx_3d_acc = 9;
inline void Message_GNSS::clear_ubx_3d_acc() {
  ubx_3d_acc_ = 0;
}
inline double Message_GNSS::_internal_ubx_3d_acc() const {
  return ubx_3d_acc_;
}
inline double Message_GNSS::ubx_3d_acc() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.ubx_3d_acc)
  return _internal_ubx_3d_acc();
}
inline void Message_GNSS::_internal_set_ubx_3d_acc(double value) {
  
  ubx_3d_acc_ = value;
}
inline void Message_GNSS::set_ubx_3d_acc(double value) {
  _internal_set_ubx_3d_acc(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.ubx_3d_acc)
}

// double longitude = 10;
inline void Message_GNSS::clear_longitude() {
  longitude_ = 0;
}
inline double Message_GNSS::_internal_longitude() const {
  return longitude_;
}
inline double Message_GNSS::longitude() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.longitude)
  return _internal_longitude();
}
inline void Message_GNSS::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Message_GNSS::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.longitude)
}

// double latitude = 11;
inline void Message_GNSS::clear_latitude() {
  latitude_ = 0;
}
inline double Message_GNSS::_internal_latitude() const {
  return latitude_;
}
inline double Message_GNSS::latitude() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.latitude)
  return _internal_latitude();
}
inline void Message_GNSS::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Message_GNSS::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.latitude)
}

// double altitude = 12;
inline void Message_GNSS::clear_altitude() {
  altitude_ = 0;
}
inline double Message_GNSS::_internal_altitude() const {
  return altitude_;
}
inline double Message_GNSS::altitude() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.altitude)
  return _internal_altitude();
}
inline void Message_GNSS::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void Message_GNSS::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.altitude)
}

// .rbk.protocol.Message_GnssInstallInfo install_info = 13;
inline bool Message_GNSS::_internal_has_install_info() const {
  return this != internal_default_instance() && install_info_ != nullptr;
}
inline bool Message_GNSS::has_install_info() const {
  return _internal_has_install_info();
}
inline void Message_GNSS::clear_install_info() {
  if (GetArenaForAllocation() == nullptr && install_info_ != nullptr) {
    delete install_info_;
  }
  install_info_ = nullptr;
}
inline const ::rbk::protocol::Message_GnssInstallInfo& Message_GNSS::_internal_install_info() const {
  const ::rbk::protocol::Message_GnssInstallInfo* p = install_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_GnssInstallInfo&>(
      ::rbk::protocol::_Message_GnssInstallInfo_default_instance_);
}
inline const ::rbk::protocol::Message_GnssInstallInfo& Message_GNSS::install_info() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.install_info)
  return _internal_install_info();
}
inline void Message_GNSS::unsafe_arena_set_allocated_install_info(
    ::rbk::protocol::Message_GnssInstallInfo* install_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_info_);
  }
  install_info_ = install_info;
  if (install_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_GNSS.install_info)
}
inline ::rbk::protocol::Message_GnssInstallInfo* Message_GNSS::release_install_info() {
  
  ::rbk::protocol::Message_GnssInstallInfo* temp = install_info_;
  install_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_GnssInstallInfo* Message_GNSS::unsafe_arena_release_install_info() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_GNSS.install_info)
  
  ::rbk::protocol::Message_GnssInstallInfo* temp = install_info_;
  install_info_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_GnssInstallInfo* Message_GNSS::_internal_mutable_install_info() {
  
  if (install_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_GnssInstallInfo>(GetArenaForAllocation());
    install_info_ = p;
  }
  return install_info_;
}
inline ::rbk::protocol::Message_GnssInstallInfo* Message_GNSS::mutable_install_info() {
  ::rbk::protocol::Message_GnssInstallInfo* _msg = _internal_mutable_install_info();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_GNSS.install_info)
  return _msg;
}
inline void Message_GNSS::set_allocated_install_info(::rbk::protocol::Message_GnssInstallInfo* install_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete install_info_;
  }
  if (install_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(install_info);
    if (message_arena != submessage_arena) {
      install_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_info, submessage_arena);
    }
    
  } else {
    
  }
  install_info_ = install_info;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_GNSS.install_info)
}

// .rbk.protocol.Message_GnssRefInfo ref_info = 14;
inline bool Message_GNSS::_internal_has_ref_info() const {
  return this != internal_default_instance() && ref_info_ != nullptr;
}
inline bool Message_GNSS::has_ref_info() const {
  return _internal_has_ref_info();
}
inline void Message_GNSS::clear_ref_info() {
  if (GetArenaForAllocation() == nullptr && ref_info_ != nullptr) {
    delete ref_info_;
  }
  ref_info_ = nullptr;
}
inline const ::rbk::protocol::Message_GnssRefInfo& Message_GNSS::_internal_ref_info() const {
  const ::rbk::protocol::Message_GnssRefInfo* p = ref_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::rbk::protocol::Message_GnssRefInfo&>(
      ::rbk::protocol::_Message_GnssRefInfo_default_instance_);
}
inline const ::rbk::protocol::Message_GnssRefInfo& Message_GNSS::ref_info() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.ref_info)
  return _internal_ref_info();
}
inline void Message_GNSS::unsafe_arena_set_allocated_ref_info(
    ::rbk::protocol::Message_GnssRefInfo* ref_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_info_);
  }
  ref_info_ = ref_info;
  if (ref_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rbk.protocol.Message_GNSS.ref_info)
}
inline ::rbk::protocol::Message_GnssRefInfo* Message_GNSS::release_ref_info() {
  
  ::rbk::protocol::Message_GnssRefInfo* temp = ref_info_;
  ref_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rbk::protocol::Message_GnssRefInfo* Message_GNSS::unsafe_arena_release_ref_info() {
  // @@protoc_insertion_point(field_release:rbk.protocol.Message_GNSS.ref_info)
  
  ::rbk::protocol::Message_GnssRefInfo* temp = ref_info_;
  ref_info_ = nullptr;
  return temp;
}
inline ::rbk::protocol::Message_GnssRefInfo* Message_GNSS::_internal_mutable_ref_info() {
  
  if (ref_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::rbk::protocol::Message_GnssRefInfo>(GetArenaForAllocation());
    ref_info_ = p;
  }
  return ref_info_;
}
inline ::rbk::protocol::Message_GnssRefInfo* Message_GNSS::mutable_ref_info() {
  ::rbk::protocol::Message_GnssRefInfo* _msg = _internal_mutable_ref_info();
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_GNSS.ref_info)
  return _msg;
}
inline void Message_GNSS::set_allocated_ref_info(::rbk::protocol::Message_GnssRefInfo* ref_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ref_info_;
  }
  if (ref_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ref_info);
    if (message_arena != submessage_arena) {
      ref_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_info, submessage_arena);
    }
    
  } else {
    
  }
  ref_info_ = ref_info;
  // @@protoc_insertion_point(field_set_allocated:rbk.protocol.Message_GNSS.ref_info)
}

// double enu_x = 15;
inline void Message_GNSS::clear_enu_x() {
  enu_x_ = 0;
}
inline double Message_GNSS::_internal_enu_x() const {
  return enu_x_;
}
inline double Message_GNSS::enu_x() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.enu_x)
  return _internal_enu_x();
}
inline void Message_GNSS::_internal_set_enu_x(double value) {
  
  enu_x_ = value;
}
inline void Message_GNSS::set_enu_x(double value) {
  _internal_set_enu_x(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.enu_x)
}

// double enu_y = 16;
inline void Message_GNSS::clear_enu_y() {
  enu_y_ = 0;
}
inline double Message_GNSS::_internal_enu_y() const {
  return enu_y_;
}
inline double Message_GNSS::enu_y() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.enu_y)
  return _internal_enu_y();
}
inline void Message_GNSS::_internal_set_enu_y(double value) {
  
  enu_y_ = value;
}
inline void Message_GNSS::set_enu_y(double value) {
  _internal_set_enu_y(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.enu_y)
}

// double heading = 17;
inline void Message_GNSS::clear_heading() {
  heading_ = 0;
}
inline double Message_GNSS::_internal_heading() const {
  return heading_;
}
inline double Message_GNSS::heading() const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_GNSS.heading)
  return _internal_heading();
}
inline void Message_GNSS::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void Message_GNSS::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:rbk.protocol.Message_GNSS.heading)
}

// -------------------------------------------------------------------

// Message_AllGNSS

// repeated .rbk.protocol.Message_GNSS gnss = 1;
inline int Message_AllGNSS::_internal_gnss_size() const {
  return gnss_.size();
}
inline int Message_AllGNSS::gnss_size() const {
  return _internal_gnss_size();
}
inline void Message_AllGNSS::clear_gnss() {
  gnss_.Clear();
}
inline ::rbk::protocol::Message_GNSS* Message_AllGNSS::mutable_gnss(int index) {
  // @@protoc_insertion_point(field_mutable:rbk.protocol.Message_AllGNSS.gnss)
  return gnss_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >*
Message_AllGNSS::mutable_gnss() {
  // @@protoc_insertion_point(field_mutable_list:rbk.protocol.Message_AllGNSS.gnss)
  return &gnss_;
}
inline const ::rbk::protocol::Message_GNSS& Message_AllGNSS::_internal_gnss(int index) const {
  return gnss_.Get(index);
}
inline const ::rbk::protocol::Message_GNSS& Message_AllGNSS::gnss(int index) const {
  // @@protoc_insertion_point(field_get:rbk.protocol.Message_AllGNSS.gnss)
  return _internal_gnss(index);
}
inline ::rbk::protocol::Message_GNSS* Message_AllGNSS::_internal_add_gnss() {
  return gnss_.Add();
}
inline ::rbk::protocol::Message_GNSS* Message_AllGNSS::add_gnss() {
  ::rbk::protocol::Message_GNSS* _add = _internal_add_gnss();
  // @@protoc_insertion_point(field_add:rbk.protocol.Message_AllGNSS.gnss)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rbk::protocol::Message_GNSS >&
Message_AllGNSS::gnss() const {
  // @@protoc_insertion_point(field_list:rbk.protocol.Message_AllGNSS.gnss)
  return gnss_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace rbk

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fgnss_2eproto
