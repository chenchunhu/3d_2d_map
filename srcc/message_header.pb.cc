// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_header.proto

#include "message_header.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rbk {
namespace protocol {
PROTOBUF_CONSTEXPR Message_Header::Message_Header(
    ::_pbi::ConstantInitialized)
  : frame_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pub_nsec_(uint64_t{0u})
  , data_nsec_(uint64_t{0u})
  , seq_(uint64_t{0u}){}
struct Message_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_HeaderDefaultTypeInternal() {}
  union {
    Message_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_HeaderDefaultTypeInternal _Message_Header_default_instance_;
}  // namespace protocol
}  // namespace rbk
static ::_pb::Metadata file_level_metadata_message_5fheader_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_5fheader_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_5fheader_2eproto = nullptr;

const uint32_t TableStruct_message_5fheader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Header, pub_nsec_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Header, data_nsec_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Header, seq_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Header, frame_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rbk::protocol::Message_Header)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rbk::protocol::_Message_Header_default_instance_._instance,
};

const char descriptor_table_protodef_message_5fheader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024message_header.proto\022\014rbk.protocol\"T\n\016"
  "Message_Header\022\020\n\010pub_nsec\030\001 \001(\004\022\021\n\tdata"
  "_nsec\030\002 \001(\004\022\013\n\003seq\030\003 \001(\004\022\020\n\010frame_id\030\004 \001"
  "(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_message_5fheader_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_5fheader_2eproto = {
    false, false, 130, descriptor_table_protodef_message_5fheader_2eproto,
    "message_header.proto",
    &descriptor_table_message_5fheader_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_message_5fheader_2eproto::offsets,
    file_level_metadata_message_5fheader_2eproto, file_level_enum_descriptors_message_5fheader_2eproto,
    file_level_service_descriptors_message_5fheader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_5fheader_2eproto_getter() {
  return &descriptor_table_message_5fheader_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_5fheader_2eproto(&descriptor_table_message_5fheader_2eproto);
namespace rbk {
namespace protocol {

// ===================================================================

class Message_Header::_Internal {
 public:
};

Message_Header::Message_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_Header)
}
Message_Header::Message_Header(const Message_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&pub_nsec_, &from.pub_nsec_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&pub_nsec_)) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_Header)
}

inline void Message_Header::SharedCtor() {
frame_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pub_nsec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&pub_nsec_)) + sizeof(seq_));
}

Message_Header::~Message_Header() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_id_.Destroy();
}

void Message_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmpty();
  ::memset(&pub_nsec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_) -
      reinterpret_cast<char*>(&pub_nsec_)) + sizeof(seq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pub_nsec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          pub_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 data_nsec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          data_nsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_Header.frame_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pub_nsec = 1;
  if (this->_internal_pub_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pub_nsec(), target);
  }

  // uint64 data_nsec = 2;
  if (this->_internal_data_nsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_data_nsec(), target);
  }

  // uint64 seq = 3;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq(), target);
  }

  // string frame_id = 4;
  if (!this->_internal_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_Header.frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_Header)
  return target;
}

size_t Message_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_id = 4;
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // uint64 pub_nsec = 1;
  if (this->_internal_pub_nsec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_pub_nsec());
  }

  // uint64 data_nsec = 2;
  if (this->_internal_data_nsec() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_data_nsec());
  }

  // uint64 seq = 3;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Header::GetClassData() const { return &_class_data_; }

void Message_Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_Header *>(to)->MergeFrom(
      static_cast<const Message_Header &>(from));
}


void Message_Header::MergeFrom(const Message_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_id().empty()) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from._internal_pub_nsec() != 0) {
    _internal_set_pub_nsec(from._internal_pub_nsec());
  }
  if (from._internal_data_nsec() != 0) {
    _internal_set_data_nsec(from._internal_data_nsec());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Header::CopyFrom(const Message_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Header::IsInitialized() const {
  return true;
}

void Message_Header::InternalSwap(Message_Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_id_, lhs_arena,
      &other->frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_Header, seq_)
      + sizeof(Message_Header::seq_)
      - PROTOBUF_FIELD_OFFSET(Message_Header, pub_nsec_)>(
          reinterpret_cast<char*>(&pub_nsec_),
          reinterpret_cast<char*>(&other->pub_nsec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fheader_2eproto_getter, &descriptor_table_message_5fheader_2eproto_once,
      file_level_metadata_message_5fheader_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_Header*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_Header >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
