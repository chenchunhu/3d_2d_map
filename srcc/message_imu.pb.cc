// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_imu.proto

#include "message_imu.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rbk {
namespace protocol {
PROTOBUF_CONSTEXPR Message_ImuInstallInfo::Message_ImuInstallInfo(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , qx_(0)
  , qy_(0)
  , qz_(0)
  , qw_(0)
  , ssf_(0){}
struct Message_ImuInstallInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ImuInstallInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ImuInstallInfoDefaultTypeInternal() {}
  union {
    Message_ImuInstallInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ImuInstallInfoDefaultTypeInternal _Message_ImuInstallInfo_default_instance_;
PROTOBUF_CONSTEXPR Message_IMU::Message_IMU(
    ::_pbi::ConstantInitialized)
  : header_(nullptr)
  , install_info_(nullptr)
  , yaw_(0)
  , roll_(0)
  , pitch_(0)
  , acc_x_(0)
  , acc_y_(0)
  , acc_z_(0)
  , rot_x_(0)
  , rot_y_(0)
  , rot_z_(0)
  , rot_off_x_(0)
  , rot_off_y_(0)
  , qx_(0)
  , qy_(0)
  , qz_(0)
  , qw_(0)
  , rot_off_z_(0){}
struct Message_IMUDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_IMUDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_IMUDefaultTypeInternal() {}
  union {
    Message_IMU _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_IMUDefaultTypeInternal _Message_IMU_default_instance_;
}  // namespace protocol
}  // namespace rbk
static ::_pb::Metadata file_level_metadata_message_5fimu_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_5fimu_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_5fimu_2eproto = nullptr;

const uint32_t TableStruct_message_5fimu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, qx_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, qy_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, qz_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, qw_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ImuInstallInfo, ssf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, header_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, yaw_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, roll_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, pitch_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, acc_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, acc_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, acc_z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, rot_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, rot_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, rot_z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, rot_off_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, rot_off_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, rot_off_z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, qx_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, qy_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, qz_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, qw_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_IMU, install_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rbk::protocol::Message_ImuInstallInfo)},
  { 14, -1, -1, sizeof(::rbk::protocol::Message_IMU)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rbk::protocol::_Message_ImuInstallInfo_default_instance_._instance,
  &::rbk::protocol::_Message_IMU_default_instance_._instance,
};

const char descriptor_table_protodef_message_5fimu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021message_imu.proto\022\014rbk.protocol\032\024messa"
  "ge_header.proto\"v\n\026Message_ImuInstallInf"
  "o\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\n\n\002qx"
  "\030\004 \001(\001\022\n\n\002qy\030\005 \001(\001\022\n\n\002qz\030\006 \001(\001\022\n\n\002qw\030\007 \001"
  "(\001\022\013\n\003SSF\030\010 \001(\001\"\344\002\n\013Message_IMU\022,\n\006heade"
  "r\030\001 \001(\0132\034.rbk.protocol.Message_Header\022\013\n"
  "\003yaw\030\002 \001(\001\022\014\n\004roll\030\003 \001(\001\022\r\n\005pitch\030\004 \001(\001\022"
  "\r\n\005acc_x\030\005 \001(\001\022\r\n\005acc_y\030\006 \001(\001\022\r\n\005acc_z\030\007"
  " \001(\001\022\r\n\005rot_x\030\010 \001(\001\022\r\n\005rot_y\030\t \001(\001\022\r\n\005ro"
  "t_z\030\n \001(\001\022\021\n\trot_off_x\030\013 \001(\005\022\021\n\trot_off_"
  "y\030\014 \001(\005\022\021\n\trot_off_z\030\r \001(\005\022\n\n\002qx\030\016 \001(\001\022\n"
  "\n\002qy\030\017 \001(\001\022\n\n\002qz\030\020 \001(\001\022\n\n\002qw\030\021 \001(\001\022:\n\014in"
  "stall_info\030\022 \001(\0132$.rbk.protocol.Message_"
  "ImuInstallInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_message_5fimu_2eproto_deps[1] = {
  &::descriptor_table_message_5fheader_2eproto,
};
static ::_pbi::once_flag descriptor_table_message_5fimu_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_5fimu_2eproto = {
    false, false, 542, descriptor_table_protodef_message_5fimu_2eproto,
    "message_imu.proto",
    &descriptor_table_message_5fimu_2eproto_once, descriptor_table_message_5fimu_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_message_5fimu_2eproto::offsets,
    file_level_metadata_message_5fimu_2eproto, file_level_enum_descriptors_message_5fimu_2eproto,
    file_level_service_descriptors_message_5fimu_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_5fimu_2eproto_getter() {
  return &descriptor_table_message_5fimu_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_5fimu_2eproto(&descriptor_table_message_5fimu_2eproto);
namespace rbk {
namespace protocol {

// ===================================================================

class Message_ImuInstallInfo::_Internal {
 public:
};

Message_ImuInstallInfo::Message_ImuInstallInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_ImuInstallInfo)
}
Message_ImuInstallInfo::Message_ImuInstallInfo(const Message_ImuInstallInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssf_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ssf_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_ImuInstallInfo)
}

inline void Message_ImuInstallInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ssf_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ssf_));
}

Message_ImuInstallInfo::~Message_ImuInstallInfo() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_ImuInstallInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ImuInstallInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_ImuInstallInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_ImuInstallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_ImuInstallInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssf_) -
      reinterpret_cast<char*>(&x_)) + sizeof(ssf_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ImuInstallInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double SSF = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          ssf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ImuInstallInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_ImuInstallInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double qx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qx = this->_internal_qx();
  uint64_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_qx(), target);
  }

  // double qy = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qy = this->_internal_qy();
  uint64_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_qy(), target);
  }

  // double qz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qz = this->_internal_qz();
  uint64_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_qz(), target);
  }

  // double qw = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qw = this->_internal_qw();
  uint64_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_qw(), target);
  }

  // double SSF = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ssf = this->_internal_ssf();
  uint64_t raw_ssf;
  memcpy(&raw_ssf, &tmp_ssf, sizeof(tmp_ssf));
  if (raw_ssf != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ssf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_ImuInstallInfo)
  return target;
}

size_t Message_ImuInstallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_ImuInstallInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double qx = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qx = this->_internal_qx();
  uint64_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    total_size += 1 + 8;
  }

  // double qy = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qy = this->_internal_qy();
  uint64_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    total_size += 1 + 8;
  }

  // double qz = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qz = this->_internal_qz();
  uint64_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    total_size += 1 + 8;
  }

  // double qw = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qw = this->_internal_qw();
  uint64_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    total_size += 1 + 8;
  }

  // double SSF = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ssf = this->_internal_ssf();
  uint64_t raw_ssf;
  memcpy(&raw_ssf, &tmp_ssf, sizeof(tmp_ssf));
  if (raw_ssf != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ImuInstallInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_ImuInstallInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ImuInstallInfo::GetClassData() const { return &_class_data_; }

void Message_ImuInstallInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_ImuInstallInfo *>(to)->MergeFrom(
      static_cast<const Message_ImuInstallInfo &>(from));
}


void Message_ImuInstallInfo::MergeFrom(const Message_ImuInstallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_ImuInstallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qx = from._internal_qx();
  uint64_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    _internal_set_qx(from._internal_qx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qy = from._internal_qy();
  uint64_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    _internal_set_qy(from._internal_qy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qz = from._internal_qz();
  uint64_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    _internal_set_qz(from._internal_qz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qw = from._internal_qw();
  uint64_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    _internal_set_qw(from._internal_qw());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ssf = from._internal_ssf();
  uint64_t raw_ssf;
  memcpy(&raw_ssf, &tmp_ssf, sizeof(tmp_ssf));
  if (raw_ssf != 0) {
    _internal_set_ssf(from._internal_ssf());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ImuInstallInfo::CopyFrom(const Message_ImuInstallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_ImuInstallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ImuInstallInfo::IsInitialized() const {
  return true;
}

void Message_ImuInstallInfo::InternalSwap(Message_ImuInstallInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ImuInstallInfo, ssf_)
      + sizeof(Message_ImuInstallInfo::ssf_)
      - PROTOBUF_FIELD_OFFSET(Message_ImuInstallInfo, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ImuInstallInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fimu_2eproto_getter, &descriptor_table_message_5fimu_2eproto_once,
      file_level_metadata_message_5fimu_2eproto[0]);
}

// ===================================================================

class Message_IMU::_Internal {
 public:
  static const ::rbk::protocol::Message_Header& header(const Message_IMU* msg);
  static const ::rbk::protocol::Message_ImuInstallInfo& install_info(const Message_IMU* msg);
};

const ::rbk::protocol::Message_Header&
Message_IMU::_Internal::header(const Message_IMU* msg) {
  return *msg->header_;
}
const ::rbk::protocol::Message_ImuInstallInfo&
Message_IMU::_Internal::install_info(const Message_IMU* msg) {
  return *msg->install_info_;
}
void Message_IMU::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Message_IMU::Message_IMU(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_IMU)
}
Message_IMU::Message_IMU(const Message_IMU& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rbk::protocol::Message_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_install_info()) {
    install_info_ = new ::rbk::protocol::Message_ImuInstallInfo(*from.install_info_);
  } else {
    install_info_ = nullptr;
  }
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&rot_off_z_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(rot_off_z_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_IMU)
}

inline void Message_IMU::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rot_off_z_) -
    reinterpret_cast<char*>(&header_)) + sizeof(rot_off_z_));
}

Message_IMU::~Message_IMU() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_IMU)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_IMU::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete install_info_;
}

void Message_IMU::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_IMU::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_IMU)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && install_info_ != nullptr) {
    delete install_info_;
  }
  install_info_ = nullptr;
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rot_off_z_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(rot_off_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_IMU::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbk.protocol.Message_Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pitch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acc_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          acc_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acc_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          acc_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acc_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          acc_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rot_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          rot_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rot_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          rot_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rot_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          rot_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 rot_off_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          rot_off_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rot_off_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          rot_off_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rot_off_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          rot_off_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double qx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qy = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qz = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double qw = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_ImuInstallInfo install_info = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_install_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_IMU::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_IMU)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbk.protocol.Message_Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // double yaw = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_yaw(), target);
  }

  // double roll = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_roll(), target);
  }

  // double pitch = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_pitch(), target);
  }

  // double acc_x = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_x = this->_internal_acc_x();
  uint64_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_acc_x(), target);
  }

  // double acc_y = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_y = this->_internal_acc_y();
  uint64_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_acc_y(), target);
  }

  // double acc_z = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_z = this->_internal_acc_z();
  uint64_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_acc_z(), target);
  }

  // double rot_x = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_x = this->_internal_rot_x();
  uint64_t raw_rot_x;
  memcpy(&raw_rot_x, &tmp_rot_x, sizeof(tmp_rot_x));
  if (raw_rot_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_rot_x(), target);
  }

  // double rot_y = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_y = this->_internal_rot_y();
  uint64_t raw_rot_y;
  memcpy(&raw_rot_y, &tmp_rot_y, sizeof(tmp_rot_y));
  if (raw_rot_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_rot_y(), target);
  }

  // double rot_z = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_z = this->_internal_rot_z();
  uint64_t raw_rot_z;
  memcpy(&raw_rot_z, &tmp_rot_z, sizeof(tmp_rot_z));
  if (raw_rot_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_rot_z(), target);
  }

  // int32 rot_off_x = 11;
  if (this->_internal_rot_off_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_rot_off_x(), target);
  }

  // int32 rot_off_y = 12;
  if (this->_internal_rot_off_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_rot_off_y(), target);
  }

  // int32 rot_off_z = 13;
  if (this->_internal_rot_off_z() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_rot_off_z(), target);
  }

  // double qx = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qx = this->_internal_qx();
  uint64_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_qx(), target);
  }

  // double qy = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qy = this->_internal_qy();
  uint64_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_qy(), target);
  }

  // double qz = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qz = this->_internal_qz();
  uint64_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_qz(), target);
  }

  // double qw = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qw = this->_internal_qw();
  uint64_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_qw(), target);
  }

  // .rbk.protocol.Message_ImuInstallInfo install_info = 18;
  if (this->_internal_has_install_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::install_info(this),
        _Internal::install_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_IMU)
  return target;
}

size_t Message_IMU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_IMU)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbk.protocol.Message_Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .rbk.protocol.Message_ImuInstallInfo install_info = 18;
  if (this->_internal_has_install_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *install_info_);
  }

  // double yaw = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  // double roll = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 8;
  }

  // double acc_x = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_x = this->_internal_acc_x();
  uint64_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    total_size += 1 + 8;
  }

  // double acc_y = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_y = this->_internal_acc_y();
  uint64_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    total_size += 1 + 8;
  }

  // double acc_z = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_z = this->_internal_acc_z();
  uint64_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    total_size += 1 + 8;
  }

  // double rot_x = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_x = this->_internal_rot_x();
  uint64_t raw_rot_x;
  memcpy(&raw_rot_x, &tmp_rot_x, sizeof(tmp_rot_x));
  if (raw_rot_x != 0) {
    total_size += 1 + 8;
  }

  // double rot_y = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_y = this->_internal_rot_y();
  uint64_t raw_rot_y;
  memcpy(&raw_rot_y, &tmp_rot_y, sizeof(tmp_rot_y));
  if (raw_rot_y != 0) {
    total_size += 1 + 8;
  }

  // double rot_z = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_z = this->_internal_rot_z();
  uint64_t raw_rot_z;
  memcpy(&raw_rot_z, &tmp_rot_z, sizeof(tmp_rot_z));
  if (raw_rot_z != 0) {
    total_size += 1 + 8;
  }

  // int32 rot_off_x = 11;
  if (this->_internal_rot_off_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rot_off_x());
  }

  // int32 rot_off_y = 12;
  if (this->_internal_rot_off_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rot_off_y());
  }

  // double qx = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qx = this->_internal_qx();
  uint64_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    total_size += 1 + 8;
  }

  // double qy = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qy = this->_internal_qy();
  uint64_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    total_size += 1 + 8;
  }

  // double qz = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qz = this->_internal_qz();
  uint64_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    total_size += 2 + 8;
  }

  // double qw = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qw = this->_internal_qw();
  uint64_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    total_size += 2 + 8;
  }

  // int32 rot_off_z = 13;
  if (this->_internal_rot_off_z() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rot_off_z());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_IMU::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_IMU::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_IMU::GetClassData() const { return &_class_data_; }

void Message_IMU::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_IMU *>(to)->MergeFrom(
      static_cast<const Message_IMU &>(from));
}


void Message_IMU::MergeFrom(const Message_IMU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_IMU)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::rbk::protocol::Message_Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_install_info()) {
    _internal_mutable_install_info()->::rbk::protocol::Message_ImuInstallInfo::MergeFrom(from._internal_install_info());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = from._internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = from._internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_x = from._internal_acc_x();
  uint64_t raw_acc_x;
  memcpy(&raw_acc_x, &tmp_acc_x, sizeof(tmp_acc_x));
  if (raw_acc_x != 0) {
    _internal_set_acc_x(from._internal_acc_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_y = from._internal_acc_y();
  uint64_t raw_acc_y;
  memcpy(&raw_acc_y, &tmp_acc_y, sizeof(tmp_acc_y));
  if (raw_acc_y != 0) {
    _internal_set_acc_y(from._internal_acc_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc_z = from._internal_acc_z();
  uint64_t raw_acc_z;
  memcpy(&raw_acc_z, &tmp_acc_z, sizeof(tmp_acc_z));
  if (raw_acc_z != 0) {
    _internal_set_acc_z(from._internal_acc_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_x = from._internal_rot_x();
  uint64_t raw_rot_x;
  memcpy(&raw_rot_x, &tmp_rot_x, sizeof(tmp_rot_x));
  if (raw_rot_x != 0) {
    _internal_set_rot_x(from._internal_rot_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_y = from._internal_rot_y();
  uint64_t raw_rot_y;
  memcpy(&raw_rot_y, &tmp_rot_y, sizeof(tmp_rot_y));
  if (raw_rot_y != 0) {
    _internal_set_rot_y(from._internal_rot_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rot_z = from._internal_rot_z();
  uint64_t raw_rot_z;
  memcpy(&raw_rot_z, &tmp_rot_z, sizeof(tmp_rot_z));
  if (raw_rot_z != 0) {
    _internal_set_rot_z(from._internal_rot_z());
  }
  if (from._internal_rot_off_x() != 0) {
    _internal_set_rot_off_x(from._internal_rot_off_x());
  }
  if (from._internal_rot_off_y() != 0) {
    _internal_set_rot_off_y(from._internal_rot_off_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qx = from._internal_qx();
  uint64_t raw_qx;
  memcpy(&raw_qx, &tmp_qx, sizeof(tmp_qx));
  if (raw_qx != 0) {
    _internal_set_qx(from._internal_qx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qy = from._internal_qy();
  uint64_t raw_qy;
  memcpy(&raw_qy, &tmp_qy, sizeof(tmp_qy));
  if (raw_qy != 0) {
    _internal_set_qy(from._internal_qy());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qz = from._internal_qz();
  uint64_t raw_qz;
  memcpy(&raw_qz, &tmp_qz, sizeof(tmp_qz));
  if (raw_qz != 0) {
    _internal_set_qz(from._internal_qz());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_qw = from._internal_qw();
  uint64_t raw_qw;
  memcpy(&raw_qw, &tmp_qw, sizeof(tmp_qw));
  if (raw_qw != 0) {
    _internal_set_qw(from._internal_qw());
  }
  if (from._internal_rot_off_z() != 0) {
    _internal_set_rot_off_z(from._internal_rot_off_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_IMU::CopyFrom(const Message_IMU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_IMU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_IMU::IsInitialized() const {
  return true;
}

void Message_IMU::InternalSwap(Message_IMU* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_IMU, rot_off_z_)
      + sizeof(Message_IMU::rot_off_z_)
      - PROTOBUF_FIELD_OFFSET(Message_IMU, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_IMU::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fimu_2eproto_getter, &descriptor_table_message_5fimu_2eproto_once,
      file_level_metadata_message_5fimu_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_ImuInstallInfo*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_ImuInstallInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_ImuInstallInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_IMU*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_IMU >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_IMU >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
