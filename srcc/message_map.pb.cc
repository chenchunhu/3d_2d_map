// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_map.proto

#include "message_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rbk {
namespace protocol {
PROTOBUF_CONSTEXPR Message_MapLogData::Message_MapLogData(
    ::_pbi::ConstantInitialized)
  : laser_beam_dist_()
  , laser_beam_angle_()
  , rssi_()
  , header_(nullptr)
  , robot_odo_x_(0)
  , robot_odo_y_(0)
  , robot_odo_w_(0){}
struct Message_MapLogDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapLogDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapLogDataDefaultTypeInternal() {}
  union {
    Message_MapLogData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapLogDataDefaultTypeInternal _Message_MapLogData_default_instance_;
PROTOBUF_CONSTEXPR Message_MapOdo::Message_MapOdo(
    ::_pbi::ConstantInitialized)
  : timestamp_(0)
  , odo_x_(0)
  , odo_y_(0)
  , odo_w_(0)
  , odo_vx_(0)
  , odo_vy_(0)
  , odo_vw_(0){}
struct Message_MapOdoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapOdoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapOdoDefaultTypeInternal() {}
  union {
    Message_MapOdo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapOdoDefaultTypeInternal _Message_MapOdo_default_instance_;
PROTOBUF_CONSTEXPR Message_MapLogData3D::Message_MapLogData3D(
    ::_pbi::ConstantInitialized)
  : x_()
  , y_()
  , z_()
  , intensity_()
  , _intensity_cached_byte_size_(0)
  , timeoffset_()
  , _timeoffset_cached_byte_size_(0)
  , ring_()
  , _ring_cached_byte_size_(0)
  , data_()
  , firstazimuth_()
  , secondazimuth_()
  , timestamp_(0){}
struct Message_MapLogData3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapLogData3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapLogData3DDefaultTypeInternal() {}
  union {
    Message_MapLogData3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapLogData3DDefaultTypeInternal _Message_MapLogData3D_default_instance_;
PROTOBUF_CONSTEXPR Message_MapLog::Message_MapLog(
    ::_pbi::ConstantInitialized)
  : log_data_()
  , odometer_()
  , log_data3d_()
  , imu_data_()
  , gnss_data_()
  , azimuthcorrection_()
  , verticalcorrection_()
  , all_gnss_data_()
  , laser_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , laser_pos_x_(0)
  , laser_pos_y_(0)
  , laser_pos_z_(0)
  , laser_step_(0)
  , laser_range_max_(0)
  , laser_install_height_(0)
  , laser_install_yaw_(0)
  , laser_install_pitch_(0)
  , laser_install_roll_(0)
  , lasertype_(0u)
  , factor_(0){}
struct Message_MapLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapLogDefaultTypeInternal() {}
  union {
    Message_MapLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapLogDefaultTypeInternal _Message_MapLog_default_instance_;
PROTOBUF_CONSTEXPR Message_MapProperty::Message_MapProperty(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct Message_MapPropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapPropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapPropertyDefaultTypeInternal() {}
  union {
    Message_MapProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapPropertyDefaultTypeInternal _Message_MapProperty_default_instance_;
PROTOBUF_CONSTEXPR Message_MapPos::Message_MapPos(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Message_MapPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapPosDefaultTypeInternal() {}
  union {
    Message_MapPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapPosDefaultTypeInternal _Message_MapPos_default_instance_;
PROTOBUF_CONSTEXPR Message_MapRSSIPos::Message_MapRSSIPos(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Message_MapRSSIPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapRSSIPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapRSSIPosDefaultTypeInternal() {}
  union {
    Message_MapRSSIPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapRSSIPosDefaultTypeInternal _Message_MapRSSIPos_default_instance_;
PROTOBUF_CONSTEXPR Message_ReflectorPos::Message_ReflectorPos(
    ::_pbi::ConstantInitialized)
  : type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , width_(0)
  , x_(0)
  , y_(0){}
struct Message_ReflectorPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ReflectorPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ReflectorPosDefaultTypeInternal() {}
  union {
    Message_ReflectorPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ReflectorPosDefaultTypeInternal _Message_ReflectorPos_default_instance_;
PROTOBUF_CONSTEXPR Message_LiveRefPos::Message_LiveRefPos(
    ::_pbi::ConstantInitialized)
  : ref_pos_(){}
struct Message_LiveRefPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_LiveRefPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_LiveRefPosDefaultTypeInternal() {}
  union {
    Message_LiveRefPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_LiveRefPosDefaultTypeInternal _Message_LiveRefPos_default_instance_;
PROTOBUF_CONSTEXPR Message_tagPos::Message_tagPos(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , tag_value_(0u)
  , is_dmt_detected_(false)
  , angle_(0){}
struct Message_tagPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_tagPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_tagPosDefaultTypeInternal() {}
  union {
    Message_tagPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_tagPosDefaultTypeInternal _Message_tagPos_default_instance_;
PROTOBUF_CONSTEXPR Message_MapLine::Message_MapLine(
    ::_pbi::ConstantInitialized)
  : start_pos_(nullptr)
  , end_pos_(nullptr){}
struct Message_MapLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapLineDefaultTypeInternal() {}
  union {
    Message_MapLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapLineDefaultTypeInternal _Message_MapLine_default_instance_;
PROTOBUF_CONSTEXPR Message_MapHeader::Message_MapHeader(
    ::_pbi::ConstantInitialized)
  : map_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , map_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , min_pos_(nullptr)
  , max_pos_(nullptr)
  , resolution_(0){}
struct Message_MapHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapHeaderDefaultTypeInternal() {}
  union {
    Message_MapHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapHeaderDefaultTypeInternal _Message_MapHeader_default_instance_;
PROTOBUF_CONSTEXPR Message_MapAttribute::Message_MapAttribute(
    ::_pbi::ConstantInitialized)
  : description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , color_pen_(0u)
  , color_brush_(0u)
  , color_font_(0u){}
struct Message_MapAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapAttributeDefaultTypeInternal() {}
  union {
    Message_MapAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapAttributeDefaultTypeInternal _Message_MapAttribute_default_instance_;
PROTOBUF_CONSTEXPR Message_AdvancedPoint::Message_AdvancedPoint(
    ::_pbi::ConstantInitialized)
  : property_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pos_(nullptr)
  , attribute_(nullptr)
  , dir_(0)
  , ignore_dir_(false){}
struct Message_AdvancedPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AdvancedPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AdvancedPointDefaultTypeInternal() {}
  union {
    Message_AdvancedPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AdvancedPointDefaultTypeInternal _Message_AdvancedPoint_default_instance_;
PROTOBUF_CONSTEXPR Message_AdvancedLine::Message_AdvancedLine(
    ::_pbi::ConstantInitialized)
  : property_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , line_(nullptr)
  , attribute_(nullptr){}
struct Message_AdvancedLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AdvancedLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AdvancedLineDefaultTypeInternal() {}
  union {
    Message_AdvancedLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AdvancedLineDefaultTypeInternal _Message_AdvancedLine_default_instance_;
PROTOBUF_CONSTEXPR Message_AdvancedCurve::Message_AdvancedCurve(
    ::_pbi::ConstantInitialized)
  : property_()
  , devices_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_pos_(nullptr)
  , end_pos_(nullptr)
  , control_pos1_(nullptr)
  , control_pos2_(nullptr)
  , control_pos3_(nullptr)
  , control_pos4_(nullptr)
  , attribute_(nullptr){}
struct Message_AdvancedCurveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AdvancedCurveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AdvancedCurveDefaultTypeInternal() {}
  union {
    Message_AdvancedCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AdvancedCurveDefaultTypeInternal _Message_AdvancedCurve_default_instance_;
PROTOBUF_CONSTEXPR Message_AdvancedArea::Message_AdvancedArea(
    ::_pbi::ConstantInitialized)
  : pos_group_()
  , property_()
  , devices_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attribute_(nullptr)
  , dir_(0){}
struct Message_AdvancedAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_AdvancedAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_AdvancedAreaDefaultTypeInternal() {}
  union {
    Message_AdvancedArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_AdvancedAreaDefaultTypeInternal _Message_AdvancedArea_default_instance_;
PROTOBUF_CONSTEXPR Message_VirtualLineList::Message_VirtualLineList(
    ::_pbi::ConstantInitialized)
  : virtual_map_line_(){}
struct Message_VirtualLineListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_VirtualLineListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_VirtualLineListDefaultTypeInternal() {}
  union {
    Message_VirtualLineList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_VirtualLineListDefaultTypeInternal _Message_VirtualLineList_default_instance_;
PROTOBUF_CONSTEXPR Message_LaserDevice::Message_LaserDevice(
    ::_pbi::ConstantInitialized)
  : laser_margin_pos_()
  , id_(0u){}
struct Message_LaserDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_LaserDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_LaserDeviceDefaultTypeInternal() {}
  union {
    Message_LaserDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_LaserDeviceDefaultTypeInternal _Message_LaserDevice_default_instance_;
PROTOBUF_CONSTEXPR Message_Device::Message_Device(
    ::_pbi::ConstantInitialized)
  : laser_devices_()
  , ultrasonic_dist_()
  , fallingdown_dist_()
  , model_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Message_DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_DeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_DeviceDefaultTypeInternal() {}
  union {
    Message_Device _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_DeviceDefaultTypeInternal _Message_Device_default_instance_;
PROTOBUF_CONSTEXPR Message_PatrolRouteStation::Message_PatrolRouteStation(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct Message_PatrolRouteStationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PatrolRouteStationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PatrolRouteStationDefaultTypeInternal() {}
  union {
    Message_PatrolRouteStation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PatrolRouteStationDefaultTypeInternal _Message_PatrolRouteStation_default_instance_;
PROTOBUF_CONSTEXPR Message_PatrolRoute::Message_PatrolRoute(
    ::_pbi::ConstantInitialized)
  : station_list_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , max_speed_(nullptr)
  , max_acc_(nullptr)
  , max_rot_(nullptr)
  , max_rot_acc_(nullptr)
  , max_dec_(nullptr)
  , max_rot_dec_(nullptr){}
struct Message_PatrolRouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PatrolRouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PatrolRouteDefaultTypeInternal() {}
  union {
    Message_PatrolRoute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PatrolRouteDefaultTypeInternal _Message_PatrolRoute_default_instance_;
PROTOBUF_CONSTEXPR Message_Primitive::Message_Primitive(
    ::_pbi::ConstantInitialized)
  : control_pos_list_()
  , property_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , start_pos_(nullptr)
  , end_pos_(nullptr)
  , attribute_(nullptr){}
struct Message_PrimitiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_PrimitiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_PrimitiveDefaultTypeInternal() {}
  union {
    Message_Primitive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_PrimitiveDefaultTypeInternal _Message_Primitive_default_instance_;
PROTOBUF_CONSTEXPR Message_ExternalDevice::Message_ExternalDevice(
    ::_pbi::ConstantInitialized)
  : property_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attribute_(nullptr)
  , is_enabled_(false){}
struct Message_ExternalDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_ExternalDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_ExternalDeviceDefaultTypeInternal() {}
  union {
    Message_ExternalDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_ExternalDeviceDefaultTypeInternal _Message_ExternalDevice_default_instance_;
PROTOBUF_CONSTEXPR Message_BinLocation::Message_BinLocation(
    ::_pbi::ConstantInitialized)
  : property_()
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instance_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , group_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , point_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , desc_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pos_(nullptr)
  , attribute_(nullptr){}
struct Message_BinLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_BinLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_BinLocationDefaultTypeInternal() {}
  union {
    Message_BinLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_BinLocationDefaultTypeInternal _Message_BinLocation_default_instance_;
PROTOBUF_CONSTEXPR Message_BinLocations::Message_BinLocations(
    ::_pbi::ConstantInitialized)
  : bin_location_list_(){}
struct Message_BinLocationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_BinLocationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_BinLocationsDefaultTypeInternal() {}
  union {
    Message_BinLocations _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_BinLocationsDefaultTypeInternal _Message_BinLocations_default_instance_;
PROTOBUF_CONSTEXPR Message_Map::Message_Map(
    ::_pbi::ConstantInitialized)
  : normal_pos_list_()
  , normal_line_list_()
  , normal_pos3d_list_()
  , advanced_point_list_()
  , advanced_line_list_()
  , advanced_curve_list_()
  , advanced_area_list_()
  , patrol_route_list_()
  , rssi_pos_list_()
  , reflector_pos_list_()
  , tag_pos_list_()
  , primitive_list_()
  , external_device_list_()
  , bin_locations_list_()
  , user_data_()
  , map_directory_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr){}
struct Message_MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_MapDefaultTypeInternal() {}
  union {
    Message_Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_MapDefaultTypeInternal _Message_Map_default_instance_;
PROTOBUF_CONSTEXPR Message_Map3D::Message_Map3D(
    ::_pbi::ConstantInitialized)
  : normal_pos3d_list_()
  , map_directory_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr){}
struct Message_Map3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Message_Map3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Message_Map3DDefaultTypeInternal() {}
  union {
    Message_Map3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Message_Map3DDefaultTypeInternal _Message_Map3D_default_instance_;
}  // namespace protocol
}  // namespace rbk
static ::_pb::Metadata file_level_metadata_message_5fmap_2eproto[28];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_5fmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_5fmap_2eproto = nullptr;

const uint32_t TableStruct_message_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, robot_odo_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, robot_odo_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, robot_odo_w_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, laser_beam_dist_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, laser_beam_angle_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, rssi_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, odo_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, odo_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, odo_w_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, odo_vx_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, odo_vy_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapOdo, odo_vw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, timestamp_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, intensity_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, timeoffset_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, ring_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, data_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, firstazimuth_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLogData3D, secondazimuth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_pos_x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_pos_y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_pos_z_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_step_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_range_max_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, log_data_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_install_height_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, odometer_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, log_data3d_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_install_yaw_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_install_pitch_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, laser_install_roll_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, imu_data_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, gnss_data_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, lasertype_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, factor_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, azimuthcorrection_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, verticalcorrection_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLog, all_gnss_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, key_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, type_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, value_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, tag_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapProperty, oneof_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapPos, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapPos, y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapPos, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapRSSIPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapRSSIPos, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapRSSIPos, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ReflectorPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ReflectorPos, type_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ReflectorPos, width_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ReflectorPos, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ReflectorPos, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_LiveRefPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_LiveRefPos, ref_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_tagPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_tagPos, tag_value_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_tagPos, x_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_tagPos, y_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_tagPos, angle_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_tagPos, is_dmt_detected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLine, start_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapLine, end_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, map_type_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, map_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, min_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, max_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, resolution_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapHeader, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapAttribute, description_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapAttribute, color_pen_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapAttribute, color_brush_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_MapAttribute, color_font_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, dir_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, ignore_dir_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedPoint, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, line_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedLine, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, start_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, end_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, control_pos1_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, control_pos2_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, control_pos3_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, control_pos4_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, devices_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedCurve, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, pos_group_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, dir_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, devices_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_AdvancedArea, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_VirtualLineList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_VirtualLineList, virtual_map_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_LaserDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_LaserDevice, id_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_LaserDevice, laser_margin_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Device, model_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Device, laser_devices_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Device, ultrasonic_dist_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Device, fallingdown_dist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRouteStation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRouteStation, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, station_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, max_speed_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, max_acc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, max_rot_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, max_rot_acc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, max_dec_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_PatrolRoute, max_rot_dec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, start_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, end_pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, control_pos_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Primitive, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_ExternalDevice, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, class_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, instance_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, group_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, point_name_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, pos_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, property_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, desc_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocation, attribute_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_BinLocations, bin_location_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, map_directory_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, header_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, normal_pos_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, normal_line_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, normal_pos3d_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, advanced_point_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, advanced_line_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, advanced_curve_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, advanced_area_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, patrol_route_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, rssi_pos_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, reflector_pos_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, tag_pos_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, primitive_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, external_device_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, bin_locations_list_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map, user_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map3D, map_directory_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map3D, header_),
  PROTOBUF_FIELD_OFFSET(::rbk::protocol::Message_Map3D, normal_pos3d_list_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rbk::protocol::Message_MapLogData)},
  { 13, -1, -1, sizeof(::rbk::protocol::Message_MapOdo)},
  { 26, -1, -1, sizeof(::rbk::protocol::Message_MapLogData3D)},
  { 42, -1, -1, sizeof(::rbk::protocol::Message_MapLog)},
  { 68, -1, -1, sizeof(::rbk::protocol::Message_MapProperty)},
  { 88, -1, -1, sizeof(::rbk::protocol::Message_MapPos)},
  { 97, -1, -1, sizeof(::rbk::protocol::Message_MapRSSIPos)},
  { 105, -1, -1, sizeof(::rbk::protocol::Message_ReflectorPos)},
  { 115, -1, -1, sizeof(::rbk::protocol::Message_LiveRefPos)},
  { 122, -1, -1, sizeof(::rbk::protocol::Message_tagPos)},
  { 133, -1, -1, sizeof(::rbk::protocol::Message_MapLine)},
  { 141, -1, -1, sizeof(::rbk::protocol::Message_MapHeader)},
  { 153, -1, -1, sizeof(::rbk::protocol::Message_MapAttribute)},
  { 163, -1, -1, sizeof(::rbk::protocol::Message_AdvancedPoint)},
  { 177, -1, -1, sizeof(::rbk::protocol::Message_AdvancedLine)},
  { 189, -1, -1, sizeof(::rbk::protocol::Message_AdvancedCurve)},
  { 207, -1, -1, sizeof(::rbk::protocol::Message_AdvancedArea)},
  { 221, -1, -1, sizeof(::rbk::protocol::Message_VirtualLineList)},
  { 228, -1, -1, sizeof(::rbk::protocol::Message_LaserDevice)},
  { 236, -1, -1, sizeof(::rbk::protocol::Message_Device)},
  { 246, -1, -1, sizeof(::rbk::protocol::Message_PatrolRouteStation)},
  { 253, -1, -1, sizeof(::rbk::protocol::Message_PatrolRoute)},
  { 268, -1, -1, sizeof(::rbk::protocol::Message_Primitive)},
  { 282, -1, -1, sizeof(::rbk::protocol::Message_ExternalDevice)},
  { 294, -1, -1, sizeof(::rbk::protocol::Message_BinLocation)},
  { 308, -1, -1, sizeof(::rbk::protocol::Message_BinLocations)},
  { 315, -1, -1, sizeof(::rbk::protocol::Message_Map)},
  { 338, -1, -1, sizeof(::rbk::protocol::Message_Map3D)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rbk::protocol::_Message_MapLogData_default_instance_._instance,
  &::rbk::protocol::_Message_MapOdo_default_instance_._instance,
  &::rbk::protocol::_Message_MapLogData3D_default_instance_._instance,
  &::rbk::protocol::_Message_MapLog_default_instance_._instance,
  &::rbk::protocol::_Message_MapProperty_default_instance_._instance,
  &::rbk::protocol::_Message_MapPos_default_instance_._instance,
  &::rbk::protocol::_Message_MapRSSIPos_default_instance_._instance,
  &::rbk::protocol::_Message_ReflectorPos_default_instance_._instance,
  &::rbk::protocol::_Message_LiveRefPos_default_instance_._instance,
  &::rbk::protocol::_Message_tagPos_default_instance_._instance,
  &::rbk::protocol::_Message_MapLine_default_instance_._instance,
  &::rbk::protocol::_Message_MapHeader_default_instance_._instance,
  &::rbk::protocol::_Message_MapAttribute_default_instance_._instance,
  &::rbk::protocol::_Message_AdvancedPoint_default_instance_._instance,
  &::rbk::protocol::_Message_AdvancedLine_default_instance_._instance,
  &::rbk::protocol::_Message_AdvancedCurve_default_instance_._instance,
  &::rbk::protocol::_Message_AdvancedArea_default_instance_._instance,
  &::rbk::protocol::_Message_VirtualLineList_default_instance_._instance,
  &::rbk::protocol::_Message_LaserDevice_default_instance_._instance,
  &::rbk::protocol::_Message_Device_default_instance_._instance,
  &::rbk::protocol::_Message_PatrolRouteStation_default_instance_._instance,
  &::rbk::protocol::_Message_PatrolRoute_default_instance_._instance,
  &::rbk::protocol::_Message_Primitive_default_instance_._instance,
  &::rbk::protocol::_Message_ExternalDevice_default_instance_._instance,
  &::rbk::protocol::_Message_BinLocation_default_instance_._instance,
  &::rbk::protocol::_Message_BinLocations_default_instance_._instance,
  &::rbk::protocol::_Message_Map_default_instance_._instance,
  &::rbk::protocol::_Message_Map3D_default_instance_._instance,
};

const char descriptor_table_protodef_message_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021message_map.proto\022\014rbk.protocol\032\036googl"
  "e/protobuf/wrappers.proto\032\024message_heade"
  "r.proto\032\021message_imu.proto\032\022message_gnss"
  ".proto\"\302\001\n\022Message_MapLogData\022\023\n\013robot_o"
  "do_x\030\001 \001(\001\022\023\n\013robot_odo_y\030\002 \001(\001\022\023\n\013robot"
  "_odo_w\030\003 \001(\001\022\027\n\017laser_beam_dist\030\004 \003(\001\022\030\n"
  "\020laser_beam_angle\030\005 \003(\001\022\014\n\004rssi\030\006 \003(\001\022,\n"
  "\006header\030\007 \001(\0132\034.rbk.protocol.Message_Hea"
  "der\"\200\001\n\016Message_MapOdo\022\021\n\ttimestamp\030\001 \001("
  "\001\022\r\n\005odo_x\030\002 \001(\002\022\r\n\005odo_y\030\003 \001(\002\022\r\n\005odo_w"
  "\030\004 \001(\002\022\016\n\006odo_vx\030\005 \001(\002\022\016\n\006odo_vy\030\006 \001(\002\022\016"
  "\n\006odo_vw\030\007 \001(\002\"\272\001\n\024Message_MapLogData3D\022"
  "\021\n\ttimestamp\030\001 \001(\001\022\t\n\001x\030\002 \003(\002\022\t\n\001y\030\003 \003(\002"
  "\022\t\n\001z\030\004 \003(\002\022\021\n\tintensity\030\005 \003(\r\022\022\n\ntimeof"
  "fset\030\006 \003(\r\022\014\n\004ring\030\007 \003(\r\022\014\n\004data\030\010 \003(\014\022\024"
  "\n\014firstAzimuth\030\t \003(\002\022\025\n\rsecondAzimuth\030\n "
  "\003(\002\"\212\005\n\016Message_MapLog\022\023\n\013laser_pos_x\030\001 "
  "\001(\001\022\023\n\013laser_pos_y\030\002 \001(\001\022\023\n\013laser_pos_z\030"
  "\003 \001(\001\022\022\n\nlaser_step\030\004 \001(\001\022\027\n\017laser_range"
  "_max\030\005 \001(\001\0222\n\010log_data\030\006 \003(\0132 .rbk.proto"
  "col.Message_MapLogData\022\022\n\nlaser_name\030\007 \001"
  "(\t\022\034\n\024laser_install_height\030\010 \001(\001\022.\n\010odom"
  "eter\030\t \003(\0132\034.rbk.protocol.Message_MapOdo"
  "\0226\n\nlog_data3d\030\n \003(\0132\".rbk.protocol.Mess"
  "age_MapLogData3D\022\031\n\021laser_install_yaw\030\013 "
  "\001(\001\022\033\n\023laser_install_pitch\030\014 \001(\001\022\032\n\022lase"
  "r_install_roll\030\r \001(\001\022+\n\010imu_data\030\016 \003(\0132\031"
  ".rbk.protocol.Message_IMU\022-\n\tgnss_data\030\017"
  " \003(\0132\032.rbk.protocol.Message_GNSS\022\021\n\tlase"
  "rtype\030\020 \001(\r\022\016\n\006factor\030\021 \001(\002\022\031\n\021azimuthco"
  "rrection\030\022 \003(\002\022\032\n\022verticalcorrection\030\023 \003"
  "(\002\0224\n\rall_gnss_data\030\024 \003(\0132\035.rbk.protocol"
  ".Message_AllGNSS\"\255\002\n\023Message_MapProperty"
  "\022\013\n\003key\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\r\n\005value\030\003 \001"
  "(\014\022\026\n\014string_value\030\004 \001(\tH\000\022\024\n\nbool_value"
  "\030\005 \001(\010H\000\022\025\n\013int32_value\030\006 \001(\005H\000\022\026\n\014uint3"
  "2_value\030\007 \001(\rH\000\022\025\n\013int64_value\030\010 \001(\003H\000\022\026"
  "\n\014uint64_value\030\t \001(\004H\000\022\025\n\013float_value\030\n "
  "\001(\002H\000\022\026\n\014double_value\030\013 \001(\001H\000\022\025\n\013bytes_v"
  "alue\030\014 \001(\014H\000\022\013\n\003tag\030\r \001(\tB\r\n\013oneof_value"
  "\"1\n\016Message_MapPos\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001"
  "\022\t\n\001z\030\003 \001(\001\"*\n\022Message_MapRSSIPos\022\t\n\001x\030\001"
  " \001(\001\022\t\n\001y\030\002 \001(\001\"I\n\024Message_ReflectorPos\022"
  "\014\n\004type\030\001 \001(\t\022\r\n\005width\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022"
  "\t\n\001y\030\004 \001(\001\"I\n\022Message_LiveRefPos\0223\n\007ref_"
  "pos\030\001 \003(\0132\".rbk.protocol.Message_Reflect"
  "orPos\"a\n\016Message_tagPos\022\021\n\ttag_value\030\001 \001"
  "(\r\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\r\n\005angle\030\004 \001(\001\022"
  "\027\n\017is_DMT_detected\030\005 \001(\010\"q\n\017Message_MapL"
  "ine\022/\n\tstart_pos\030\001 \001(\0132\034.rbk.protocol.Me"
  "ssage_MapPos\022-\n\007end_pos\030\002 \001(\0132\034.rbk.prot"
  "ocol.Message_MapPos\"\272\001\n\021Message_MapHeade"
  "r\022\020\n\010map_type\030\001 \001(\t\022\020\n\010map_name\030\002 \001(\t\022-\n"
  "\007min_pos\030\003 \001(\0132\034.rbk.protocol.Message_Ma"
  "pPos\022-\n\007max_pos\030\004 \001(\0132\034.rbk.protocol.Mes"
  "sage_MapPos\022\022\n\nresolution\030\005 \001(\001\022\017\n\007versi"
  "on\030\010 \001(\t\"g\n\024Message_MapAttribute\022\023\n\013desc"
  "ription\030\001 \001(\t\022\021\n\tcolor_pen\030\002 \001(\r\022\023\n\013colo"
  "r_brush\030\003 \001(\r\022\022\n\ncolor_font\030\004 \001(\r\"\210\002\n\025Me"
  "ssage_AdvancedPoint\022\022\n\nclass_name\030\001 \001(\t\022"
  "\025\n\rinstance_name\030\002 \001(\t\022)\n\003pos\030\003 \001(\0132\034.rb"
  "k.protocol.Message_MapPos\022\013\n\003dir\030\004 \001(\001\0223"
  "\n\010property\030\005 \003(\0132!.rbk.protocol.Message_"
  "MapProperty\022\022\n\nignore_dir\030\006 \001(\010\022\014\n\004desc\030"
  "\010 \001(\014\0225\n\tattribute\030\n \001(\0132\".rbk.protocol."
  "Message_MapAttribute\"\350\001\n\024Message_Advance"
  "dLine\022\022\n\nclass_name\030\001 \001(\t\022\025\n\rinstance_na"
  "me\030\002 \001(\t\022+\n\004line\030\003 \001(\0132\035.rbk.protocol.Me"
  "ssage_MapLine\0223\n\010property\030\004 \003(\0132!.rbk.pr"
  "otocol.Message_MapProperty\022\014\n\004desc\030\010 \001(\014"
  "\0225\n\tattribute\030\n \001(\0132\".rbk.protocol.Messa"
  "ge_MapAttribute\"\251\004\n\025Message_AdvancedCurv"
  "e\022\022\n\nclass_name\030\001 \001(\t\022\025\n\rinstance_name\030\002"
  " \001(\t\0226\n\tstart_pos\030\003 \001(\0132#.rbk.protocol.M"
  "essage_AdvancedPoint\0224\n\007end_pos\030\004 \001(\0132#."
  "rbk.protocol.Message_AdvancedPoint\0222\n\014co"
  "ntrol_pos1\030\005 \001(\0132\034.rbk.protocol.Message_"
  "MapPos\0222\n\014control_pos2\030\006 \001(\0132\034.rbk.proto"
  "col.Message_MapPos\0223\n\010property\030\007 \003(\0132!.r"
  "bk.protocol.Message_MapProperty\022\014\n\004desc\030"
  "\010 \001(\014\0222\n\014control_pos3\030\t \001(\0132\034.rbk.protoc"
  "ol.Message_MapPos\0222\n\014control_pos4\030\n \001(\0132"
  "\034.rbk.protocol.Message_MapPos\022-\n\007devices"
  "\030\014 \003(\0132\034.rbk.protocol.Message_Device\0225\n\t"
  "attribute\030\017 \001(\0132\".rbk.protocol.Message_M"
  "apAttribute\"\250\002\n\024Message_AdvancedArea\022\022\n\n"
  "class_name\030\001 \001(\t\022\025\n\rinstance_name\030\002 \001(\t\022"
  "/\n\tpos_group\030\003 \003(\0132\034.rbk.protocol.Messag"
  "e_MapPos\022\013\n\003dir\030\004 \001(\001\0223\n\010property\030\005 \003(\0132"
  "!.rbk.protocol.Message_MapProperty\022\014\n\004de"
  "sc\030\010 \001(\014\022-\n\007devices\030\n \003(\0132\034.rbk.protocol"
  ".Message_Device\0225\n\tattribute\030\017 \001(\0132\".rbk"
  ".protocol.Message_MapAttribute\"R\n\027Messag"
  "e_VirtualLineList\0227\n\020virtual_map_line\030\001 "
  "\003(\0132\035.rbk.protocol.Message_MapLine\"Y\n\023Me"
  "ssage_LaserDevice\022\n\n\002id\030\001 \001(\r\0226\n\020laser_m"
  "argin_pos\030\002 \003(\0132\034.rbk.protocol.Message_M"
  "apPos\"\221\001\n\016Message_Device\022\022\n\nmodel_name\030\001"
  " \001(\t\0228\n\rlaser_devices\030\005 \003(\0132!.rbk.protoc"
  "ol.Message_LaserDevice\022\027\n\017ultrasonic_dis"
  "t\030\006 \003(\001\022\030\n\020fallingdown_dist\030\007 \003(\001\"(\n\032Mes"
  "sage_PatrolRouteStation\022\n\n\002id\030\001 \001(\t\"\225\003\n\023"
  "Message_PatrolRoute\022\014\n\004name\030\001 \001(\t\022>\n\014sta"
  "tion_list\030\002 \003(\0132(.rbk.protocol.Message_P"
  "atrolRouteStation\022/\n\tmax_speed\030\004 \001(\0132\034.g"
  "oogle.protobuf.DoubleValue\022-\n\007max_acc\030\005 "
  "\001(\0132\034.google.protobuf.DoubleValue\022-\n\007max"
  "_rot\030\006 \001(\0132\034.google.protobuf.DoubleValue"
  "\0221\n\013max_rot_acc\030\007 \001(\0132\034.google.protobuf."
  "DoubleValue\022\014\n\004desc\030\010 \001(\014\022-\n\007max_dec\030\t \001"
  "(\0132\034.google.protobuf.DoubleValue\0221\n\013max_"
  "rot_dec\030\n \001(\0132\034.google.protobuf.DoubleVa"
  "lue\"\336\002\n\021Message_Primitive\022\022\n\nclass_name\030"
  "\001 \001(\t\022\025\n\rinstance_name\030\002 \001(\t\0226\n\tstart_po"
  "s\030\003 \001(\0132#.rbk.protocol.Message_AdvancedP"
  "oint\0224\n\007end_pos\030\004 \001(\0132#.rbk.protocol.Mes"
  "sage_AdvancedPoint\0226\n\020control_pos_list\030\005"
  " \003(\0132\034.rbk.protocol.Message_MapPos\0223\n\010pr"
  "operty\030\006 \003(\0132!.rbk.protocol.Message_MapP"
  "roperty\022\014\n\004desc\030\007 \001(\014\0225\n\tattribute\030\010 \001(\013"
  "2\".rbk.protocol.Message_MapAttribute\"\321\001\n"
  "\026Message_ExternalDevice\022\022\n\nclass_name\030\001 "
  "\001(\t\022\025\n\rinstance_name\030\002 \001(\t\022\022\n\nis_enabled"
  "\030\003 \001(\010\0223\n\010property\030\004 \003(\0132!.rbk.protocol."
  "Message_MapProperty\022\014\n\004desc\030\005 \001(\014\0225\n\tatt"
  "ribute\030\006 \001(\0132\".rbk.protocol.Message_MapA"
  "ttribute\"\215\002\n\023Message_BinLocation\022\022\n\nclas"
  "s_name\030\001 \001(\t\022\025\n\rinstance_name\030\002 \001(\t\022\022\n\ng"
  "roup_name\030\003 \001(\t\022\022\n\npoint_name\030\004 \001(\t\022)\n\003p"
  "os\030\005 \001(\0132\034.rbk.protocol.Message_MapPos\0223"
  "\n\010property\030\006 \003(\0132!.rbk.protocol.Message_"
  "MapProperty\022\014\n\004desc\030\007 \001(\014\0225\n\tattribute\030\010"
  " \001(\0132\".rbk.protocol.Message_MapAttribute"
  "\"T\n\024Message_BinLocations\022<\n\021bin_location"
  "_list\030\001 \003(\0132!.rbk.protocol.Message_BinLo"
  "cation\"\340\007\n\013Message_Map\022\025\n\rmap_directory\030"
  "\001 \001(\t\022/\n\006header\030\002 \001(\0132\037.rbk.protocol.Mes"
  "sage_MapHeader\0225\n\017normal_pos_list\030\003 \003(\0132"
  "\034.rbk.protocol.Message_MapPos\0227\n\020normal_"
  "line_list\030\004 \003(\0132\035.rbk.protocol.Message_M"
  "apLine\0227\n\021normal_pos3d_list\030\005 \003(\0132\034.rbk."
  "protocol.Message_MapPos\022@\n\023advanced_poin"
  "t_list\030\006 \003(\0132#.rbk.protocol.Message_Adva"
  "ncedPoint\022>\n\022advanced_line_list\030\007 \003(\0132\"."
  "rbk.protocol.Message_AdvancedLine\022@\n\023adv"
  "anced_curve_list\030\010 \003(\0132#.rbk.protocol.Me"
  "ssage_AdvancedCurve\022>\n\022advanced_area_lis"
  "t\030\t \003(\0132\".rbk.protocol.Message_AdvancedA"
  "rea\022<\n\021patrol_route_list\030\n \003(\0132!.rbk.pro"
  "tocol.Message_PatrolRoute\0227\n\rrssi_pos_li"
  "st\030\013 \003(\0132 .rbk.protocol.Message_MapRSSIP"
  "os\022>\n\022reflector_pos_list\030\014 \003(\0132\".rbk.pro"
  "tocol.Message_ReflectorPos\0222\n\014tag_pos_li"
  "st\030\r \003(\0132\034.rbk.protocol.Message_tagPos\0227"
  "\n\016primitive_list\030\016 \003(\0132\037.rbk.protocol.Me"
  "ssage_Primitive\022B\n\024external_device_list\030"
  "\017 \003(\0132$.rbk.protocol.Message_ExternalDev"
  "ice\022>\n\022bin_locations_list\030\020 \003(\0132\".rbk.pr"
  "otocol.Message_BinLocations\0224\n\tuser_data"
  "\030d \003(\0132!.rbk.protocol.Message_MapPropert"
  "y\"\220\001\n\rMessage_Map3D\022\025\n\rmap_directory\030\001 \001"
  "(\t\022/\n\006header\030\002 \001(\0132\037.rbk.protocol.Messag"
  "e_MapHeader\0227\n\021normal_pos3d_list\030\003 \003(\0132\034"
  ".rbk.protocol.Message_MapPosb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_message_5fmap_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_message_5fgnss_2eproto,
  &::descriptor_table_message_5fheader_2eproto,
  &::descriptor_table_message_5fimu_2eproto,
};
static ::_pbi::once_flag descriptor_table_message_5fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_5fmap_2eproto = {
    false, false, 6556, descriptor_table_protodef_message_5fmap_2eproto,
    "message_map.proto",
    &descriptor_table_message_5fmap_2eproto_once, descriptor_table_message_5fmap_2eproto_deps, 4, 28,
    schemas, file_default_instances, TableStruct_message_5fmap_2eproto::offsets,
    file_level_metadata_message_5fmap_2eproto, file_level_enum_descriptors_message_5fmap_2eproto,
    file_level_service_descriptors_message_5fmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_5fmap_2eproto_getter() {
  return &descriptor_table_message_5fmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_5fmap_2eproto(&descriptor_table_message_5fmap_2eproto);
namespace rbk {
namespace protocol {

// ===================================================================

class Message_MapLogData::_Internal {
 public:
  static const ::rbk::protocol::Message_Header& header(const Message_MapLogData* msg);
};

const ::rbk::protocol::Message_Header&
Message_MapLogData::_Internal::header(const Message_MapLogData* msg) {
  return *msg->header_;
}
void Message_MapLogData::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Message_MapLogData::Message_MapLogData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  laser_beam_dist_(arena),
  laser_beam_angle_(arena),
  rssi_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapLogData)
}
Message_MapLogData::Message_MapLogData(const Message_MapLogData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      laser_beam_dist_(from.laser_beam_dist_),
      laser_beam_angle_(from.laser_beam_angle_),
      rssi_(from.rssi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rbk::protocol::Message_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&robot_odo_x_, &from.robot_odo_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_odo_w_) -
    reinterpret_cast<char*>(&robot_odo_x_)) + sizeof(robot_odo_w_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapLogData)
}

inline void Message_MapLogData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&robot_odo_w_) -
    reinterpret_cast<char*>(&header_)) + sizeof(robot_odo_w_));
}

Message_MapLogData::~Message_MapLogData() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapLogData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapLogData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Message_MapLogData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapLogData::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapLogData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  laser_beam_dist_.Clear();
  laser_beam_angle_.Clear();
  rssi_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&robot_odo_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_odo_w_) -
      reinterpret_cast<char*>(&robot_odo_x_)) + sizeof(robot_odo_w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapLogData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double robot_odo_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          robot_odo_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double robot_odo_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          robot_odo_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double robot_odo_w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          robot_odo_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double laser_beam_dist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_laser_beam_dist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_laser_beam_dist(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double laser_beam_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_laser_beam_angle(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_laser_beam_angle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double rssi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_rssi(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_rssi(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_Header header = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapLogData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapLogData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double robot_odo_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_x = this->_internal_robot_odo_x();
  uint64_t raw_robot_odo_x;
  memcpy(&raw_robot_odo_x, &tmp_robot_odo_x, sizeof(tmp_robot_odo_x));
  if (raw_robot_odo_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_robot_odo_x(), target);
  }

  // double robot_odo_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_y = this->_internal_robot_odo_y();
  uint64_t raw_robot_odo_y;
  memcpy(&raw_robot_odo_y, &tmp_robot_odo_y, sizeof(tmp_robot_odo_y));
  if (raw_robot_odo_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_robot_odo_y(), target);
  }

  // double robot_odo_w = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_w = this->_internal_robot_odo_w();
  uint64_t raw_robot_odo_w;
  memcpy(&raw_robot_odo_w, &tmp_robot_odo_w, sizeof(tmp_robot_odo_w));
  if (raw_robot_odo_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_robot_odo_w(), target);
  }

  // repeated double laser_beam_dist = 4;
  if (this->_internal_laser_beam_dist_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_laser_beam_dist(), target);
  }

  // repeated double laser_beam_angle = 5;
  if (this->_internal_laser_beam_angle_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_laser_beam_angle(), target);
  }

  // repeated double rssi = 6;
  if (this->_internal_rssi_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_rssi(), target);
  }

  // .rbk.protocol.Message_Header header = 7;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapLogData)
  return target;
}

size_t Message_MapLogData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapLogData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double laser_beam_dist = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_laser_beam_dist_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double laser_beam_angle = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_laser_beam_angle_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double rssi = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rssi_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .rbk.protocol.Message_Header header = 7;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // double robot_odo_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_x = this->_internal_robot_odo_x();
  uint64_t raw_robot_odo_x;
  memcpy(&raw_robot_odo_x, &tmp_robot_odo_x, sizeof(tmp_robot_odo_x));
  if (raw_robot_odo_x != 0) {
    total_size += 1 + 8;
  }

  // double robot_odo_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_y = this->_internal_robot_odo_y();
  uint64_t raw_robot_odo_y;
  memcpy(&raw_robot_odo_y, &tmp_robot_odo_y, sizeof(tmp_robot_odo_y));
  if (raw_robot_odo_y != 0) {
    total_size += 1 + 8;
  }

  // double robot_odo_w = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_w = this->_internal_robot_odo_w();
  uint64_t raw_robot_odo_w;
  memcpy(&raw_robot_odo_w, &tmp_robot_odo_w, sizeof(tmp_robot_odo_w));
  if (raw_robot_odo_w != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapLogData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapLogData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapLogData::GetClassData() const { return &_class_data_; }

void Message_MapLogData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapLogData *>(to)->MergeFrom(
      static_cast<const Message_MapLogData &>(from));
}


void Message_MapLogData::MergeFrom(const Message_MapLogData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapLogData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  laser_beam_dist_.MergeFrom(from.laser_beam_dist_);
  laser_beam_angle_.MergeFrom(from.laser_beam_angle_);
  rssi_.MergeFrom(from.rssi_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::rbk::protocol::Message_Header::MergeFrom(from._internal_header());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_x = from._internal_robot_odo_x();
  uint64_t raw_robot_odo_x;
  memcpy(&raw_robot_odo_x, &tmp_robot_odo_x, sizeof(tmp_robot_odo_x));
  if (raw_robot_odo_x != 0) {
    _internal_set_robot_odo_x(from._internal_robot_odo_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_y = from._internal_robot_odo_y();
  uint64_t raw_robot_odo_y;
  memcpy(&raw_robot_odo_y, &tmp_robot_odo_y, sizeof(tmp_robot_odo_y));
  if (raw_robot_odo_y != 0) {
    _internal_set_robot_odo_y(from._internal_robot_odo_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_robot_odo_w = from._internal_robot_odo_w();
  uint64_t raw_robot_odo_w;
  memcpy(&raw_robot_odo_w, &tmp_robot_odo_w, sizeof(tmp_robot_odo_w));
  if (raw_robot_odo_w != 0) {
    _internal_set_robot_odo_w(from._internal_robot_odo_w());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapLogData::CopyFrom(const Message_MapLogData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapLogData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapLogData::IsInitialized() const {
  return true;
}

void Message_MapLogData::InternalSwap(Message_MapLogData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  laser_beam_dist_.InternalSwap(&other->laser_beam_dist_);
  laser_beam_angle_.InternalSwap(&other->laser_beam_angle_);
  rssi_.InternalSwap(&other->rssi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapLogData, robot_odo_w_)
      + sizeof(Message_MapLogData::robot_odo_w_)
      - PROTOBUF_FIELD_OFFSET(Message_MapLogData, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapLogData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[0]);
}

// ===================================================================

class Message_MapOdo::_Internal {
 public:
};

Message_MapOdo::Message_MapOdo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapOdo)
}
Message_MapOdo::Message_MapOdo(const Message_MapOdo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&odo_vw_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(odo_vw_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapOdo)
}

inline void Message_MapOdo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&odo_vw_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(odo_vw_));
}

Message_MapOdo::~Message_MapOdo() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapOdo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapOdo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_MapOdo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapOdo::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapOdo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odo_vw_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(odo_vw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapOdo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float odo_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          odo_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float odo_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          odo_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float odo_w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          odo_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float odo_vx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          odo_vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float odo_vy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          odo_vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float odo_vw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          odo_vw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapOdo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapOdo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // float odo_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_x = this->_internal_odo_x();
  uint32_t raw_odo_x;
  memcpy(&raw_odo_x, &tmp_odo_x, sizeof(tmp_odo_x));
  if (raw_odo_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_odo_x(), target);
  }

  // float odo_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_y = this->_internal_odo_y();
  uint32_t raw_odo_y;
  memcpy(&raw_odo_y, &tmp_odo_y, sizeof(tmp_odo_y));
  if (raw_odo_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_odo_y(), target);
  }

  // float odo_w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_w = this->_internal_odo_w();
  uint32_t raw_odo_w;
  memcpy(&raw_odo_w, &tmp_odo_w, sizeof(tmp_odo_w));
  if (raw_odo_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_odo_w(), target);
  }

  // float odo_vx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vx = this->_internal_odo_vx();
  uint32_t raw_odo_vx;
  memcpy(&raw_odo_vx, &tmp_odo_vx, sizeof(tmp_odo_vx));
  if (raw_odo_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_odo_vx(), target);
  }

  // float odo_vy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vy = this->_internal_odo_vy();
  uint32_t raw_odo_vy;
  memcpy(&raw_odo_vy, &tmp_odo_vy, sizeof(tmp_odo_vy));
  if (raw_odo_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_odo_vy(), target);
  }

  // float odo_vw = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vw = this->_internal_odo_vw();
  uint32_t raw_odo_vw;
  memcpy(&raw_odo_vw, &tmp_odo_vw, sizeof(tmp_odo_vw));
  if (raw_odo_vw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_odo_vw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapOdo)
  return target;
}

size_t Message_MapOdo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapOdo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  // float odo_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_x = this->_internal_odo_x();
  uint32_t raw_odo_x;
  memcpy(&raw_odo_x, &tmp_odo_x, sizeof(tmp_odo_x));
  if (raw_odo_x != 0) {
    total_size += 1 + 4;
  }

  // float odo_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_y = this->_internal_odo_y();
  uint32_t raw_odo_y;
  memcpy(&raw_odo_y, &tmp_odo_y, sizeof(tmp_odo_y));
  if (raw_odo_y != 0) {
    total_size += 1 + 4;
  }

  // float odo_w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_w = this->_internal_odo_w();
  uint32_t raw_odo_w;
  memcpy(&raw_odo_w, &tmp_odo_w, sizeof(tmp_odo_w));
  if (raw_odo_w != 0) {
    total_size += 1 + 4;
  }

  // float odo_vx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vx = this->_internal_odo_vx();
  uint32_t raw_odo_vx;
  memcpy(&raw_odo_vx, &tmp_odo_vx, sizeof(tmp_odo_vx));
  if (raw_odo_vx != 0) {
    total_size += 1 + 4;
  }

  // float odo_vy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vy = this->_internal_odo_vy();
  uint32_t raw_odo_vy;
  memcpy(&raw_odo_vy, &tmp_odo_vy, sizeof(tmp_odo_vy));
  if (raw_odo_vy != 0) {
    total_size += 1 + 4;
  }

  // float odo_vw = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vw = this->_internal_odo_vw();
  uint32_t raw_odo_vw;
  memcpy(&raw_odo_vw, &tmp_odo_vw, sizeof(tmp_odo_vw));
  if (raw_odo_vw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapOdo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapOdo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapOdo::GetClassData() const { return &_class_data_; }

void Message_MapOdo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapOdo *>(to)->MergeFrom(
      static_cast<const Message_MapOdo &>(from));
}


void Message_MapOdo::MergeFrom(const Message_MapOdo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapOdo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_x = from._internal_odo_x();
  uint32_t raw_odo_x;
  memcpy(&raw_odo_x, &tmp_odo_x, sizeof(tmp_odo_x));
  if (raw_odo_x != 0) {
    _internal_set_odo_x(from._internal_odo_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_y = from._internal_odo_y();
  uint32_t raw_odo_y;
  memcpy(&raw_odo_y, &tmp_odo_y, sizeof(tmp_odo_y));
  if (raw_odo_y != 0) {
    _internal_set_odo_y(from._internal_odo_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_w = from._internal_odo_w();
  uint32_t raw_odo_w;
  memcpy(&raw_odo_w, &tmp_odo_w, sizeof(tmp_odo_w));
  if (raw_odo_w != 0) {
    _internal_set_odo_w(from._internal_odo_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vx = from._internal_odo_vx();
  uint32_t raw_odo_vx;
  memcpy(&raw_odo_vx, &tmp_odo_vx, sizeof(tmp_odo_vx));
  if (raw_odo_vx != 0) {
    _internal_set_odo_vx(from._internal_odo_vx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vy = from._internal_odo_vy();
  uint32_t raw_odo_vy;
  memcpy(&raw_odo_vy, &tmp_odo_vy, sizeof(tmp_odo_vy));
  if (raw_odo_vy != 0) {
    _internal_set_odo_vy(from._internal_odo_vy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odo_vw = from._internal_odo_vw();
  uint32_t raw_odo_vw;
  memcpy(&raw_odo_vw, &tmp_odo_vw, sizeof(tmp_odo_vw));
  if (raw_odo_vw != 0) {
    _internal_set_odo_vw(from._internal_odo_vw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapOdo::CopyFrom(const Message_MapOdo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapOdo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapOdo::IsInitialized() const {
  return true;
}

void Message_MapOdo::InternalSwap(Message_MapOdo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapOdo, odo_vw_)
      + sizeof(Message_MapOdo::odo_vw_)
      - PROTOBUF_FIELD_OFFSET(Message_MapOdo, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapOdo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[1]);
}

// ===================================================================

class Message_MapLogData3D::_Internal {
 public:
};

Message_MapLogData3D::Message_MapLogData3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  x_(arena),
  y_(arena),
  z_(arena),
  intensity_(arena),
  timeoffset_(arena),
  ring_(arena),
  data_(arena),
  firstazimuth_(arena),
  secondazimuth_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapLogData3D)
}
Message_MapLogData3D::Message_MapLogData3D(const Message_MapLogData3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      x_(from.x_),
      y_(from.y_),
      z_(from.z_),
      intensity_(from.intensity_),
      timeoffset_(from.timeoffset_),
      ring_(from.ring_),
      data_(from.data_),
      firstazimuth_(from.firstazimuth_),
      secondazimuth_(from.secondazimuth_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapLogData3D)
}

inline void Message_MapLogData3D::SharedCtor() {
timestamp_ = 0;
}

Message_MapLogData3D::~Message_MapLogData3D() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapLogData3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapLogData3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_MapLogData3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapLogData3D::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapLogData3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  x_.Clear();
  y_.Clear();
  z_.Clear();
  intensity_.Clear();
  timeoffset_.Clear();
  ring_.Clear();
  data_.Clear();
  firstazimuth_.Clear();
  secondazimuth_.Clear();
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapLogData3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_x(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_x(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_y(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_y(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_z(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_z(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 intensity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_intensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_intensity(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 timeoffset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_timeoffset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_timeoffset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ring = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ring(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_ring(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated float firstAzimuth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_firstazimuth(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 77) {
          _internal_add_firstazimuth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float secondAzimuth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_secondazimuth(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 85) {
          _internal_add_secondazimuth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapLogData3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapLogData3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // repeated float x = 2;
  if (this->_internal_x_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_x(), target);
  }

  // repeated float y = 3;
  if (this->_internal_y_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_y(), target);
  }

  // repeated float z = 4;
  if (this->_internal_z_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_z(), target);
  }

  // repeated uint32 intensity = 5;
  {
    int byte_size = _intensity_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_intensity(), byte_size, target);
    }
  }

  // repeated uint32 timeoffset = 6;
  {
    int byte_size = _timeoffset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          6, _internal_timeoffset(), byte_size, target);
    }
  }

  // repeated uint32 ring = 7;
  {
    int byte_size = _ring_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          7, _internal_ring(), byte_size, target);
    }
  }

  // repeated bytes data = 8;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    target = stream->WriteBytes(8, s, target);
  }

  // repeated float firstAzimuth = 9;
  if (this->_internal_firstazimuth_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_firstazimuth(), target);
  }

  // repeated float secondAzimuth = 10;
  if (this->_internal_secondazimuth_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_secondazimuth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapLogData3D)
  return target;
}

size_t Message_MapLogData3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapLogData3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float x = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_x_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float y = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_y_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float z = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_z_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated uint32 intensity = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->intensity_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _intensity_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 timeoffset = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->timeoffset_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _timeoffset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 ring = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->ring_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _ring_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes data = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(data_.size());
  for (int i = 0, n = data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      data_.Get(i));
  }

  // repeated float firstAzimuth = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_firstazimuth_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float secondAzimuth = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_secondazimuth_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double timestamp = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapLogData3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapLogData3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapLogData3D::GetClassData() const { return &_class_data_; }

void Message_MapLogData3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapLogData3D *>(to)->MergeFrom(
      static_cast<const Message_MapLogData3D &>(from));
}


void Message_MapLogData3D::MergeFrom(const Message_MapLogData3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapLogData3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  x_.MergeFrom(from.x_);
  y_.MergeFrom(from.y_);
  z_.MergeFrom(from.z_);
  intensity_.MergeFrom(from.intensity_);
  timeoffset_.MergeFrom(from.timeoffset_);
  ring_.MergeFrom(from.ring_);
  data_.MergeFrom(from.data_);
  firstazimuth_.MergeFrom(from.firstazimuth_);
  secondazimuth_.MergeFrom(from.secondazimuth_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapLogData3D::CopyFrom(const Message_MapLogData3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapLogData3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapLogData3D::IsInitialized() const {
  return true;
}

void Message_MapLogData3D::InternalSwap(Message_MapLogData3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  x_.InternalSwap(&other->x_);
  y_.InternalSwap(&other->y_);
  z_.InternalSwap(&other->z_);
  intensity_.InternalSwap(&other->intensity_);
  timeoffset_.InternalSwap(&other->timeoffset_);
  ring_.InternalSwap(&other->ring_);
  data_.InternalSwap(&other->data_);
  firstazimuth_.InternalSwap(&other->firstazimuth_);
  secondazimuth_.InternalSwap(&other->secondazimuth_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapLogData3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[2]);
}

// ===================================================================

class Message_MapLog::_Internal {
 public:
};

void Message_MapLog::clear_imu_data() {
  imu_data_.Clear();
}
void Message_MapLog::clear_gnss_data() {
  gnss_data_.Clear();
}
void Message_MapLog::clear_all_gnss_data() {
  all_gnss_data_.Clear();
}
Message_MapLog::Message_MapLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  log_data_(arena),
  odometer_(arena),
  log_data3d_(arena),
  imu_data_(arena),
  gnss_data_(arena),
  azimuthcorrection_(arena),
  verticalcorrection_(arena),
  all_gnss_data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapLog)
}
Message_MapLog::Message_MapLog(const Message_MapLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      log_data_(from.log_data_),
      odometer_(from.odometer_),
      log_data3d_(from.log_data3d_),
      imu_data_(from.imu_data_),
      gnss_data_(from.gnss_data_),
      azimuthcorrection_(from.azimuthcorrection_),
      verticalcorrection_(from.verticalcorrection_),
      all_gnss_data_(from.all_gnss_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  laser_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    laser_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_laser_name().empty()) {
    laser_name_.Set(from._internal_laser_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&laser_pos_x_, &from.laser_pos_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&laser_pos_x_)) + sizeof(factor_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapLog)
}

inline void Message_MapLog::SharedCtor() {
laser_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  laser_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&laser_pos_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&factor_) -
    reinterpret_cast<char*>(&laser_pos_x_)) + sizeof(factor_));
}

Message_MapLog::~Message_MapLog() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  laser_name_.Destroy();
}

void Message_MapLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapLog::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_data_.Clear();
  odometer_.Clear();
  log_data3d_.Clear();
  imu_data_.Clear();
  gnss_data_.Clear();
  azimuthcorrection_.Clear();
  verticalcorrection_.Clear();
  all_gnss_data_.Clear();
  laser_name_.ClearToEmpty();
  ::memset(&laser_pos_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factor_) -
      reinterpret_cast<char*>(&laser_pos_x_)) + sizeof(factor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double laser_pos_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          laser_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double laser_pos_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          laser_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double laser_pos_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          laser_pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double laser_step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          laser_step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double laser_range_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          laser_range_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapLogData log_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string laser_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_laser_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapLog.laser_name"));
        } else
          goto handle_unusual;
        continue;
      // double laser_install_height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          laser_install_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapOdo odometer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_odometer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapLogData3D log_data3d = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log_data3d(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double laser_install_yaw = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          laser_install_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double laser_install_pitch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          laser_install_pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double laser_install_roll = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          laser_install_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_IMU imu_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_imu_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_GNSS gnss_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gnss_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 lasertype = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          lasertype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float factor = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float azimuthcorrection = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_azimuthcorrection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 149) {
          _internal_add_azimuthcorrection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float verticalcorrection = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_verticalcorrection(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 157) {
          _internal_add_verticalcorrection(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_AllGNSS all_gnss_data = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_all_gnss_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double laser_pos_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_x = this->_internal_laser_pos_x();
  uint64_t raw_laser_pos_x;
  memcpy(&raw_laser_pos_x, &tmp_laser_pos_x, sizeof(tmp_laser_pos_x));
  if (raw_laser_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_laser_pos_x(), target);
  }

  // double laser_pos_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_y = this->_internal_laser_pos_y();
  uint64_t raw_laser_pos_y;
  memcpy(&raw_laser_pos_y, &tmp_laser_pos_y, sizeof(tmp_laser_pos_y));
  if (raw_laser_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_laser_pos_y(), target);
  }

  // double laser_pos_z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_z = this->_internal_laser_pos_z();
  uint64_t raw_laser_pos_z;
  memcpy(&raw_laser_pos_z, &tmp_laser_pos_z, sizeof(tmp_laser_pos_z));
  if (raw_laser_pos_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_laser_pos_z(), target);
  }

  // double laser_step = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_step = this->_internal_laser_step();
  uint64_t raw_laser_step;
  memcpy(&raw_laser_step, &tmp_laser_step, sizeof(tmp_laser_step));
  if (raw_laser_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_laser_step(), target);
  }

  // double laser_range_max = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_range_max = this->_internal_laser_range_max();
  uint64_t raw_laser_range_max;
  memcpy(&raw_laser_range_max, &tmp_laser_range_max, sizeof(tmp_laser_range_max));
  if (raw_laser_range_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_laser_range_max(), target);
  }

  // repeated .rbk.protocol.Message_MapLogData log_data = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_log_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_log_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string laser_name = 7;
  if (!this->_internal_laser_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_laser_name().data(), static_cast<int>(this->_internal_laser_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapLog.laser_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_laser_name(), target);
  }

  // double laser_install_height = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_height = this->_internal_laser_install_height();
  uint64_t raw_laser_install_height;
  memcpy(&raw_laser_install_height, &tmp_laser_install_height, sizeof(tmp_laser_install_height));
  if (raw_laser_install_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_laser_install_height(), target);
  }

  // repeated .rbk.protocol.Message_MapOdo odometer = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_odometer_size()); i < n; i++) {
    const auto& repfield = this->_internal_odometer(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapLogData3D log_data3d = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_log_data3d_size()); i < n; i++) {
    const auto& repfield = this->_internal_log_data3d(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double laser_install_yaw = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_yaw = this->_internal_laser_install_yaw();
  uint64_t raw_laser_install_yaw;
  memcpy(&raw_laser_install_yaw, &tmp_laser_install_yaw, sizeof(tmp_laser_install_yaw));
  if (raw_laser_install_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_laser_install_yaw(), target);
  }

  // double laser_install_pitch = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_pitch = this->_internal_laser_install_pitch();
  uint64_t raw_laser_install_pitch;
  memcpy(&raw_laser_install_pitch, &tmp_laser_install_pitch, sizeof(tmp_laser_install_pitch));
  if (raw_laser_install_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_laser_install_pitch(), target);
  }

  // double laser_install_roll = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_roll = this->_internal_laser_install_roll();
  uint64_t raw_laser_install_roll;
  memcpy(&raw_laser_install_roll, &tmp_laser_install_roll, sizeof(tmp_laser_install_roll));
  if (raw_laser_install_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_laser_install_roll(), target);
  }

  // repeated .rbk.protocol.Message_IMU imu_data = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_imu_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_imu_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_GNSS gnss_data = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gnss_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_gnss_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 lasertype = 16;
  if (this->_internal_lasertype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_lasertype(), target);
  }

  // float factor = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_factor = this->_internal_factor();
  uint32_t raw_factor;
  memcpy(&raw_factor, &tmp_factor, sizeof(tmp_factor));
  if (raw_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_factor(), target);
  }

  // repeated float azimuthcorrection = 18;
  if (this->_internal_azimuthcorrection_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_azimuthcorrection(), target);
  }

  // repeated float verticalcorrection = 19;
  if (this->_internal_verticalcorrection_size() > 0) {
    target = stream->WriteFixedPacked(19, _internal_verticalcorrection(), target);
  }

  // repeated .rbk.protocol.Message_AllGNSS all_gnss_data = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_gnss_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_gnss_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapLog)
  return target;
}

size_t Message_MapLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapLogData log_data = 6;
  total_size += 1UL * this->_internal_log_data_size();
  for (const auto& msg : this->log_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapOdo odometer = 9;
  total_size += 1UL * this->_internal_odometer_size();
  for (const auto& msg : this->odometer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapLogData3D log_data3d = 10;
  total_size += 1UL * this->_internal_log_data3d_size();
  for (const auto& msg : this->log_data3d_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_IMU imu_data = 14;
  total_size += 1UL * this->_internal_imu_data_size();
  for (const auto& msg : this->imu_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_GNSS gnss_data = 15;
  total_size += 1UL * this->_internal_gnss_data_size();
  for (const auto& msg : this->gnss_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float azimuthcorrection = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_azimuthcorrection_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float verticalcorrection = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_verticalcorrection_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .rbk.protocol.Message_AllGNSS all_gnss_data = 20;
  total_size += 2UL * this->_internal_all_gnss_data_size();
  for (const auto& msg : this->all_gnss_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string laser_name = 7;
  if (!this->_internal_laser_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_laser_name());
  }

  // double laser_pos_x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_x = this->_internal_laser_pos_x();
  uint64_t raw_laser_pos_x;
  memcpy(&raw_laser_pos_x, &tmp_laser_pos_x, sizeof(tmp_laser_pos_x));
  if (raw_laser_pos_x != 0) {
    total_size += 1 + 8;
  }

  // double laser_pos_y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_y = this->_internal_laser_pos_y();
  uint64_t raw_laser_pos_y;
  memcpy(&raw_laser_pos_y, &tmp_laser_pos_y, sizeof(tmp_laser_pos_y));
  if (raw_laser_pos_y != 0) {
    total_size += 1 + 8;
  }

  // double laser_pos_z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_z = this->_internal_laser_pos_z();
  uint64_t raw_laser_pos_z;
  memcpy(&raw_laser_pos_z, &tmp_laser_pos_z, sizeof(tmp_laser_pos_z));
  if (raw_laser_pos_z != 0) {
    total_size += 1 + 8;
  }

  // double laser_step = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_step = this->_internal_laser_step();
  uint64_t raw_laser_step;
  memcpy(&raw_laser_step, &tmp_laser_step, sizeof(tmp_laser_step));
  if (raw_laser_step != 0) {
    total_size += 1 + 8;
  }

  // double laser_range_max = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_range_max = this->_internal_laser_range_max();
  uint64_t raw_laser_range_max;
  memcpy(&raw_laser_range_max, &tmp_laser_range_max, sizeof(tmp_laser_range_max));
  if (raw_laser_range_max != 0) {
    total_size += 1 + 8;
  }

  // double laser_install_height = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_height = this->_internal_laser_install_height();
  uint64_t raw_laser_install_height;
  memcpy(&raw_laser_install_height, &tmp_laser_install_height, sizeof(tmp_laser_install_height));
  if (raw_laser_install_height != 0) {
    total_size += 1 + 8;
  }

  // double laser_install_yaw = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_yaw = this->_internal_laser_install_yaw();
  uint64_t raw_laser_install_yaw;
  memcpy(&raw_laser_install_yaw, &tmp_laser_install_yaw, sizeof(tmp_laser_install_yaw));
  if (raw_laser_install_yaw != 0) {
    total_size += 1 + 8;
  }

  // double laser_install_pitch = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_pitch = this->_internal_laser_install_pitch();
  uint64_t raw_laser_install_pitch;
  memcpy(&raw_laser_install_pitch, &tmp_laser_install_pitch, sizeof(tmp_laser_install_pitch));
  if (raw_laser_install_pitch != 0) {
    total_size += 1 + 8;
  }

  // double laser_install_roll = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_roll = this->_internal_laser_install_roll();
  uint64_t raw_laser_install_roll;
  memcpy(&raw_laser_install_roll, &tmp_laser_install_roll, sizeof(tmp_laser_install_roll));
  if (raw_laser_install_roll != 0) {
    total_size += 1 + 8;
  }

  // uint32 lasertype = 16;
  if (this->_internal_lasertype() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_lasertype());
  }

  // float factor = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_factor = this->_internal_factor();
  uint32_t raw_factor;
  memcpy(&raw_factor, &tmp_factor, sizeof(tmp_factor));
  if (raw_factor != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapLog::GetClassData() const { return &_class_data_; }

void Message_MapLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapLog *>(to)->MergeFrom(
      static_cast<const Message_MapLog &>(from));
}


void Message_MapLog::MergeFrom(const Message_MapLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapLog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  log_data_.MergeFrom(from.log_data_);
  odometer_.MergeFrom(from.odometer_);
  log_data3d_.MergeFrom(from.log_data3d_);
  imu_data_.MergeFrom(from.imu_data_);
  gnss_data_.MergeFrom(from.gnss_data_);
  azimuthcorrection_.MergeFrom(from.azimuthcorrection_);
  verticalcorrection_.MergeFrom(from.verticalcorrection_);
  all_gnss_data_.MergeFrom(from.all_gnss_data_);
  if (!from._internal_laser_name().empty()) {
    _internal_set_laser_name(from._internal_laser_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_x = from._internal_laser_pos_x();
  uint64_t raw_laser_pos_x;
  memcpy(&raw_laser_pos_x, &tmp_laser_pos_x, sizeof(tmp_laser_pos_x));
  if (raw_laser_pos_x != 0) {
    _internal_set_laser_pos_x(from._internal_laser_pos_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_y = from._internal_laser_pos_y();
  uint64_t raw_laser_pos_y;
  memcpy(&raw_laser_pos_y, &tmp_laser_pos_y, sizeof(tmp_laser_pos_y));
  if (raw_laser_pos_y != 0) {
    _internal_set_laser_pos_y(from._internal_laser_pos_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_pos_z = from._internal_laser_pos_z();
  uint64_t raw_laser_pos_z;
  memcpy(&raw_laser_pos_z, &tmp_laser_pos_z, sizeof(tmp_laser_pos_z));
  if (raw_laser_pos_z != 0) {
    _internal_set_laser_pos_z(from._internal_laser_pos_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_step = from._internal_laser_step();
  uint64_t raw_laser_step;
  memcpy(&raw_laser_step, &tmp_laser_step, sizeof(tmp_laser_step));
  if (raw_laser_step != 0) {
    _internal_set_laser_step(from._internal_laser_step());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_range_max = from._internal_laser_range_max();
  uint64_t raw_laser_range_max;
  memcpy(&raw_laser_range_max, &tmp_laser_range_max, sizeof(tmp_laser_range_max));
  if (raw_laser_range_max != 0) {
    _internal_set_laser_range_max(from._internal_laser_range_max());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_height = from._internal_laser_install_height();
  uint64_t raw_laser_install_height;
  memcpy(&raw_laser_install_height, &tmp_laser_install_height, sizeof(tmp_laser_install_height));
  if (raw_laser_install_height != 0) {
    _internal_set_laser_install_height(from._internal_laser_install_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_yaw = from._internal_laser_install_yaw();
  uint64_t raw_laser_install_yaw;
  memcpy(&raw_laser_install_yaw, &tmp_laser_install_yaw, sizeof(tmp_laser_install_yaw));
  if (raw_laser_install_yaw != 0) {
    _internal_set_laser_install_yaw(from._internal_laser_install_yaw());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_pitch = from._internal_laser_install_pitch();
  uint64_t raw_laser_install_pitch;
  memcpy(&raw_laser_install_pitch, &tmp_laser_install_pitch, sizeof(tmp_laser_install_pitch));
  if (raw_laser_install_pitch != 0) {
    _internal_set_laser_install_pitch(from._internal_laser_install_pitch());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_laser_install_roll = from._internal_laser_install_roll();
  uint64_t raw_laser_install_roll;
  memcpy(&raw_laser_install_roll, &tmp_laser_install_roll, sizeof(tmp_laser_install_roll));
  if (raw_laser_install_roll != 0) {
    _internal_set_laser_install_roll(from._internal_laser_install_roll());
  }
  if (from._internal_lasertype() != 0) {
    _internal_set_lasertype(from._internal_lasertype());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_factor = from._internal_factor();
  uint32_t raw_factor;
  memcpy(&raw_factor, &tmp_factor, sizeof(tmp_factor));
  if (raw_factor != 0) {
    _internal_set_factor(from._internal_factor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapLog::CopyFrom(const Message_MapLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapLog::IsInitialized() const {
  return true;
}

void Message_MapLog::InternalSwap(Message_MapLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  log_data_.InternalSwap(&other->log_data_);
  odometer_.InternalSwap(&other->odometer_);
  log_data3d_.InternalSwap(&other->log_data3d_);
  imu_data_.InternalSwap(&other->imu_data_);
  gnss_data_.InternalSwap(&other->gnss_data_);
  azimuthcorrection_.InternalSwap(&other->azimuthcorrection_);
  verticalcorrection_.InternalSwap(&other->verticalcorrection_);
  all_gnss_data_.InternalSwap(&other->all_gnss_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &laser_name_, lhs_arena,
      &other->laser_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapLog, factor_)
      + sizeof(Message_MapLog::factor_)
      - PROTOBUF_FIELD_OFFSET(Message_MapLog, laser_pos_x_)>(
          reinterpret_cast<char*>(&laser_pos_x_),
          reinterpret_cast<char*>(&other->laser_pos_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[3]);
}

// ===================================================================

class Message_MapProperty::_Internal {
 public:
};

Message_MapProperty::Message_MapProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapProperty)
}
Message_MapProperty::Message_MapProperty(const Message_MapProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    tag_.Set(from._internal_tag(), 
      GetArenaForAllocation());
  }
  clear_has_oneof_value();
  switch (from.oneof_value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kUint32Value: {
      _internal_set_uint32_value(from._internal_uint32_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kUint64Value: {
      _internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapProperty)
}

inline void Message_MapProperty::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_oneof_value();
}

Message_MapProperty::~Message_MapProperty() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapProperty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  type_.Destroy();
  value_.Destroy();
  tag_.Destroy();
  if (has_oneof_value()) {
    clear_oneof_value();
  }
}

void Message_MapProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapProperty::clear_oneof_value() {
// @@protoc_insertion_point(one_of_clear_start:rbk.protocol.Message_MapProperty)
  switch (oneof_value_case()) {
    case kStringValue: {
      oneof_value_.string_value_.Destroy();
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kUint32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBytesValue: {
      oneof_value_.bytes_value_.Destroy();
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_VALUE_NOT_SET;
}


void Message_MapProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapProperty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  type_.ClearToEmpty();
  value_.ClearToEmpty();
  tag_.ClearToEmpty();
  clear_oneof_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapProperty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapProperty.key"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapProperty.type"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapProperty.string_value"));
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int32_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 uint32_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint64_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tag = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapProperty.tag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapProperty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapProperty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapProperty.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapProperty.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_value(), target);
  }

  // string string_value = 4;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapProperty.string_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_value(), target);
  }

  // bool bool_value = 5;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_bool_value(), target);
  }

  // int32 int32_value = 6;
  if (_internal_has_int32_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_int32_value(), target);
  }

  // uint32 uint32_value = 7;
  if (_internal_has_uint32_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_uint32_value(), target);
  }

  // int64 int64_value = 8;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_int64_value(), target);
  }

  // uint64 uint64_value = 9;
  if (_internal_has_uint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_uint64_value(), target);
  }

  // float float_value = 10;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_float_value(), target);
  }

  // double double_value = 11;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_double_value(), target);
  }

  // bytes bytes_value = 12;
  if (_internal_has_bytes_value()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_bytes_value(), target);
  }

  // string tag = 13;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapProperty.tag");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapProperty)
  return target;
}

size_t Message_MapProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapProperty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // bytes value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // string tag = 13;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  switch (oneof_value_case()) {
    // string string_value = 4;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 5;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // int32 int32_value = 6;
    case kInt32Value: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32_value());
      break;
    }
    // uint32 uint32_value = 7;
    case kUint32Value: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_uint32_value());
      break;
    }
    // int64 int64_value = 8;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // uint64 uint64_value = 9;
    case kUint64Value: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64_value());
      break;
    }
    // float float_value = 10;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // double double_value = 11;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // bytes bytes_value = 12;
    case kBytesValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapProperty::GetClassData() const { return &_class_data_; }

void Message_MapProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapProperty *>(to)->MergeFrom(
      static_cast<const Message_MapProperty &>(from));
}


void Message_MapProperty::MergeFrom(const Message_MapProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapProperty)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_tag().empty()) {
    _internal_set_tag(from._internal_tag());
  }
  switch (from.oneof_value_case()) {
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kUint32Value: {
      _internal_set_uint32_value(from._internal_uint32_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kUint64Value: {
      _internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case ONEOF_VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapProperty::CopyFrom(const Message_MapProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapProperty::IsInitialized() const {
  return true;
}

void Message_MapProperty::InternalSwap(Message_MapProperty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  swap(oneof_value_, other->oneof_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapProperty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[4]);
}

// ===================================================================

class Message_MapPos::_Internal {
 public:
};

Message_MapPos::Message_MapPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapPos)
}
Message_MapPos::Message_MapPos(const Message_MapPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapPos)
}

inline void Message_MapPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Message_MapPos::~Message_MapPos() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_MapPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapPos::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapPos)
  return target;
}

size_t Message_MapPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapPos::GetClassData() const { return &_class_data_; }

void Message_MapPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapPos *>(to)->MergeFrom(
      static_cast<const Message_MapPos &>(from));
}


void Message_MapPos::MergeFrom(const Message_MapPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapPos::CopyFrom(const Message_MapPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapPos::IsInitialized() const {
  return true;
}

void Message_MapPos::InternalSwap(Message_MapPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapPos, z_)
      + sizeof(Message_MapPos::z_)
      - PROTOBUF_FIELD_OFFSET(Message_MapPos, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[5]);
}

// ===================================================================

class Message_MapRSSIPos::_Internal {
 public:
};

Message_MapRSSIPos::Message_MapRSSIPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapRSSIPos)
}
Message_MapRSSIPos::Message_MapRSSIPos(const Message_MapRSSIPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapRSSIPos)
}

inline void Message_MapRSSIPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Message_MapRSSIPos::~Message_MapRSSIPos() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapRSSIPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapRSSIPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_MapRSSIPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapRSSIPos::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapRSSIPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapRSSIPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapRSSIPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapRSSIPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapRSSIPos)
  return target;
}

size_t Message_MapRSSIPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapRSSIPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapRSSIPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapRSSIPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapRSSIPos::GetClassData() const { return &_class_data_; }

void Message_MapRSSIPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapRSSIPos *>(to)->MergeFrom(
      static_cast<const Message_MapRSSIPos &>(from));
}


void Message_MapRSSIPos::MergeFrom(const Message_MapRSSIPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapRSSIPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapRSSIPos::CopyFrom(const Message_MapRSSIPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapRSSIPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapRSSIPos::IsInitialized() const {
  return true;
}

void Message_MapRSSIPos::InternalSwap(Message_MapRSSIPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapRSSIPos, y_)
      + sizeof(Message_MapRSSIPos::y_)
      - PROTOBUF_FIELD_OFFSET(Message_MapRSSIPos, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapRSSIPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[6]);
}

// ===================================================================

class Message_ReflectorPos::_Internal {
 public:
};

Message_ReflectorPos::Message_ReflectorPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_ReflectorPos)
}
Message_ReflectorPos::Message_ReflectorPos(const Message_ReflectorPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&width_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_ReflectorPos)
}

inline void Message_ReflectorPos::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&width_)) + sizeof(y_));
}

Message_ReflectorPos::~Message_ReflectorPos() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_ReflectorPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ReflectorPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
}

void Message_ReflectorPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_ReflectorPos::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_ReflectorPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&width_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ReflectorPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_ReflectorPos.type"));
        } else
          goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ReflectorPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_ReflectorPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_ReflectorPos.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double x = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_ReflectorPos)
  return target;
}

size_t Message_ReflectorPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_ReflectorPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // double width = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double x = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ReflectorPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_ReflectorPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ReflectorPos::GetClassData() const { return &_class_data_; }

void Message_ReflectorPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_ReflectorPos *>(to)->MergeFrom(
      static_cast<const Message_ReflectorPos &>(from));
}


void Message_ReflectorPos::MergeFrom(const Message_ReflectorPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_ReflectorPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ReflectorPos::CopyFrom(const Message_ReflectorPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_ReflectorPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ReflectorPos::IsInitialized() const {
  return true;
}

void Message_ReflectorPos::InternalSwap(Message_ReflectorPos* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ReflectorPos, y_)
      + sizeof(Message_ReflectorPos::y_)
      - PROTOBUF_FIELD_OFFSET(Message_ReflectorPos, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ReflectorPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[7]);
}

// ===================================================================

class Message_LiveRefPos::_Internal {
 public:
};

Message_LiveRefPos::Message_LiveRefPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ref_pos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_LiveRefPos)
}
Message_LiveRefPos::Message_LiveRefPos(const Message_LiveRefPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ref_pos_(from.ref_pos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_LiveRefPos)
}

inline void Message_LiveRefPos::SharedCtor() {
}

Message_LiveRefPos::~Message_LiveRefPos() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_LiveRefPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_LiveRefPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_LiveRefPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_LiveRefPos::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_LiveRefPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ref_pos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_LiveRefPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rbk.protocol.Message_ReflectorPos ref_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ref_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_LiveRefPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_LiveRefPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_ReflectorPos ref_pos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ref_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_ref_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_LiveRefPos)
  return target;
}

size_t Message_LiveRefPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_LiveRefPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_ReflectorPos ref_pos = 1;
  total_size += 1UL * this->_internal_ref_pos_size();
  for (const auto& msg : this->ref_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_LiveRefPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_LiveRefPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_LiveRefPos::GetClassData() const { return &_class_data_; }

void Message_LiveRefPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_LiveRefPos *>(to)->MergeFrom(
      static_cast<const Message_LiveRefPos &>(from));
}


void Message_LiveRefPos::MergeFrom(const Message_LiveRefPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_LiveRefPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ref_pos_.MergeFrom(from.ref_pos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_LiveRefPos::CopyFrom(const Message_LiveRefPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_LiveRefPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_LiveRefPos::IsInitialized() const {
  return true;
}

void Message_LiveRefPos::InternalSwap(Message_LiveRefPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ref_pos_.InternalSwap(&other->ref_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_LiveRefPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[8]);
}

// ===================================================================

class Message_tagPos::_Internal {
 public:
};

Message_tagPos::Message_tagPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_tagPos)
}
Message_tagPos::Message_tagPos(const Message_tagPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_tagPos)
}

inline void Message_tagPos::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
}

Message_tagPos::~Message_tagPos() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_tagPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_tagPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_tagPos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_tagPos::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_tagPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_tagPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 tag_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          tag_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_DMT_detected = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          is_dmt_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_tagPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_tagPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 tag_value = 1;
  if (this->_internal_tag_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tag_value(), target);
  }

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double angle = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_angle(), target);
  }

  // bool is_DMT_detected = 5;
  if (this->_internal_is_dmt_detected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_dmt_detected(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_tagPos)
  return target;
}

size_t Message_tagPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_tagPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // uint32 tag_value = 1;
  if (this->_internal_tag_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tag_value());
  }

  // bool is_DMT_detected = 5;
  if (this->_internal_is_dmt_detected() != 0) {
    total_size += 1 + 1;
  }

  // double angle = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_tagPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_tagPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_tagPos::GetClassData() const { return &_class_data_; }

void Message_tagPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_tagPos *>(to)->MergeFrom(
      static_cast<const Message_tagPos &>(from));
}


void Message_tagPos::MergeFrom(const Message_tagPos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_tagPos)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_tag_value() != 0) {
    _internal_set_tag_value(from._internal_tag_value());
  }
  if (from._internal_is_dmt_detected() != 0) {
    _internal_set_is_dmt_detected(from._internal_is_dmt_detected());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = from._internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_tagPos::CopyFrom(const Message_tagPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_tagPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_tagPos::IsInitialized() const {
  return true;
}

void Message_tagPos::InternalSwap(Message_tagPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_tagPos, angle_)
      + sizeof(Message_tagPos::angle_)
      - PROTOBUF_FIELD_OFFSET(Message_tagPos, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_tagPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[9]);
}

// ===================================================================

class Message_MapLine::_Internal {
 public:
  static const ::rbk::protocol::Message_MapPos& start_pos(const Message_MapLine* msg);
  static const ::rbk::protocol::Message_MapPos& end_pos(const Message_MapLine* msg);
};

const ::rbk::protocol::Message_MapPos&
Message_MapLine::_Internal::start_pos(const Message_MapLine* msg) {
  return *msg->start_pos_;
}
const ::rbk::protocol::Message_MapPos&
Message_MapLine::_Internal::end_pos(const Message_MapLine* msg) {
  return *msg->end_pos_;
}
Message_MapLine::Message_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapLine)
}
Message_MapLine::Message_MapLine(const Message_MapLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_pos()) {
    start_pos_ = new ::rbk::protocol::Message_MapPos(*from.start_pos_);
  } else {
    start_pos_ = nullptr;
  }
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::rbk::protocol::Message_MapPos(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapLine)
}

inline void Message_MapLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_pos_) -
    reinterpret_cast<char*>(&start_pos_)) + sizeof(end_pos_));
}

Message_MapLine::~Message_MapLine() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete end_pos_;
}

void Message_MapLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .rbk.protocol.Message_MapPos start_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos end_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .rbk.protocol.Message_MapPos start_pos = 1;
  if (this->_internal_has_start_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_pos(this),
        _Internal::start_pos(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapPos end_pos = 2;
  if (this->_internal_has_end_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_pos(this),
        _Internal::end_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapLine)
  return target;
}

size_t Message_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .rbk.protocol.Message_MapPos start_pos = 1;
  if (this->_internal_has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_pos_);
  }

  // .rbk.protocol.Message_MapPos end_pos = 2;
  if (this->_internal_has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapLine::GetClassData() const { return &_class_data_; }

void Message_MapLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapLine *>(to)->MergeFrom(
      static_cast<const Message_MapLine &>(from));
}


void Message_MapLine::MergeFrom(const Message_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start_pos()) {
    _internal_mutable_start_pos()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_start_pos());
  }
  if (from._internal_has_end_pos()) {
    _internal_mutable_end_pos()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_end_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapLine::CopyFrom(const Message_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapLine::IsInitialized() const {
  return true;
}

void Message_MapLine::InternalSwap(Message_MapLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapLine, end_pos_)
      + sizeof(Message_MapLine::end_pos_)
      - PROTOBUF_FIELD_OFFSET(Message_MapLine, start_pos_)>(
          reinterpret_cast<char*>(&start_pos_),
          reinterpret_cast<char*>(&other->start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[10]);
}

// ===================================================================

class Message_MapHeader::_Internal {
 public:
  static const ::rbk::protocol::Message_MapPos& min_pos(const Message_MapHeader* msg);
  static const ::rbk::protocol::Message_MapPos& max_pos(const Message_MapHeader* msg);
};

const ::rbk::protocol::Message_MapPos&
Message_MapHeader::_Internal::min_pos(const Message_MapHeader* msg) {
  return *msg->min_pos_;
}
const ::rbk::protocol::Message_MapPos&
Message_MapHeader::_Internal::max_pos(const Message_MapHeader* msg) {
  return *msg->max_pos_;
}
Message_MapHeader::Message_MapHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapHeader)
}
Message_MapHeader::Message_MapHeader(const Message_MapHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_type().empty()) {
    map_type_.Set(from._internal_map_type(), 
      GetArenaForAllocation());
  }
  map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_name().empty()) {
    map_name_.Set(from._internal_map_name(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_min_pos()) {
    min_pos_ = new ::rbk::protocol::Message_MapPos(*from.min_pos_);
  } else {
    min_pos_ = nullptr;
  }
  if (from._internal_has_max_pos()) {
    max_pos_ = new ::rbk::protocol::Message_MapPos(*from.max_pos_);
  } else {
    max_pos_ = nullptr;
  }
  resolution_ = from.resolution_;
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapHeader)
}

inline void Message_MapHeader::SharedCtor() {
map_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
map_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&min_pos_)) + sizeof(resolution_));
}

Message_MapHeader::~Message_MapHeader() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_type_.Destroy();
  map_name_.Destroy();
  version_.Destroy();
  if (this != internal_default_instance()) delete min_pos_;
  if (this != internal_default_instance()) delete max_pos_;
}

void Message_MapHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_type_.ClearToEmpty();
  map_name_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && min_pos_ != nullptr) {
    delete min_pos_;
  }
  min_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_pos_ != nullptr) {
    delete max_pos_;
  }
  max_pos_ = nullptr;
  resolution_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapHeader.map_type"));
        } else
          goto handle_unusual;
        continue;
      // string map_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapHeader.map_name"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos min_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos max_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double resolution = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapHeader.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_type = 1;
  if (!this->_internal_map_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_type().data(), static_cast<int>(this->_internal_map_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapHeader.map_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_type(), target);
  }

  // string map_name = 2;
  if (!this->_internal_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapHeader.map_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map_name(), target);
  }

  // .rbk.protocol.Message_MapPos min_pos = 3;
  if (this->_internal_has_min_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::min_pos(this),
        _Internal::min_pos(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapPos max_pos = 4;
  if (this->_internal_has_max_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::max_pos(this),
        _Internal::max_pos(this).GetCachedSize(), target, stream);
  }

  // double resolution = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_resolution(), target);
  }

  // string version = 8;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapHeader.version");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapHeader)
  return target;
}

size_t Message_MapHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string map_type = 1;
  if (!this->_internal_map_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_type());
  }

  // string map_name = 2;
  if (!this->_internal_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_name());
  }

  // string version = 8;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .rbk.protocol.Message_MapPos min_pos = 3;
  if (this->_internal_has_min_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_pos_);
  }

  // .rbk.protocol.Message_MapPos max_pos = 4;
  if (this->_internal_has_max_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_pos_);
  }

  // double resolution = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapHeader::GetClassData() const { return &_class_data_; }

void Message_MapHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapHeader *>(to)->MergeFrom(
      static_cast<const Message_MapHeader &>(from));
}


void Message_MapHeader::MergeFrom(const Message_MapHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_map_type().empty()) {
    _internal_set_map_type(from._internal_map_type());
  }
  if (!from._internal_map_name().empty()) {
    _internal_set_map_name(from._internal_map_name());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_min_pos()) {
    _internal_mutable_min_pos()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_min_pos());
  }
  if (from._internal_has_max_pos()) {
    _internal_mutable_max_pos()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_max_pos());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = from._internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _internal_set_resolution(from._internal_resolution());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapHeader::CopyFrom(const Message_MapHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapHeader::IsInitialized() const {
  return true;
}

void Message_MapHeader::InternalSwap(Message_MapHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &map_type_, lhs_arena,
      &other->map_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &map_name_, lhs_arena,
      &other->map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapHeader, resolution_)
      + sizeof(Message_MapHeader::resolution_)
      - PROTOBUF_FIELD_OFFSET(Message_MapHeader, min_pos_)>(
          reinterpret_cast<char*>(&min_pos_),
          reinterpret_cast<char*>(&other->min_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[11]);
}

// ===================================================================

class Message_MapAttribute::_Internal {
 public:
};

Message_MapAttribute::Message_MapAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_MapAttribute)
}
Message_MapAttribute::Message_MapAttribute(const Message_MapAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&color_pen_, &from.color_pen_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_font_) -
    reinterpret_cast<char*>(&color_pen_)) + sizeof(color_font_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_MapAttribute)
}

inline void Message_MapAttribute::SharedCtor() {
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_pen_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&color_font_) -
    reinterpret_cast<char*>(&color_pen_)) + sizeof(color_font_));
}

Message_MapAttribute::~Message_MapAttribute() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_MapAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_MapAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.Destroy();
}

void Message_MapAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_MapAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_MapAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  ::memset(&color_pen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_font_) -
      reinterpret_cast<char*>(&color_pen_)) + sizeof(color_font_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MapAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string description = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_MapAttribute.description"));
        } else
          goto handle_unusual;
        continue;
      // uint32 color_pen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          color_pen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color_brush = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          color_brush_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 color_font = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          color_font_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_MapAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_MapAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_MapAttribute.description");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_description(), target);
  }

  // uint32 color_pen = 2;
  if (this->_internal_color_pen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_color_pen(), target);
  }

  // uint32 color_brush = 3;
  if (this->_internal_color_brush() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_color_brush(), target);
  }

  // uint32 color_font = 4;
  if (this->_internal_color_font() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_color_font(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_MapAttribute)
  return target;
}

size_t Message_MapAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_MapAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 color_pen = 2;
  if (this->_internal_color_pen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_pen());
  }

  // uint32 color_brush = 3;
  if (this->_internal_color_brush() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_brush());
  }

  // uint32 color_font = 4;
  if (this->_internal_color_font() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_color_font());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_MapAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_MapAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_MapAttribute::GetClassData() const { return &_class_data_; }

void Message_MapAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_MapAttribute *>(to)->MergeFrom(
      static_cast<const Message_MapAttribute &>(from));
}


void Message_MapAttribute::MergeFrom(const Message_MapAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_MapAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_color_pen() != 0) {
    _internal_set_color_pen(from._internal_color_pen());
  }
  if (from._internal_color_brush() != 0) {
    _internal_set_color_brush(from._internal_color_brush());
  }
  if (from._internal_color_font() != 0) {
    _internal_set_color_font(from._internal_color_font());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_MapAttribute::CopyFrom(const Message_MapAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_MapAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MapAttribute::IsInitialized() const {
  return true;
}

void Message_MapAttribute::InternalSwap(Message_MapAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_MapAttribute, color_font_)
      + sizeof(Message_MapAttribute::color_font_)
      - PROTOBUF_FIELD_OFFSET(Message_MapAttribute, color_pen_)>(
          reinterpret_cast<char*>(&color_pen_),
          reinterpret_cast<char*>(&other->color_pen_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MapAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[12]);
}

// ===================================================================

class Message_AdvancedPoint::_Internal {
 public:
  static const ::rbk::protocol::Message_MapPos& pos(const Message_AdvancedPoint* msg);
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_AdvancedPoint* msg);
};

const ::rbk::protocol::Message_MapPos&
Message_AdvancedPoint::_Internal::pos(const Message_AdvancedPoint* msg) {
  return *msg->pos_;
}
const ::rbk::protocol::Message_MapAttribute&
Message_AdvancedPoint::_Internal::attribute(const Message_AdvancedPoint* msg) {
  return *msg->attribute_;
}
Message_AdvancedPoint::Message_AdvancedPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  property_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_AdvancedPoint)
}
Message_AdvancedPoint::Message_AdvancedPoint(const Message_AdvancedPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::rbk::protocol::Message_MapPos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  ::memcpy(&dir_, &from.dir_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_dir_) -
    reinterpret_cast<char*>(&dir_)) + sizeof(ignore_dir_));
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_AdvancedPoint)
}

inline void Message_AdvancedPoint::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ignore_dir_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(ignore_dir_));
}

Message_AdvancedPoint::~Message_AdvancedPoint() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_AdvancedPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AdvancedPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete attribute_;
}

void Message_AdvancedPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_AdvancedPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_AdvancedPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  ::memset(&dir_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_dir_) -
      reinterpret_cast<char*>(&dir_)) + sizeof(ignore_dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AdvancedPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedPoint.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedPoint.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool ignore_dir = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ignore_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AdvancedPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_AdvancedPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedPoint.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedPoint.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // .rbk.protocol.Message_MapPos pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // double dir = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dir = this->_internal_dir();
  uint64_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_dir(), target);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_dir = 6;
  if (this->_internal_ignore_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_dir(), target);
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 10;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_AdvancedPoint)
  return target;
}

size_t Message_AdvancedPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_AdvancedPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapProperty property = 5;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_MapPos pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 10;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  // double dir = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dir = this->_internal_dir();
  uint64_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 1 + 8;
  }

  // bool ignore_dir = 6;
  if (this->_internal_ignore_dir() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AdvancedPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_AdvancedPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AdvancedPoint::GetClassData() const { return &_class_data_; }

void Message_AdvancedPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_AdvancedPoint *>(to)->MergeFrom(
      static_cast<const Message_AdvancedPoint &>(from));
}


void Message_AdvancedPoint::MergeFrom(const Message_AdvancedPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_AdvancedPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_pos());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dir = from._internal_dir();
  uint64_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _internal_set_dir(from._internal_dir());
  }
  if (from._internal_ignore_dir() != 0) {
    _internal_set_ignore_dir(from._internal_ignore_dir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AdvancedPoint::CopyFrom(const Message_AdvancedPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_AdvancedPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AdvancedPoint::IsInitialized() const {
  return true;
}

void Message_AdvancedPoint::InternalSwap(Message_AdvancedPoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AdvancedPoint, ignore_dir_)
      + sizeof(Message_AdvancedPoint::ignore_dir_)
      - PROTOBUF_FIELD_OFFSET(Message_AdvancedPoint, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AdvancedPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[13]);
}

// ===================================================================

class Message_AdvancedLine::_Internal {
 public:
  static const ::rbk::protocol::Message_MapLine& line(const Message_AdvancedLine* msg);
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_AdvancedLine* msg);
};

const ::rbk::protocol::Message_MapLine&
Message_AdvancedLine::_Internal::line(const Message_AdvancedLine* msg) {
  return *msg->line_;
}
const ::rbk::protocol::Message_MapAttribute&
Message_AdvancedLine::_Internal::attribute(const Message_AdvancedLine* msg) {
  return *msg->attribute_;
}
Message_AdvancedLine::Message_AdvancedLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  property_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_AdvancedLine)
}
Message_AdvancedLine::Message_AdvancedLine(const Message_AdvancedLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_line()) {
    line_ = new ::rbk::protocol::Message_MapLine(*from.line_);
  } else {
    line_ = nullptr;
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_AdvancedLine)
}

inline void Message_AdvancedLine::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&line_)) + sizeof(attribute_));
}

Message_AdvancedLine::~Message_AdvancedLine() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_AdvancedLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AdvancedLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete line_;
  if (this != internal_default_instance()) delete attribute_;
}

void Message_AdvancedLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_AdvancedLine::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_AdvancedLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && line_ != nullptr) {
    delete line_;
  }
  line_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AdvancedLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedLine.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedLine.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapLine line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AdvancedLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_AdvancedLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedLine.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedLine.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // .rbk.protocol.Message_MapLine line = 3;
  if (this->_internal_has_line()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::line(this),
        _Internal::line(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 10;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_AdvancedLine)
  return target;
}

size_t Message_AdvancedLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_AdvancedLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapProperty property = 4;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_MapLine line = 3;
  if (this->_internal_has_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *line_);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 10;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AdvancedLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_AdvancedLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AdvancedLine::GetClassData() const { return &_class_data_; }

void Message_AdvancedLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_AdvancedLine *>(to)->MergeFrom(
      static_cast<const Message_AdvancedLine &>(from));
}


void Message_AdvancedLine::MergeFrom(const Message_AdvancedLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_AdvancedLine)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_line()) {
    _internal_mutable_line()->::rbk::protocol::Message_MapLine::MergeFrom(from._internal_line());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AdvancedLine::CopyFrom(const Message_AdvancedLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_AdvancedLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AdvancedLine::IsInitialized() const {
  return true;
}

void Message_AdvancedLine::InternalSwap(Message_AdvancedLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AdvancedLine, attribute_)
      + sizeof(Message_AdvancedLine::attribute_)
      - PROTOBUF_FIELD_OFFSET(Message_AdvancedLine, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AdvancedLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[14]);
}

// ===================================================================

class Message_AdvancedCurve::_Internal {
 public:
  static const ::rbk::protocol::Message_AdvancedPoint& start_pos(const Message_AdvancedCurve* msg);
  static const ::rbk::protocol::Message_AdvancedPoint& end_pos(const Message_AdvancedCurve* msg);
  static const ::rbk::protocol::Message_MapPos& control_pos1(const Message_AdvancedCurve* msg);
  static const ::rbk::protocol::Message_MapPos& control_pos2(const Message_AdvancedCurve* msg);
  static const ::rbk::protocol::Message_MapPos& control_pos3(const Message_AdvancedCurve* msg);
  static const ::rbk::protocol::Message_MapPos& control_pos4(const Message_AdvancedCurve* msg);
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_AdvancedCurve* msg);
};

const ::rbk::protocol::Message_AdvancedPoint&
Message_AdvancedCurve::_Internal::start_pos(const Message_AdvancedCurve* msg) {
  return *msg->start_pos_;
}
const ::rbk::protocol::Message_AdvancedPoint&
Message_AdvancedCurve::_Internal::end_pos(const Message_AdvancedCurve* msg) {
  return *msg->end_pos_;
}
const ::rbk::protocol::Message_MapPos&
Message_AdvancedCurve::_Internal::control_pos1(const Message_AdvancedCurve* msg) {
  return *msg->control_pos1_;
}
const ::rbk::protocol::Message_MapPos&
Message_AdvancedCurve::_Internal::control_pos2(const Message_AdvancedCurve* msg) {
  return *msg->control_pos2_;
}
const ::rbk::protocol::Message_MapPos&
Message_AdvancedCurve::_Internal::control_pos3(const Message_AdvancedCurve* msg) {
  return *msg->control_pos3_;
}
const ::rbk::protocol::Message_MapPos&
Message_AdvancedCurve::_Internal::control_pos4(const Message_AdvancedCurve* msg) {
  return *msg->control_pos4_;
}
const ::rbk::protocol::Message_MapAttribute&
Message_AdvancedCurve::_Internal::attribute(const Message_AdvancedCurve* msg) {
  return *msg->attribute_;
}
Message_AdvancedCurve::Message_AdvancedCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  property_(arena),
  devices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_AdvancedCurve)
}
Message_AdvancedCurve::Message_AdvancedCurve(const Message_AdvancedCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_pos()) {
    start_pos_ = new ::rbk::protocol::Message_AdvancedPoint(*from.start_pos_);
  } else {
    start_pos_ = nullptr;
  }
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::rbk::protocol::Message_AdvancedPoint(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  if (from._internal_has_control_pos1()) {
    control_pos1_ = new ::rbk::protocol::Message_MapPos(*from.control_pos1_);
  } else {
    control_pos1_ = nullptr;
  }
  if (from._internal_has_control_pos2()) {
    control_pos2_ = new ::rbk::protocol::Message_MapPos(*from.control_pos2_);
  } else {
    control_pos2_ = nullptr;
  }
  if (from._internal_has_control_pos3()) {
    control_pos3_ = new ::rbk::protocol::Message_MapPos(*from.control_pos3_);
  } else {
    control_pos3_ = nullptr;
  }
  if (from._internal_has_control_pos4()) {
    control_pos4_ = new ::rbk::protocol::Message_MapPos(*from.control_pos4_);
  } else {
    control_pos4_ = nullptr;
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_AdvancedCurve)
}

inline void Message_AdvancedCurve::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&start_pos_)) + sizeof(attribute_));
}

Message_AdvancedCurve::~Message_AdvancedCurve() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_AdvancedCurve)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AdvancedCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete end_pos_;
  if (this != internal_default_instance()) delete control_pos1_;
  if (this != internal_default_instance()) delete control_pos2_;
  if (this != internal_default_instance()) delete control_pos3_;
  if (this != internal_default_instance()) delete control_pos4_;
  if (this != internal_default_instance()) delete attribute_;
}

void Message_AdvancedCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_AdvancedCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_AdvancedCurve)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  devices_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control_pos1_ != nullptr) {
    delete control_pos1_;
  }
  control_pos1_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control_pos2_ != nullptr) {
    delete control_pos2_;
  }
  control_pos2_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control_pos3_ != nullptr) {
    delete control_pos3_;
  }
  control_pos3_ = nullptr;
  if (GetArenaForAllocation() == nullptr && control_pos4_ != nullptr) {
    delete control_pos4_;
  }
  control_pos4_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AdvancedCurve::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedCurve.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedCurve.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos control_pos1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_pos1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos control_pos2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_pos2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos control_pos3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_pos3(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos control_pos4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_pos4(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_Device devices = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AdvancedCurve::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_AdvancedCurve)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedCurve.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedCurve.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
  if (this->_internal_has_start_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_pos(this),
        _Internal::start_pos(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
  if (this->_internal_has_end_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_pos(this),
        _Internal::end_pos(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapPos control_pos1 = 5;
  if (this->_internal_has_control_pos1()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::control_pos1(this),
        _Internal::control_pos1(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapPos control_pos2 = 6;
  if (this->_internal_has_control_pos2()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::control_pos2(this),
        _Internal::control_pos2(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // .rbk.protocol.Message_MapPos control_pos3 = 9;
  if (this->_internal_has_control_pos3()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::control_pos3(this),
        _Internal::control_pos3(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapPos control_pos4 = 10;
  if (this->_internal_has_control_pos4()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::control_pos4(this),
        _Internal::control_pos4(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_Device devices = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 15;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_AdvancedCurve)
  return target;
}

size_t Message_AdvancedCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_AdvancedCurve)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapProperty property = 7;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_Device devices = 12;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
  if (this->_internal_has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_pos_);
  }

  // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
  if (this->_internal_has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  // .rbk.protocol.Message_MapPos control_pos1 = 5;
  if (this->_internal_has_control_pos1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_pos1_);
  }

  // .rbk.protocol.Message_MapPos control_pos2 = 6;
  if (this->_internal_has_control_pos2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_pos2_);
  }

  // .rbk.protocol.Message_MapPos control_pos3 = 9;
  if (this->_internal_has_control_pos3()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_pos3_);
  }

  // .rbk.protocol.Message_MapPos control_pos4 = 10;
  if (this->_internal_has_control_pos4()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_pos4_);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 15;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AdvancedCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_AdvancedCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AdvancedCurve::GetClassData() const { return &_class_data_; }

void Message_AdvancedCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_AdvancedCurve *>(to)->MergeFrom(
      static_cast<const Message_AdvancedCurve &>(from));
}


void Message_AdvancedCurve::MergeFrom(const Message_AdvancedCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_AdvancedCurve)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  devices_.MergeFrom(from.devices_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_start_pos()) {
    _internal_mutable_start_pos()->::rbk::protocol::Message_AdvancedPoint::MergeFrom(from._internal_start_pos());
  }
  if (from._internal_has_end_pos()) {
    _internal_mutable_end_pos()->::rbk::protocol::Message_AdvancedPoint::MergeFrom(from._internal_end_pos());
  }
  if (from._internal_has_control_pos1()) {
    _internal_mutable_control_pos1()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_control_pos1());
  }
  if (from._internal_has_control_pos2()) {
    _internal_mutable_control_pos2()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_control_pos2());
  }
  if (from._internal_has_control_pos3()) {
    _internal_mutable_control_pos3()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_control_pos3());
  }
  if (from._internal_has_control_pos4()) {
    _internal_mutable_control_pos4()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_control_pos4());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AdvancedCurve::CopyFrom(const Message_AdvancedCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_AdvancedCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AdvancedCurve::IsInitialized() const {
  return true;
}

void Message_AdvancedCurve::InternalSwap(Message_AdvancedCurve* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AdvancedCurve, attribute_)
      + sizeof(Message_AdvancedCurve::attribute_)
      - PROTOBUF_FIELD_OFFSET(Message_AdvancedCurve, start_pos_)>(
          reinterpret_cast<char*>(&start_pos_),
          reinterpret_cast<char*>(&other->start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AdvancedCurve::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[15]);
}

// ===================================================================

class Message_AdvancedArea::_Internal {
 public:
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_AdvancedArea* msg);
};

const ::rbk::protocol::Message_MapAttribute&
Message_AdvancedArea::_Internal::attribute(const Message_AdvancedArea* msg) {
  return *msg->attribute_;
}
Message_AdvancedArea::Message_AdvancedArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pos_group_(arena),
  property_(arena),
  devices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_AdvancedArea)
}
Message_AdvancedArea::Message_AdvancedArea(const Message_AdvancedArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pos_group_(from.pos_group_),
      property_(from.property_),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  dir_ = from.dir_;
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_AdvancedArea)
}

inline void Message_AdvancedArea::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attribute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&attribute_)) + sizeof(dir_));
}

Message_AdvancedArea::~Message_AdvancedArea() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_AdvancedArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_AdvancedArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete attribute_;
}

void Message_AdvancedArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_AdvancedArea::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_AdvancedArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_group_.Clear();
  property_.Clear();
  devices_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  dir_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_AdvancedArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedArea.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_AdvancedArea.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapPos pos_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pos_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double dir = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_Device devices = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_AdvancedArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_AdvancedArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedArea.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_AdvancedArea.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // repeated .rbk.protocol.Message_MapPos pos_group = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pos_group_size()); i < n; i++) {
    const auto& repfield = this->_internal_pos_group(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double dir = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dir = this->_internal_dir();
  uint64_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_dir(), target);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // repeated .rbk.protocol.Message_Device devices = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 15;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_AdvancedArea)
  return target;
}

size_t Message_AdvancedArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_AdvancedArea)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapPos pos_group = 3;
  total_size += 1UL * this->_internal_pos_group_size();
  for (const auto& msg : this->pos_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 5;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_Device devices = 10;
  total_size += 1UL * this->_internal_devices_size();
  for (const auto& msg : this->devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_MapAttribute attribute = 15;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  // double dir = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dir = this->_internal_dir();
  uint64_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_AdvancedArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_AdvancedArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_AdvancedArea::GetClassData() const { return &_class_data_; }

void Message_AdvancedArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_AdvancedArea *>(to)->MergeFrom(
      static_cast<const Message_AdvancedArea &>(from));
}


void Message_AdvancedArea::MergeFrom(const Message_AdvancedArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_AdvancedArea)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pos_group_.MergeFrom(from.pos_group_);
  property_.MergeFrom(from.property_);
  devices_.MergeFrom(from.devices_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dir = from._internal_dir();
  uint64_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _internal_set_dir(from._internal_dir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_AdvancedArea::CopyFrom(const Message_AdvancedArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_AdvancedArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_AdvancedArea::IsInitialized() const {
  return true;
}

void Message_AdvancedArea::InternalSwap(Message_AdvancedArea* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pos_group_.InternalSwap(&other->pos_group_);
  property_.InternalSwap(&other->property_);
  devices_.InternalSwap(&other->devices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_AdvancedArea, dir_)
      + sizeof(Message_AdvancedArea::dir_)
      - PROTOBUF_FIELD_OFFSET(Message_AdvancedArea, attribute_)>(
          reinterpret_cast<char*>(&attribute_),
          reinterpret_cast<char*>(&other->attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_AdvancedArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[16]);
}

// ===================================================================

class Message_VirtualLineList::_Internal {
 public:
};

Message_VirtualLineList::Message_VirtualLineList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  virtual_map_line_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_VirtualLineList)
}
Message_VirtualLineList::Message_VirtualLineList(const Message_VirtualLineList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      virtual_map_line_(from.virtual_map_line_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_VirtualLineList)
}

inline void Message_VirtualLineList::SharedCtor() {
}

Message_VirtualLineList::~Message_VirtualLineList() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_VirtualLineList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_VirtualLineList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_VirtualLineList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_VirtualLineList::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_VirtualLineList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_map_line_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_VirtualLineList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rbk.protocol.Message_MapLine virtual_map_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_virtual_map_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_VirtualLineList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_VirtualLineList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapLine virtual_map_line = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_virtual_map_line_size()); i < n; i++) {
    const auto& repfield = this->_internal_virtual_map_line(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_VirtualLineList)
  return target;
}

size_t Message_VirtualLineList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_VirtualLineList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapLine virtual_map_line = 1;
  total_size += 1UL * this->_internal_virtual_map_line_size();
  for (const auto& msg : this->virtual_map_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_VirtualLineList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_VirtualLineList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_VirtualLineList::GetClassData() const { return &_class_data_; }

void Message_VirtualLineList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_VirtualLineList *>(to)->MergeFrom(
      static_cast<const Message_VirtualLineList &>(from));
}


void Message_VirtualLineList::MergeFrom(const Message_VirtualLineList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_VirtualLineList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  virtual_map_line_.MergeFrom(from.virtual_map_line_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_VirtualLineList::CopyFrom(const Message_VirtualLineList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_VirtualLineList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_VirtualLineList::IsInitialized() const {
  return true;
}

void Message_VirtualLineList::InternalSwap(Message_VirtualLineList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  virtual_map_line_.InternalSwap(&other->virtual_map_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_VirtualLineList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[17]);
}

// ===================================================================

class Message_LaserDevice::_Internal {
 public:
};

Message_LaserDevice::Message_LaserDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  laser_margin_pos_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_LaserDevice)
}
Message_LaserDevice::Message_LaserDevice(const Message_LaserDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      laser_margin_pos_(from.laser_margin_pos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_LaserDevice)
}

inline void Message_LaserDevice::SharedCtor() {
id_ = 0u;
}

Message_LaserDevice::~Message_LaserDevice() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_LaserDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_LaserDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_LaserDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_LaserDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_LaserDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  laser_margin_pos_.Clear();
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_LaserDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapPos laser_margin_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_laser_margin_pos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_LaserDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_LaserDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .rbk.protocol.Message_MapPos laser_margin_pos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_laser_margin_pos_size()); i < n; i++) {
    const auto& repfield = this->_internal_laser_margin_pos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_LaserDevice)
  return target;
}

size_t Message_LaserDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_LaserDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapPos laser_margin_pos = 2;
  total_size += 1UL * this->_internal_laser_margin_pos_size();
  for (const auto& msg : this->laser_margin_pos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_LaserDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_LaserDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_LaserDevice::GetClassData() const { return &_class_data_; }

void Message_LaserDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_LaserDevice *>(to)->MergeFrom(
      static_cast<const Message_LaserDevice &>(from));
}


void Message_LaserDevice::MergeFrom(const Message_LaserDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_LaserDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  laser_margin_pos_.MergeFrom(from.laser_margin_pos_);
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_LaserDevice::CopyFrom(const Message_LaserDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_LaserDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_LaserDevice::IsInitialized() const {
  return true;
}

void Message_LaserDevice::InternalSwap(Message_LaserDevice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  laser_margin_pos_.InternalSwap(&other->laser_margin_pos_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_LaserDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[18]);
}

// ===================================================================

class Message_Device::_Internal {
 public:
};

Message_Device::Message_Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  laser_devices_(arena),
  ultrasonic_dist_(arena),
  fallingdown_dist_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_Device)
}
Message_Device::Message_Device(const Message_Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      laser_devices_(from.laser_devices_),
      ultrasonic_dist_(from.ultrasonic_dist_),
      fallingdown_dist_(from.fallingdown_dist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_Device)
}

inline void Message_Device::SharedCtor() {
model_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_Device::~Message_Device() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Device::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_name_.Destroy();
}

void Message_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_Device)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  laser_devices_.Clear();
  ultrasonic_dist_.Clear();
  fallingdown_dist_.Clear();
  model_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_Device.model_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_LaserDevice laser_devices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_laser_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double ultrasonic_dist = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ultrasonic_dist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_ultrasonic_dist(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double fallingdown_dist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_fallingdown_dist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_fallingdown_dist(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Device::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_Device)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_Device.model_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model_name(), target);
  }

  // repeated .rbk.protocol.Message_LaserDevice laser_devices = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_laser_devices_size()); i < n; i++) {
    const auto& repfield = this->_internal_laser_devices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated double ultrasonic_dist = 6;
  if (this->_internal_ultrasonic_dist_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_ultrasonic_dist(), target);
  }

  // repeated double fallingdown_dist = 7;
  if (this->_internal_fallingdown_dist_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_fallingdown_dist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_Device)
  return target;
}

size_t Message_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_Device)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_LaserDevice laser_devices = 5;
  total_size += 1UL * this->_internal_laser_devices_size();
  for (const auto& msg : this->laser_devices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double ultrasonic_dist = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ultrasonic_dist_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double fallingdown_dist = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_fallingdown_dist_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string model_name = 1;
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Device::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_Device::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Device::GetClassData() const { return &_class_data_; }

void Message_Device::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_Device *>(to)->MergeFrom(
      static_cast<const Message_Device &>(from));
}


void Message_Device::MergeFrom(const Message_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_Device)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  laser_devices_.MergeFrom(from.laser_devices_);
  ultrasonic_dist_.MergeFrom(from.ultrasonic_dist_);
  fallingdown_dist_.MergeFrom(from.fallingdown_dist_);
  if (!from._internal_model_name().empty()) {
    _internal_set_model_name(from._internal_model_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Device::CopyFrom(const Message_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Device::IsInitialized() const {
  return true;
}

void Message_Device::InternalSwap(Message_Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  laser_devices_.InternalSwap(&other->laser_devices_);
  ultrasonic_dist_.InternalSwap(&other->ultrasonic_dist_);
  fallingdown_dist_.InternalSwap(&other->fallingdown_dist_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_name_, lhs_arena,
      &other->model_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Device::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[19]);
}

// ===================================================================

class Message_PatrolRouteStation::_Internal {
 public:
};

Message_PatrolRouteStation::Message_PatrolRouteStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_PatrolRouteStation)
}
Message_PatrolRouteStation::Message_PatrolRouteStation(const Message_PatrolRouteStation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_PatrolRouteStation)
}

inline void Message_PatrolRouteStation::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message_PatrolRouteStation::~Message_PatrolRouteStation() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_PatrolRouteStation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PatrolRouteStation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void Message_PatrolRouteStation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_PatrolRouteStation::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_PatrolRouteStation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PatrolRouteStation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_PatrolRouteStation.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PatrolRouteStation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_PatrolRouteStation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_PatrolRouteStation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_PatrolRouteStation)
  return target;
}

size_t Message_PatrolRouteStation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_PatrolRouteStation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PatrolRouteStation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_PatrolRouteStation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PatrolRouteStation::GetClassData() const { return &_class_data_; }

void Message_PatrolRouteStation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_PatrolRouteStation *>(to)->MergeFrom(
      static_cast<const Message_PatrolRouteStation &>(from));
}


void Message_PatrolRouteStation::MergeFrom(const Message_PatrolRouteStation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_PatrolRouteStation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PatrolRouteStation::CopyFrom(const Message_PatrolRouteStation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_PatrolRouteStation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PatrolRouteStation::IsInitialized() const {
  return true;
}

void Message_PatrolRouteStation::InternalSwap(Message_PatrolRouteStation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PatrolRouteStation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[20]);
}

// ===================================================================

class Message_PatrolRoute::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_speed(const Message_PatrolRoute* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_acc(const Message_PatrolRoute* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot(const Message_PatrolRoute* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot_acc(const Message_PatrolRoute* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_dec(const Message_PatrolRoute* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_rot_dec(const Message_PatrolRoute* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
Message_PatrolRoute::_Internal::max_speed(const Message_PatrolRoute* msg) {
  return *msg->max_speed_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
Message_PatrolRoute::_Internal::max_acc(const Message_PatrolRoute* msg) {
  return *msg->max_acc_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
Message_PatrolRoute::_Internal::max_rot(const Message_PatrolRoute* msg) {
  return *msg->max_rot_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
Message_PatrolRoute::_Internal::max_rot_acc(const Message_PatrolRoute* msg) {
  return *msg->max_rot_acc_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
Message_PatrolRoute::_Internal::max_dec(const Message_PatrolRoute* msg) {
  return *msg->max_dec_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
Message_PatrolRoute::_Internal::max_rot_dec(const Message_PatrolRoute* msg) {
  return *msg->max_rot_dec_;
}
void Message_PatrolRoute::clear_max_speed() {
  if (GetArenaForAllocation() == nullptr && max_speed_ != nullptr) {
    delete max_speed_;
  }
  max_speed_ = nullptr;
}
void Message_PatrolRoute::clear_max_acc() {
  if (GetArenaForAllocation() == nullptr && max_acc_ != nullptr) {
    delete max_acc_;
  }
  max_acc_ = nullptr;
}
void Message_PatrolRoute::clear_max_rot() {
  if (GetArenaForAllocation() == nullptr && max_rot_ != nullptr) {
    delete max_rot_;
  }
  max_rot_ = nullptr;
}
void Message_PatrolRoute::clear_max_rot_acc() {
  if (GetArenaForAllocation() == nullptr && max_rot_acc_ != nullptr) {
    delete max_rot_acc_;
  }
  max_rot_acc_ = nullptr;
}
void Message_PatrolRoute::clear_max_dec() {
  if (GetArenaForAllocation() == nullptr && max_dec_ != nullptr) {
    delete max_dec_;
  }
  max_dec_ = nullptr;
}
void Message_PatrolRoute::clear_max_rot_dec() {
  if (GetArenaForAllocation() == nullptr && max_rot_dec_ != nullptr) {
    delete max_rot_dec_;
  }
  max_rot_dec_ = nullptr;
}
Message_PatrolRoute::Message_PatrolRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  station_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_PatrolRoute)
}
Message_PatrolRoute::Message_PatrolRoute(const Message_PatrolRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      station_list_(from.station_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_max_speed()) {
    max_speed_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_speed_);
  } else {
    max_speed_ = nullptr;
  }
  if (from._internal_has_max_acc()) {
    max_acc_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_acc_);
  } else {
    max_acc_ = nullptr;
  }
  if (from._internal_has_max_rot()) {
    max_rot_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_rot_);
  } else {
    max_rot_ = nullptr;
  }
  if (from._internal_has_max_rot_acc()) {
    max_rot_acc_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_rot_acc_);
  } else {
    max_rot_acc_ = nullptr;
  }
  if (from._internal_has_max_dec()) {
    max_dec_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_dec_);
  } else {
    max_dec_ = nullptr;
  }
  if (from._internal_has_max_rot_dec()) {
    max_rot_dec_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.max_rot_dec_);
  } else {
    max_rot_dec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_PatrolRoute)
}

inline void Message_PatrolRoute::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_speed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_rot_dec_) -
    reinterpret_cast<char*>(&max_speed_)) + sizeof(max_rot_dec_));
}

Message_PatrolRoute::~Message_PatrolRoute() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_PatrolRoute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_PatrolRoute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete max_speed_;
  if (this != internal_default_instance()) delete max_acc_;
  if (this != internal_default_instance()) delete max_rot_;
  if (this != internal_default_instance()) delete max_rot_acc_;
  if (this != internal_default_instance()) delete max_dec_;
  if (this != internal_default_instance()) delete max_rot_dec_;
}

void Message_PatrolRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_PatrolRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_PatrolRoute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  station_list_.Clear();
  name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && max_speed_ != nullptr) {
    delete max_speed_;
  }
  max_speed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_acc_ != nullptr) {
    delete max_acc_;
  }
  max_acc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_rot_ != nullptr) {
    delete max_rot_;
  }
  max_rot_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_rot_acc_ != nullptr) {
    delete max_rot_acc_;
  }
  max_rot_acc_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_dec_ != nullptr) {
    delete max_dec_;
  }
  max_dec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && max_rot_dec_ != nullptr) {
    delete max_rot_dec_;
  }
  max_rot_dec_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_PatrolRoute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_PatrolRoute.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_PatrolRouteStation station_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_station_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_speed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_acc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_rot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_rot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_rot_acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_rot_acc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_dec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_dec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_rot_dec = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_rot_dec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_PatrolRoute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_PatrolRoute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_PatrolRoute.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .rbk.protocol.Message_PatrolRouteStation station_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_station_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_station_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue max_speed = 4;
  if (this->_internal_has_max_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::max_speed(this),
        _Internal::max_speed(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue max_acc = 5;
  if (this->_internal_has_max_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::max_acc(this),
        _Internal::max_acc(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue max_rot = 6;
  if (this->_internal_has_max_rot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::max_rot(this),
        _Internal::max_rot(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue max_rot_acc = 7;
  if (this->_internal_has_max_rot_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::max_rot_acc(this),
        _Internal::max_rot_acc(this).GetCachedSize(), target, stream);
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_desc(), target);
  }

  // .google.protobuf.DoubleValue max_dec = 9;
  if (this->_internal_has_max_dec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::max_dec(this),
        _Internal::max_dec(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue max_rot_dec = 10;
  if (this->_internal_has_max_rot_dec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::max_rot_dec(this),
        _Internal::max_rot_dec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_PatrolRoute)
  return target;
}

size_t Message_PatrolRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_PatrolRoute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_PatrolRouteStation station_list = 2;
  total_size += 1UL * this->_internal_station_list_size();
  for (const auto& msg : this->station_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes desc = 8;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .google.protobuf.DoubleValue max_speed = 4;
  if (this->_internal_has_max_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_speed_);
  }

  // .google.protobuf.DoubleValue max_acc = 5;
  if (this->_internal_has_max_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_acc_);
  }

  // .google.protobuf.DoubleValue max_rot = 6;
  if (this->_internal_has_max_rot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_rot_);
  }

  // .google.protobuf.DoubleValue max_rot_acc = 7;
  if (this->_internal_has_max_rot_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_rot_acc_);
  }

  // .google.protobuf.DoubleValue max_dec = 9;
  if (this->_internal_has_max_dec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_dec_);
  }

  // .google.protobuf.DoubleValue max_rot_dec = 10;
  if (this->_internal_has_max_rot_dec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_rot_dec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_PatrolRoute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_PatrolRoute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_PatrolRoute::GetClassData() const { return &_class_data_; }

void Message_PatrolRoute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_PatrolRoute *>(to)->MergeFrom(
      static_cast<const Message_PatrolRoute &>(from));
}


void Message_PatrolRoute::MergeFrom(const Message_PatrolRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_PatrolRoute)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  station_list_.MergeFrom(from.station_list_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_max_speed()) {
    _internal_mutable_max_speed()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_speed());
  }
  if (from._internal_has_max_acc()) {
    _internal_mutable_max_acc()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_acc());
  }
  if (from._internal_has_max_rot()) {
    _internal_mutable_max_rot()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_rot());
  }
  if (from._internal_has_max_rot_acc()) {
    _internal_mutable_max_rot_acc()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_rot_acc());
  }
  if (from._internal_has_max_dec()) {
    _internal_mutable_max_dec()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_dec());
  }
  if (from._internal_has_max_rot_dec()) {
    _internal_mutable_max_rot_dec()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_max_rot_dec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_PatrolRoute::CopyFrom(const Message_PatrolRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_PatrolRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_PatrolRoute::IsInitialized() const {
  return true;
}

void Message_PatrolRoute::InternalSwap(Message_PatrolRoute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  station_list_.InternalSwap(&other->station_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_PatrolRoute, max_rot_dec_)
      + sizeof(Message_PatrolRoute::max_rot_dec_)
      - PROTOBUF_FIELD_OFFSET(Message_PatrolRoute, max_speed_)>(
          reinterpret_cast<char*>(&max_speed_),
          reinterpret_cast<char*>(&other->max_speed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_PatrolRoute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[21]);
}

// ===================================================================

class Message_Primitive::_Internal {
 public:
  static const ::rbk::protocol::Message_AdvancedPoint& start_pos(const Message_Primitive* msg);
  static const ::rbk::protocol::Message_AdvancedPoint& end_pos(const Message_Primitive* msg);
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_Primitive* msg);
};

const ::rbk::protocol::Message_AdvancedPoint&
Message_Primitive::_Internal::start_pos(const Message_Primitive* msg) {
  return *msg->start_pos_;
}
const ::rbk::protocol::Message_AdvancedPoint&
Message_Primitive::_Internal::end_pos(const Message_Primitive* msg) {
  return *msg->end_pos_;
}
const ::rbk::protocol::Message_MapAttribute&
Message_Primitive::_Internal::attribute(const Message_Primitive* msg) {
  return *msg->attribute_;
}
Message_Primitive::Message_Primitive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  control_pos_list_(arena),
  property_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_Primitive)
}
Message_Primitive::Message_Primitive(const Message_Primitive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      control_pos_list_(from.control_pos_list_),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_start_pos()) {
    start_pos_ = new ::rbk::protocol::Message_AdvancedPoint(*from.start_pos_);
  } else {
    start_pos_ = nullptr;
  }
  if (from._internal_has_end_pos()) {
    end_pos_ = new ::rbk::protocol::Message_AdvancedPoint(*from.end_pos_);
  } else {
    end_pos_ = nullptr;
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_Primitive)
}

inline void Message_Primitive::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&start_pos_)) + sizeof(attribute_));
}

Message_Primitive::~Message_Primitive() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_Primitive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Primitive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete start_pos_;
  if (this != internal_default_instance()) delete end_pos_;
  if (this != internal_default_instance()) delete attribute_;
}

void Message_Primitive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_Primitive::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_Primitive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_pos_list_.Clear();
  property_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && start_pos_ != nullptr) {
    delete start_pos_;
  }
  start_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_pos_ != nullptr) {
    delete end_pos_;
  }
  end_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Primitive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_Primitive.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_Primitive.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapPos control_pos_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_pos_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Primitive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_Primitive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_Primitive.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_Primitive.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
  if (this->_internal_has_start_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start_pos(this),
        _Internal::start_pos(this).GetCachedSize(), target, stream);
  }

  // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
  if (this->_internal_has_end_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end_pos(this),
        _Internal::end_pos(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapPos control_pos_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_control_pos_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_control_pos_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes desc = 7;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_desc(), target);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 8;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_Primitive)
  return target;
}

size_t Message_Primitive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_Primitive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapPos control_pos_list = 5;
  total_size += 1UL * this->_internal_control_pos_list_size();
  for (const auto& msg : this->control_pos_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 6;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes desc = 7;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_AdvancedPoint start_pos = 3;
  if (this->_internal_has_start_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_pos_);
  }

  // .rbk.protocol.Message_AdvancedPoint end_pos = 4;
  if (this->_internal_has_end_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_pos_);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 8;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Primitive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_Primitive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Primitive::GetClassData() const { return &_class_data_; }

void Message_Primitive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_Primitive *>(to)->MergeFrom(
      static_cast<const Message_Primitive &>(from));
}


void Message_Primitive::MergeFrom(const Message_Primitive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_Primitive)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  control_pos_list_.MergeFrom(from.control_pos_list_);
  property_.MergeFrom(from.property_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_start_pos()) {
    _internal_mutable_start_pos()->::rbk::protocol::Message_AdvancedPoint::MergeFrom(from._internal_start_pos());
  }
  if (from._internal_has_end_pos()) {
    _internal_mutable_end_pos()->::rbk::protocol::Message_AdvancedPoint::MergeFrom(from._internal_end_pos());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Primitive::CopyFrom(const Message_Primitive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_Primitive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Primitive::IsInitialized() const {
  return true;
}

void Message_Primitive::InternalSwap(Message_Primitive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  control_pos_list_.InternalSwap(&other->control_pos_list_);
  property_.InternalSwap(&other->property_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_Primitive, attribute_)
      + sizeof(Message_Primitive::attribute_)
      - PROTOBUF_FIELD_OFFSET(Message_Primitive, start_pos_)>(
          reinterpret_cast<char*>(&start_pos_),
          reinterpret_cast<char*>(&other->start_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Primitive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[22]);
}

// ===================================================================

class Message_ExternalDevice::_Internal {
 public:
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_ExternalDevice* msg);
};

const ::rbk::protocol::Message_MapAttribute&
Message_ExternalDevice::_Internal::attribute(const Message_ExternalDevice* msg) {
  return *msg->attribute_;
}
Message_ExternalDevice::Message_ExternalDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  property_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_ExternalDevice)
}
Message_ExternalDevice::Message_ExternalDevice(const Message_ExternalDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  is_enabled_ = from.is_enabled_;
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_ExternalDevice)
}

inline void Message_ExternalDevice::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&attribute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&attribute_)) + sizeof(is_enabled_));
}

Message_ExternalDevice::~Message_ExternalDevice() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_ExternalDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_ExternalDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete attribute_;
}

void Message_ExternalDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_ExternalDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_ExternalDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  is_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_ExternalDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_ExternalDevice.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_ExternalDevice.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_ExternalDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_ExternalDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_ExternalDevice.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_ExternalDevice.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // bool is_enabled = 3;
  if (this->_internal_is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_enabled(), target);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes desc = 5;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_desc(), target);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 6;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_ExternalDevice)
  return target;
}

size_t Message_ExternalDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_ExternalDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapProperty property = 4;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // bytes desc = 5;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_MapAttribute attribute = 6;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  // bool is_enabled = 3;
  if (this->_internal_is_enabled() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_ExternalDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_ExternalDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_ExternalDevice::GetClassData() const { return &_class_data_; }

void Message_ExternalDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_ExternalDevice *>(to)->MergeFrom(
      static_cast<const Message_ExternalDevice &>(from));
}


void Message_ExternalDevice::MergeFrom(const Message_ExternalDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_ExternalDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  if (from._internal_is_enabled() != 0) {
    _internal_set_is_enabled(from._internal_is_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_ExternalDevice::CopyFrom(const Message_ExternalDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_ExternalDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_ExternalDevice::IsInitialized() const {
  return true;
}

void Message_ExternalDevice::InternalSwap(Message_ExternalDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_ExternalDevice, is_enabled_)
      + sizeof(Message_ExternalDevice::is_enabled_)
      - PROTOBUF_FIELD_OFFSET(Message_ExternalDevice, attribute_)>(
          reinterpret_cast<char*>(&attribute_),
          reinterpret_cast<char*>(&other->attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_ExternalDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[23]);
}

// ===================================================================

class Message_BinLocation::_Internal {
 public:
  static const ::rbk::protocol::Message_MapPos& pos(const Message_BinLocation* msg);
  static const ::rbk::protocol::Message_MapAttribute& attribute(const Message_BinLocation* msg);
};

const ::rbk::protocol::Message_MapPos&
Message_BinLocation::_Internal::pos(const Message_BinLocation* msg) {
  return *msg->pos_;
}
const ::rbk::protocol::Message_MapAttribute&
Message_BinLocation::_Internal::attribute(const Message_BinLocation* msg) {
  return *msg->attribute_;
}
Message_BinLocation::Message_BinLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  property_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_BinLocation)
}
Message_BinLocation::Message_BinLocation(const Message_BinLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_(from.property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  instance_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_name().empty()) {
    instance_name_.Set(from._internal_instance_name(), 
      GetArenaForAllocation());
  }
  group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_name().empty()) {
    group_name_.Set(from._internal_group_name(), 
      GetArenaForAllocation());
  }
  point_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    point_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_name().empty()) {
    point_name_.Set(from._internal_point_name(), 
      GetArenaForAllocation());
  }
  desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_desc().empty()) {
    desc_.Set(from._internal_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pos()) {
    pos_ = new ::rbk::protocol::Message_MapPos(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_attribute()) {
    attribute_ = new ::rbk::protocol::Message_MapAttribute(*from.attribute_);
  } else {
    attribute_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_BinLocation)
}

inline void Message_BinLocation::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
point_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  point_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
desc_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  desc_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attribute_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(attribute_));
}

Message_BinLocation::~Message_BinLocation() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_BinLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_BinLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
  instance_name_.Destroy();
  group_name_.Destroy();
  point_name_.Destroy();
  desc_.Destroy();
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete attribute_;
}

void Message_BinLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_BinLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_BinLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_.Clear();
  class_name_.ClearToEmpty();
  instance_name_.ClearToEmpty();
  group_name_.ClearToEmpty();
  point_name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attribute_ != nullptr) {
    delete attribute_;
  }
  attribute_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_BinLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_BinLocation.class_name"));
        } else
          goto handle_unusual;
        continue;
      // string instance_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_BinLocation.instance_name"));
        } else
          goto handle_unusual;
        continue;
      // string group_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_BinLocation.group_name"));
        } else
          goto handle_unusual;
        continue;
      // string point_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_point_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_BinLocation.point_name"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapPos pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapAttribute attribute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_BinLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_BinLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_BinLocation.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_name().data(), static_cast<int>(this->_internal_instance_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_BinLocation.instance_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_name(), target);
  }

  // string group_name = 3;
  if (!this->_internal_group_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group_name().data(), static_cast<int>(this->_internal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_BinLocation.group_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_group_name(), target);
  }

  // string point_name = 4;
  if (!this->_internal_point_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_point_name().data(), static_cast<int>(this->_internal_point_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_BinLocation.point_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_point_name(), target);
  }

  // .rbk.protocol.Message_MapPos pos = 5;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapProperty property = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_size()); i < n; i++) {
    const auto& repfield = this->_internal_property(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes desc = 7;
  if (!this->_internal_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_desc(), target);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 8;
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_BinLocation)
  return target;
}

size_t Message_BinLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_BinLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapProperty property = 6;
  total_size += 1UL * this->_internal_property_size();
  for (const auto& msg : this->property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string class_name = 1;
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // string instance_name = 2;
  if (!this->_internal_instance_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_name());
  }

  // string group_name = 3;
  if (!this->_internal_group_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group_name());
  }

  // string point_name = 4;
  if (!this->_internal_point_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_point_name());
  }

  // bytes desc = 7;
  if (!this->_internal_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_desc());
  }

  // .rbk.protocol.Message_MapPos pos = 5;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .rbk.protocol.Message_MapAttribute attribute = 8;
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attribute_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_BinLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_BinLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_BinLocation::GetClassData() const { return &_class_data_; }

void Message_BinLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_BinLocation *>(to)->MergeFrom(
      static_cast<const Message_BinLocation &>(from));
}


void Message_BinLocation::MergeFrom(const Message_BinLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_BinLocation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  property_.MergeFrom(from.property_);
  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  if (!from._internal_instance_name().empty()) {
    _internal_set_instance_name(from._internal_instance_name());
  }
  if (!from._internal_group_name().empty()) {
    _internal_set_group_name(from._internal_group_name());
  }
  if (!from._internal_point_name().empty()) {
    _internal_set_point_name(from._internal_point_name());
  }
  if (!from._internal_desc().empty()) {
    _internal_set_desc(from._internal_desc());
  }
  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::rbk::protocol::Message_MapPos::MergeFrom(from._internal_pos());
  }
  if (from._internal_has_attribute()) {
    _internal_mutable_attribute()->::rbk::protocol::Message_MapAttribute::MergeFrom(from._internal_attribute());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_BinLocation::CopyFrom(const Message_BinLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_BinLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_BinLocation::IsInitialized() const {
  return true;
}

void Message_BinLocation::InternalSwap(Message_BinLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_.InternalSwap(&other->property_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instance_name_, lhs_arena,
      &other->instance_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &group_name_, lhs_arena,
      &other->group_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &point_name_, lhs_arena,
      &other->point_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &desc_, lhs_arena,
      &other->desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Message_BinLocation, attribute_)
      + sizeof(Message_BinLocation::attribute_)
      - PROTOBUF_FIELD_OFFSET(Message_BinLocation, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_BinLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[24]);
}

// ===================================================================

class Message_BinLocations::_Internal {
 public:
};

Message_BinLocations::Message_BinLocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bin_location_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_BinLocations)
}
Message_BinLocations::Message_BinLocations(const Message_BinLocations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bin_location_list_(from.bin_location_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_BinLocations)
}

inline void Message_BinLocations::SharedCtor() {
}

Message_BinLocations::~Message_BinLocations() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_BinLocations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_BinLocations::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message_BinLocations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_BinLocations::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_BinLocations)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bin_location_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_BinLocations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rbk.protocol.Message_BinLocation bin_location_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bin_location_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_BinLocations::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_BinLocations)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_BinLocation bin_location_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bin_location_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_bin_location_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_BinLocations)
  return target;
}

size_t Message_BinLocations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_BinLocations)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_BinLocation bin_location_list = 1;
  total_size += 1UL * this->_internal_bin_location_list_size();
  for (const auto& msg : this->bin_location_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_BinLocations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_BinLocations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_BinLocations::GetClassData() const { return &_class_data_; }

void Message_BinLocations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_BinLocations *>(to)->MergeFrom(
      static_cast<const Message_BinLocations &>(from));
}


void Message_BinLocations::MergeFrom(const Message_BinLocations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_BinLocations)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bin_location_list_.MergeFrom(from.bin_location_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_BinLocations::CopyFrom(const Message_BinLocations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_BinLocations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_BinLocations::IsInitialized() const {
  return true;
}

void Message_BinLocations::InternalSwap(Message_BinLocations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bin_location_list_.InternalSwap(&other->bin_location_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_BinLocations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[25]);
}

// ===================================================================

class Message_Map::_Internal {
 public:
  static const ::rbk::protocol::Message_MapHeader& header(const Message_Map* msg);
};

const ::rbk::protocol::Message_MapHeader&
Message_Map::_Internal::header(const Message_Map* msg) {
  return *msg->header_;
}
Message_Map::Message_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  normal_pos_list_(arena),
  normal_line_list_(arena),
  normal_pos3d_list_(arena),
  advanced_point_list_(arena),
  advanced_line_list_(arena),
  advanced_curve_list_(arena),
  advanced_area_list_(arena),
  patrol_route_list_(arena),
  rssi_pos_list_(arena),
  reflector_pos_list_(arena),
  tag_pos_list_(arena),
  primitive_list_(arena),
  external_device_list_(arena),
  bin_locations_list_(arena),
  user_data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_Map)
}
Message_Map::Message_Map(const Message_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      normal_pos_list_(from.normal_pos_list_),
      normal_line_list_(from.normal_line_list_),
      normal_pos3d_list_(from.normal_pos3d_list_),
      advanced_point_list_(from.advanced_point_list_),
      advanced_line_list_(from.advanced_line_list_),
      advanced_curve_list_(from.advanced_curve_list_),
      advanced_area_list_(from.advanced_area_list_),
      patrol_route_list_(from.patrol_route_list_),
      rssi_pos_list_(from.rssi_pos_list_),
      reflector_pos_list_(from.reflector_pos_list_),
      tag_pos_list_(from.tag_pos_list_),
      primitive_list_(from.primitive_list_),
      external_device_list_(from.external_device_list_),
      bin_locations_list_(from.bin_locations_list_),
      user_data_(from.user_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_directory().empty()) {
    map_directory_.Set(from._internal_map_directory(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::rbk::protocol::Message_MapHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_Map)
}

inline void Message_Map::SharedCtor() {
map_directory_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_directory_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

Message_Map::~Message_Map() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_directory_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void Message_Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  normal_pos_list_.Clear();
  normal_line_list_.Clear();
  normal_pos3d_list_.Clear();
  advanced_point_list_.Clear();
  advanced_line_list_.Clear();
  advanced_curve_list_.Clear();
  advanced_area_list_.Clear();
  patrol_route_list_.Clear();
  rssi_pos_list_.Clear();
  reflector_pos_list_.Clear();
  tag_pos_list_.Clear();
  primitive_list_.Clear();
  external_device_list_.Clear();
  bin_locations_list_.Clear();
  user_data_.Clear();
  map_directory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_Map.map_directory"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapHeader header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapPos normal_pos_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normal_pos_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapLine normal_line_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normal_line_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normal_pos3d_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_AdvancedPoint advanced_point_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_advanced_point_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_AdvancedLine advanced_line_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_advanced_line_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_AdvancedCurve advanced_curve_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_advanced_curve_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_AdvancedArea advanced_area_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_advanced_area_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_PatrolRoute patrol_route_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_patrol_route_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapRSSIPos rssi_pos_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rssi_pos_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_ReflectorPos reflector_pos_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reflector_pos_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_tagPos tag_pos_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tag_pos_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_Primitive primitive_list = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_primitive_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_ExternalDevice external_device_list = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_external_device_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_BinLocations bin_locations_list = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bin_locations_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapProperty user_data = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_user_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_directory = 1;
  if (!this->_internal_map_directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_directory().data(), static_cast<int>(this->_internal_map_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_Map.map_directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_directory(), target);
  }

  // .rbk.protocol.Message_MapHeader header = 2;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapPos normal_pos_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normal_pos_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_normal_pos_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapLine normal_line_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normal_line_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_normal_line_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normal_pos3d_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_normal_pos3d_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_AdvancedPoint advanced_point_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_advanced_point_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_advanced_point_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_AdvancedLine advanced_line_list = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_advanced_line_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_advanced_line_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_AdvancedCurve advanced_curve_list = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_advanced_curve_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_advanced_curve_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_AdvancedArea advanced_area_list = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_advanced_area_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_advanced_area_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_PatrolRoute patrol_route_list = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_patrol_route_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_patrol_route_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapRSSIPos rssi_pos_list = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rssi_pos_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_rssi_pos_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_ReflectorPos reflector_pos_list = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_reflector_pos_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_reflector_pos_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_tagPos tag_pos_list = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tag_pos_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_tag_pos_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_Primitive primitive_list = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_primitive_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_primitive_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_ExternalDevice external_device_list = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_device_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_device_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_BinLocations bin_locations_list = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bin_locations_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_bin_locations_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapProperty user_data = 100;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(100, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_Map)
  return target;
}

size_t Message_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapPos normal_pos_list = 3;
  total_size += 1UL * this->_internal_normal_pos_list_size();
  for (const auto& msg : this->normal_pos_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapLine normal_line_list = 4;
  total_size += 1UL * this->_internal_normal_line_list_size();
  for (const auto& msg : this->normal_line_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 5;
  total_size += 1UL * this->_internal_normal_pos3d_list_size();
  for (const auto& msg : this->normal_pos3d_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_AdvancedPoint advanced_point_list = 6;
  total_size += 1UL * this->_internal_advanced_point_list_size();
  for (const auto& msg : this->advanced_point_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_AdvancedLine advanced_line_list = 7;
  total_size += 1UL * this->_internal_advanced_line_list_size();
  for (const auto& msg : this->advanced_line_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_AdvancedCurve advanced_curve_list = 8;
  total_size += 1UL * this->_internal_advanced_curve_list_size();
  for (const auto& msg : this->advanced_curve_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_AdvancedArea advanced_area_list = 9;
  total_size += 1UL * this->_internal_advanced_area_list_size();
  for (const auto& msg : this->advanced_area_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_PatrolRoute patrol_route_list = 10;
  total_size += 1UL * this->_internal_patrol_route_list_size();
  for (const auto& msg : this->patrol_route_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapRSSIPos rssi_pos_list = 11;
  total_size += 1UL * this->_internal_rssi_pos_list_size();
  for (const auto& msg : this->rssi_pos_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_ReflectorPos reflector_pos_list = 12;
  total_size += 1UL * this->_internal_reflector_pos_list_size();
  for (const auto& msg : this->reflector_pos_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_tagPos tag_pos_list = 13;
  total_size += 1UL * this->_internal_tag_pos_list_size();
  for (const auto& msg : this->tag_pos_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_Primitive primitive_list = 14;
  total_size += 1UL * this->_internal_primitive_list_size();
  for (const auto& msg : this->primitive_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_ExternalDevice external_device_list = 15;
  total_size += 1UL * this->_internal_external_device_list_size();
  for (const auto& msg : this->external_device_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_BinLocations bin_locations_list = 16;
  total_size += 2UL * this->_internal_bin_locations_list_size();
  for (const auto& msg : this->bin_locations_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .rbk.protocol.Message_MapProperty user_data = 100;
  total_size += 2UL * this->_internal_user_data_size();
  for (const auto& msg : this->user_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string map_directory = 1;
  if (!this->_internal_map_directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_directory());
  }

  // .rbk.protocol.Message_MapHeader header = 2;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Map::GetClassData() const { return &_class_data_; }

void Message_Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_Map *>(to)->MergeFrom(
      static_cast<const Message_Map &>(from));
}


void Message_Map::MergeFrom(const Message_Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_Map)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  normal_pos_list_.MergeFrom(from.normal_pos_list_);
  normal_line_list_.MergeFrom(from.normal_line_list_);
  normal_pos3d_list_.MergeFrom(from.normal_pos3d_list_);
  advanced_point_list_.MergeFrom(from.advanced_point_list_);
  advanced_line_list_.MergeFrom(from.advanced_line_list_);
  advanced_curve_list_.MergeFrom(from.advanced_curve_list_);
  advanced_area_list_.MergeFrom(from.advanced_area_list_);
  patrol_route_list_.MergeFrom(from.patrol_route_list_);
  rssi_pos_list_.MergeFrom(from.rssi_pos_list_);
  reflector_pos_list_.MergeFrom(from.reflector_pos_list_);
  tag_pos_list_.MergeFrom(from.tag_pos_list_);
  primitive_list_.MergeFrom(from.primitive_list_);
  external_device_list_.MergeFrom(from.external_device_list_);
  bin_locations_list_.MergeFrom(from.bin_locations_list_);
  user_data_.MergeFrom(from.user_data_);
  if (!from._internal_map_directory().empty()) {
    _internal_set_map_directory(from._internal_map_directory());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::rbk::protocol::Message_MapHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Map::CopyFrom(const Message_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Map::IsInitialized() const {
  return true;
}

void Message_Map::InternalSwap(Message_Map* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  normal_pos_list_.InternalSwap(&other->normal_pos_list_);
  normal_line_list_.InternalSwap(&other->normal_line_list_);
  normal_pos3d_list_.InternalSwap(&other->normal_pos3d_list_);
  advanced_point_list_.InternalSwap(&other->advanced_point_list_);
  advanced_line_list_.InternalSwap(&other->advanced_line_list_);
  advanced_curve_list_.InternalSwap(&other->advanced_curve_list_);
  advanced_area_list_.InternalSwap(&other->advanced_area_list_);
  patrol_route_list_.InternalSwap(&other->patrol_route_list_);
  rssi_pos_list_.InternalSwap(&other->rssi_pos_list_);
  reflector_pos_list_.InternalSwap(&other->reflector_pos_list_);
  tag_pos_list_.InternalSwap(&other->tag_pos_list_);
  primitive_list_.InternalSwap(&other->primitive_list_);
  external_device_list_.InternalSwap(&other->external_device_list_);
  bin_locations_list_.InternalSwap(&other->bin_locations_list_);
  user_data_.InternalSwap(&other->user_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &map_directory_, lhs_arena,
      &other->map_directory_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[26]);
}

// ===================================================================

class Message_Map3D::_Internal {
 public:
  static const ::rbk::protocol::Message_MapHeader& header(const Message_Map3D* msg);
};

const ::rbk::protocol::Message_MapHeader&
Message_Map3D::_Internal::header(const Message_Map3D* msg) {
  return *msg->header_;
}
Message_Map3D::Message_Map3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  normal_pos3d_list_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:rbk.protocol.Message_Map3D)
}
Message_Map3D::Message_Map3D(const Message_Map3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      normal_pos3d_list_(from.normal_pos3d_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_directory().empty()) {
    map_directory_.Set(from._internal_map_directory(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::rbk::protocol::Message_MapHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:rbk.protocol.Message_Map3D)
}

inline void Message_Map3D::SharedCtor() {
map_directory_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_directory_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

Message_Map3D::~Message_Map3D() {
  // @@protoc_insertion_point(destructor:rbk.protocol.Message_Map3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message_Map3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_directory_.Destroy();
  if (this != internal_default_instance()) delete header_;
}

void Message_Map3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message_Map3D::Clear() {
// @@protoc_insertion_point(message_clear_start:rbk.protocol.Message_Map3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  normal_pos3d_list_.Clear();
  map_directory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_Map3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_directory = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "rbk.protocol.Message_Map3D.map_directory"));
        } else
          goto handle_unusual;
        continue;
      // .rbk.protocol.Message_MapHeader header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normal_pos3d_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Message_Map3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rbk.protocol.Message_Map3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_directory = 1;
  if (!this->_internal_map_directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_directory().data(), static_cast<int>(this->_internal_map_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rbk.protocol.Message_Map3D.map_directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_directory(), target);
  }

  // .rbk.protocol.Message_MapHeader header = 2;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_normal_pos3d_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_normal_pos3d_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rbk.protocol.Message_Map3D)
  return target;
}

size_t Message_Map3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbk.protocol.Message_Map3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rbk.protocol.Message_MapPos normal_pos3d_list = 3;
  total_size += 1UL * this->_internal_normal_pos3d_list_size();
  for (const auto& msg : this->normal_pos3d_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string map_directory = 1;
  if (!this->_internal_map_directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_directory());
  }

  // .rbk.protocol.Message_MapHeader header = 2;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message_Map3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message_Map3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message_Map3D::GetClassData() const { return &_class_data_; }

void Message_Map3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message_Map3D *>(to)->MergeFrom(
      static_cast<const Message_Map3D &>(from));
}


void Message_Map3D::MergeFrom(const Message_Map3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbk.protocol.Message_Map3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  normal_pos3d_list_.MergeFrom(from.normal_pos3d_list_);
  if (!from._internal_map_directory().empty()) {
    _internal_set_map_directory(from._internal_map_directory());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::rbk::protocol::Message_MapHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message_Map3D::CopyFrom(const Message_Map3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbk.protocol.Message_Map3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_Map3D::IsInitialized() const {
  return true;
}

void Message_Map3D::InternalSwap(Message_Map3D* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  normal_pos3d_list_.InternalSwap(&other->normal_pos3d_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &map_directory_, lhs_arena,
      &other->map_directory_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_Map3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_5fmap_2eproto_getter, &descriptor_table_message_5fmap_2eproto_once,
      file_level_metadata_message_5fmap_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
}  // namespace rbk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapLogData*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapLogData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapLogData >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapOdo*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapOdo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapOdo >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapLogData3D*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapLogData3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapLogData3D >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapLog*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapLog >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapProperty*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapPos*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapPos >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapRSSIPos*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapRSSIPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapRSSIPos >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_ReflectorPos*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_ReflectorPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_ReflectorPos >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_LiveRefPos*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_LiveRefPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_LiveRefPos >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_tagPos*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_tagPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_tagPos >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapLine*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapLine >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapHeader*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_MapAttribute*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_MapAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_MapAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_AdvancedPoint*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_AdvancedPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_AdvancedPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_AdvancedLine*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_AdvancedLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_AdvancedLine >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_AdvancedCurve*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_AdvancedCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_AdvancedCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_AdvancedArea*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_AdvancedArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_AdvancedArea >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_VirtualLineList*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_VirtualLineList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_VirtualLineList >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_LaserDevice*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_LaserDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_LaserDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_Device*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_PatrolRouteStation*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_PatrolRouteStation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_PatrolRouteStation >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_PatrolRoute*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_PatrolRoute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_PatrolRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_Primitive*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_Primitive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_Primitive >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_ExternalDevice*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_ExternalDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_ExternalDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_BinLocation*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_BinLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_BinLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_BinLocations*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_BinLocations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_BinLocations >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_Map*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::rbk::protocol::Message_Map3D*
Arena::CreateMaybeMessage< ::rbk::protocol::Message_Map3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rbk::protocol::Message_Map3D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
